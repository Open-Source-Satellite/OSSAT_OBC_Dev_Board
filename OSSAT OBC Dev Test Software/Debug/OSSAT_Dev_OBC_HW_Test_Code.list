
OSSAT_Dev_OBC_HW_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  0800729c  0800729c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005f4  24000000  08007e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005dc  240005f4  08008484  000205f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000bd0  08008484  00020bd0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000258c7  00000000  00000000  00020622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003521  00000000  00000000  00045ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00049410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f70  00000000  00000000  0004a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b0ae  00000000  00000000  0004b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015510  00000000  00000000  00086496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184419  00000000  00000000  0009b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021fdbf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000043d0  00000000  00000000  0021fe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240005f4 	.word	0x240005f4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007284 	.word	0x08007284

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240005f8 	.word	0x240005f8
 80002d4:	08007284 	.word	0x08007284

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b96e 	b.w	80005dc <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468c      	mov	ip, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8083 	bne.w	800042e <__udivmoddi4+0x116>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d947      	bls.n	80003be <__udivmoddi4+0xa6>
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	b142      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000334:	f1c2 0020 	rsb	r0, r2, #32
 8000338:	fa24 f000 	lsr.w	r0, r4, r0
 800033c:	4091      	lsls	r1, r2
 800033e:	4097      	lsls	r7, r2
 8000340:	ea40 0c01 	orr.w	ip, r0, r1
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbbc f6f8 	udiv	r6, ip, r8
 8000350:	fa1f fe87 	uxth.w	lr, r7
 8000354:	fb08 c116 	mls	r1, r8, r6, ip
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb06 f10e 	mul.w	r1, r6, lr
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18fb      	adds	r3, r7, r3
 8000366:	f106 30ff 	add.w	r0, r6, #4294967295
 800036a:	f080 8119 	bcs.w	80005a0 <__udivmoddi4+0x288>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8116 	bls.w	80005a0 <__udivmoddi4+0x288>
 8000374:	3e02      	subs	r6, #2
 8000376:	443b      	add	r3, r7
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fe0e 	mul.w	lr, r0, lr
 800038c:	45a6      	cmp	lr, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8105 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8102 	bls.w	80005a4 <__udivmoddi4+0x28c>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	2600      	movs	r6, #0
 80003ae:	b11d      	cbz	r5, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c5 4300 	strd	r4, r3, [r5]
 80003b8:	4631      	mov	r1, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	b902      	cbnz	r2, 80003c2 <__udivmoddi4+0xaa>
 80003c0:	deff      	udf	#255	; 0xff
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	2a00      	cmp	r2, #0
 80003c8:	d150      	bne.n	800046c <__udivmoddi4+0x154>
 80003ca:	1bcb      	subs	r3, r1, r7
 80003cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	2601      	movs	r6, #1
 80003d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003da:	0c21      	lsrs	r1, r4, #16
 80003dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb08 f30c 	mul.w	r3, r8, ip
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0xe4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0xe2>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	f200 80e9 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 80003fa:	4684      	mov	ip, r0
 80003fc:	1ac9      	subs	r1, r1, r3
 80003fe:	b2a3      	uxth	r3, r4
 8000400:	fbb1 f0fe 	udiv	r0, r1, lr
 8000404:	fb0e 1110 	mls	r1, lr, r0, r1
 8000408:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800040c:	fb08 f800 	mul.w	r8, r8, r0
 8000410:	45a0      	cmp	r8, r4
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x10c>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f100 33ff 	add.w	r3, r0, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x10a>
 800041c:	45a0      	cmp	r8, r4
 800041e:	f200 80d9 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 8000422:	4618      	mov	r0, r3
 8000424:	eba4 0408 	sub.w	r4, r4, r8
 8000428:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800042c:	e7bf      	b.n	80003ae <__udivmoddi4+0x96>
 800042e:	428b      	cmp	r3, r1
 8000430:	d909      	bls.n	8000446 <__udivmoddi4+0x12e>
 8000432:	2d00      	cmp	r5, #0
 8000434:	f000 80b1 	beq.w	800059a <__udivmoddi4+0x282>
 8000438:	2600      	movs	r6, #0
 800043a:	e9c5 0100 	strd	r0, r1, [r5]
 800043e:	4630      	mov	r0, r6
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	fab3 f683 	clz	r6, r3
 800044a:	2e00      	cmp	r6, #0
 800044c:	d14a      	bne.n	80004e4 <__udivmoddi4+0x1cc>
 800044e:	428b      	cmp	r3, r1
 8000450:	d302      	bcc.n	8000458 <__udivmoddi4+0x140>
 8000452:	4282      	cmp	r2, r0
 8000454:	f200 80b8 	bhi.w	80005c8 <__udivmoddi4+0x2b0>
 8000458:	1a84      	subs	r4, r0, r2
 800045a:	eb61 0103 	sbc.w	r1, r1, r3
 800045e:	2001      	movs	r0, #1
 8000460:	468c      	mov	ip, r1
 8000462:	2d00      	cmp	r5, #0
 8000464:	d0a8      	beq.n	80003b8 <__udivmoddi4+0xa0>
 8000466:	e9c5 4c00 	strd	r4, ip, [r5]
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0xa0>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f603 	lsr.w	r6, r0, r3
 8000474:	4097      	lsls	r7, r2
 8000476:	fa01 f002 	lsl.w	r0, r1, r2
 800047a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047e:	40d9      	lsrs	r1, r3
 8000480:	4330      	orrs	r0, r6
 8000482:	0c03      	lsrs	r3, r0, #16
 8000484:	fbb1 f6fe 	udiv	r6, r1, lr
 8000488:	fa1f f887 	uxth.w	r8, r7
 800048c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000490:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000494:	fb06 f108 	mul.w	r1, r6, r8
 8000498:	4299      	cmp	r1, r3
 800049a:	fa04 f402 	lsl.w	r4, r4, r2
 800049e:	d909      	bls.n	80004b4 <__udivmoddi4+0x19c>
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80004a6:	f080 808d 	bcs.w	80005c4 <__udivmoddi4+0x2ac>
 80004aa:	4299      	cmp	r1, r3
 80004ac:	f240 808a 	bls.w	80005c4 <__udivmoddi4+0x2ac>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	443b      	add	r3, r7
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b281      	uxth	r1, r0
 80004b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c4:	fb00 f308 	mul.w	r3, r0, r8
 80004c8:	428b      	cmp	r3, r1
 80004ca:	d907      	bls.n	80004dc <__udivmoddi4+0x1c4>
 80004cc:	1879      	adds	r1, r7, r1
 80004ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d2:	d273      	bcs.n	80005bc <__udivmoddi4+0x2a4>
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d971      	bls.n	80005bc <__udivmoddi4+0x2a4>
 80004d8:	3802      	subs	r0, #2
 80004da:	4439      	add	r1, r7
 80004dc:	1acb      	subs	r3, r1, r3
 80004de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e2:	e778      	b.n	80003d6 <__udivmoddi4+0xbe>
 80004e4:	f1c6 0c20 	rsb	ip, r6, #32
 80004e8:	fa03 f406 	lsl.w	r4, r3, r6
 80004ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f0:	431c      	orrs	r4, r3
 80004f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004f6:	fa01 f306 	lsl.w	r3, r1, r6
 80004fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000502:	431f      	orrs	r7, r3
 8000504:	0c3b      	lsrs	r3, r7, #16
 8000506:	fbb1 f9fe 	udiv	r9, r1, lr
 800050a:	fa1f f884 	uxth.w	r8, r4
 800050e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000512:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000516:	fb09 fa08 	mul.w	sl, r9, r8
 800051a:	458a      	cmp	sl, r1
 800051c:	fa02 f206 	lsl.w	r2, r2, r6
 8000520:	fa00 f306 	lsl.w	r3, r0, r6
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x220>
 8000526:	1861      	adds	r1, r4, r1
 8000528:	f109 30ff 	add.w	r0, r9, #4294967295
 800052c:	d248      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 800052e:	458a      	cmp	sl, r1
 8000530:	d946      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000532:	f1a9 0902 	sub.w	r9, r9, #2
 8000536:	4421      	add	r1, r4
 8000538:	eba1 010a 	sub.w	r1, r1, sl
 800053c:	b2bf      	uxth	r7, r7
 800053e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000542:	fb0e 1110 	mls	r1, lr, r0, r1
 8000546:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054a:	fb00 f808 	mul.w	r8, r0, r8
 800054e:	45b8      	cmp	r8, r7
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x24a>
 8000552:	19e7      	adds	r7, r4, r7
 8000554:	f100 31ff 	add.w	r1, r0, #4294967295
 8000558:	d22e      	bcs.n	80005b8 <__udivmoddi4+0x2a0>
 800055a:	45b8      	cmp	r8, r7
 800055c:	d92c      	bls.n	80005b8 <__udivmoddi4+0x2a0>
 800055e:	3802      	subs	r0, #2
 8000560:	4427      	add	r7, r4
 8000562:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000566:	eba7 0708 	sub.w	r7, r7, r8
 800056a:	fba0 8902 	umull	r8, r9, r0, r2
 800056e:	454f      	cmp	r7, r9
 8000570:	46c6      	mov	lr, r8
 8000572:	4649      	mov	r1, r9
 8000574:	d31a      	bcc.n	80005ac <__udivmoddi4+0x294>
 8000576:	d017      	beq.n	80005a8 <__udivmoddi4+0x290>
 8000578:	b15d      	cbz	r5, 8000592 <__udivmoddi4+0x27a>
 800057a:	ebb3 020e 	subs.w	r2, r3, lr
 800057e:	eb67 0701 	sbc.w	r7, r7, r1
 8000582:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000586:	40f2      	lsrs	r2, r6
 8000588:	ea4c 0202 	orr.w	r2, ip, r2
 800058c:	40f7      	lsrs	r7, r6
 800058e:	e9c5 2700 	strd	r2, r7, [r5]
 8000592:	2600      	movs	r6, #0
 8000594:	4631      	mov	r1, r6
 8000596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e70b      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e9      	b.n	8000378 <__udivmoddi4+0x60>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6fd      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005a8:	4543      	cmp	r3, r8
 80005aa:	d2e5      	bcs.n	8000578 <__udivmoddi4+0x260>
 80005ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b0:	eb69 0104 	sbc.w	r1, r9, r4
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7df      	b.n	8000578 <__udivmoddi4+0x260>
 80005b8:	4608      	mov	r0, r1
 80005ba:	e7d2      	b.n	8000562 <__udivmoddi4+0x24a>
 80005bc:	4660      	mov	r0, ip
 80005be:	e78d      	b.n	80004dc <__udivmoddi4+0x1c4>
 80005c0:	4681      	mov	r9, r0
 80005c2:	e7b9      	b.n	8000538 <__udivmoddi4+0x220>
 80005c4:	4666      	mov	r6, ip
 80005c6:	e775      	b.n	80004b4 <__udivmoddi4+0x19c>
 80005c8:	4630      	mov	r0, r6
 80005ca:	e74a      	b.n	8000462 <__udivmoddi4+0x14a>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	4439      	add	r1, r7
 80005d2:	e713      	b.n	80003fc <__udivmoddi4+0xe4>
 80005d4:	3802      	subs	r0, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e724      	b.n	8000424 <__udivmoddi4+0x10c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <STM32CAN_Initialise>:
 * @param iNumberOfTransmitFramesInFIFO: tUINT32: The number of received 8 byte frames in the transmit
 * FIFO
 * @re-entrant: 
 */
teFUNC_STATUS STM32CAN_Initialise(teSTM32CAN_PERIPHERAL tePeripheral, tUINT32* pBufferMemory, teSTM32CAN_BAUD_RATE teBaudRate, tUINT32 iInputClockSpeed, tUINT32 iNumberOf29bitFilters, tUINT32 iNumberOfReceiveFramesInFIFO, tUINT32 iNumberOfTransmitFramesInFIFO)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71fb      	strb	r3, [r7, #7]
	tsSTM32CAN_Registers* ptsCANRegisters = (tsSTM32CAN_Registers*)tePeripheral;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	617b      	str	r3, [r7, #20]
	tUINT32* pInitialBufferMemory = pBufferMemory;
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	613b      	str	r3, [r7, #16]

	// Throw an exception if the requested peripheral isn't valid.
	EH_ASSERT(tePeripheral == CAN_PERIPHERAL_FDCAN1 || tePeripheral == CAN_PERIPHERAL_FDCAN2, STM32CAN_BAD_ARGS, "CAN Init Fail, Invalid CAN peripheral selected.");
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a5d      	ldr	r2, [pc, #372]	; (8000770 <STM32CAN_Initialise+0x190>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d00a      	beq.n	8000616 <STM32CAN_Initialise+0x36>
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a5c      	ldr	r2, [pc, #368]	; (8000774 <STM32CAN_Initialise+0x194>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d006      	beq.n	8000616 <STM32CAN_Initialise+0x36>
 8000608:	4a5b      	ldr	r2, [pc, #364]	; (8000778 <STM32CAN_Initialise+0x198>)
 800060a:	f240 1107 	movw	r1, #263	; 0x107
 800060e:	485b      	ldr	r0, [pc, #364]	; (800077c <STM32CAN_Initialise+0x19c>)
 8000610:	f000 fb0e 	bl	8000c30 <EH_Exception>
 8000614:	e0a7      	b.n	8000766 <STM32CAN_Initialise+0x186>
	// Throw an exception if the requested number of 29 bit filters exceeds the maximum.
	EH_ASSERT(iNumberOf29bitFilters <= STM32CAN_MAX_EXTENDED_FILTERS, STM32CAN_BAD_ARGS, "CAN Init Fail, requested filters exceeds maximum of 64.");
 8000616:	6a3b      	ldr	r3, [r7, #32]
 8000618:	2b40      	cmp	r3, #64	; 0x40
 800061a:	d906      	bls.n	800062a <STM32CAN_Initialise+0x4a>
 800061c:	4a58      	ldr	r2, [pc, #352]	; (8000780 <STM32CAN_Initialise+0x1a0>)
 800061e:	f240 1109 	movw	r1, #265	; 0x109
 8000622:	4856      	ldr	r0, [pc, #344]	; (800077c <STM32CAN_Initialise+0x19c>)
 8000624:	f000 fb04 	bl	8000c30 <EH_Exception>
 8000628:	e09d      	b.n	8000766 <STM32CAN_Initialise+0x186>
	// Throw an exception if the requested number of receive frames in the RX FIFO exceeds the maximum.
	EH_ASSERT(iNumberOfReceiveFramesInFIFO <= STM32CAN_MAX_FRAMES_IN_RX_FIFO, STM32CAN_BAD_ARGS, "CAN Init Fail, requested RX FIFO elements exceeds maximum of 64");
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	2b40      	cmp	r3, #64	; 0x40
 800062e:	d906      	bls.n	800063e <STM32CAN_Initialise+0x5e>
 8000630:	4a54      	ldr	r2, [pc, #336]	; (8000784 <STM32CAN_Initialise+0x1a4>)
 8000632:	f240 110b 	movw	r1, #267	; 0x10b
 8000636:	4851      	ldr	r0, [pc, #324]	; (800077c <STM32CAN_Initialise+0x19c>)
 8000638:	f000 fafa 	bl	8000c30 <EH_Exception>
 800063c:	e093      	b.n	8000766 <STM32CAN_Initialise+0x186>
	// Throw an exception if the requested number of transmit frames in the TX FIFO exceeds the maximum.
	EH_ASSERT(iNumberOfTransmitFramesInFIFO <= STM32CAN_MAX_FRAMES_IN_TX_FIFO, STM32CAN_BAD_ARGS, "CAN Init Fail, requested TX FIFO elements exceeds maximum of 32.");
 800063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000640:	2b20      	cmp	r3, #32
 8000642:	d906      	bls.n	8000652 <STM32CAN_Initialise+0x72>
 8000644:	4a50      	ldr	r2, [pc, #320]	; (8000788 <STM32CAN_Initialise+0x1a8>)
 8000646:	f240 110d 	movw	r1, #269	; 0x10d
 800064a:	484c      	ldr	r0, [pc, #304]	; (800077c <STM32CAN_Initialise+0x19c>)
 800064c:	f000 faf0 	bl	8000c30 <EH_Exception>
 8000650:	e089      	b.n	8000766 <STM32CAN_Initialise+0x186>

	// Work out the size of the TX FIFO section by using the max number of TX FIFO elements requested.
	pBufferMemory += (iNumberOf29bitFilters * STM32CAN_EXTENDED_FILTER_SIZE_BYTES) +
 8000652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000656:	4413      	add	r3, r2
 8000658:	005a      	lsls	r2, r3, #1
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	4413      	add	r3, r2
 800065e:	015b      	lsls	r3, r3, #5
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	4413      	add	r3, r2
 8000664:	60bb      	str	r3, [r7, #8]
			(iNumberOfReceiveFramesInFIFO * STM32CAN_RX_FIFO_ELEMENT_SIZE_BYTES) +
			(iNumberOfTransmitFramesInFIFO * STM32CAN_TX_FIFO_ELEMENT_SIZE_BYTES);
	// If we've exceeded the max space in message RAM, throw an exception.
	EH_ASSERT((tUINT32)(pBufferMemory - pInitialBufferMemory) <= (tUINT32)STM32CAN_MESSAGE_RAM_MAX_SIZE_BYTES, STM32CAN_BAD_ARGS, "CAN Init Fail, Exceeded Max Space In Message RAM");
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	109b      	asrs	r3, r3, #2
 800066e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8000672:	d906      	bls.n	8000682 <STM32CAN_Initialise+0xa2>
 8000674:	4a45      	ldr	r2, [pc, #276]	; (800078c <STM32CAN_Initialise+0x1ac>)
 8000676:	f44f 718a 	mov.w	r1, #276	; 0x114
 800067a:	4840      	ldr	r0, [pc, #256]	; (800077c <STM32CAN_Initialise+0x19c>)
 800067c:	f000 fad8 	bl	8000c30 <EH_Exception>
 8000680:	e071      	b.n	8000766 <STM32CAN_Initialise+0x186>

	// Throw an exception if the CAN is already connected to the bus. Make a call to STM32CAN_Disconnect() first.
	EH_ASSERT((ptsCANRegisters->FDCAN_CCCR & 0x1UL) == 0x1UL, STM32CAN_CONNECTED, "CAN Init Fail, Still Connected To The Bus.");
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d108      	bne.n	80006a0 <STM32CAN_Initialise+0xc0>
 800068e:	4a40      	ldr	r2, [pc, #256]	; (8000790 <STM32CAN_Initialise+0x1b0>)
 8000690:	f240 1117 	movw	r1, #279	; 0x117
 8000694:	4839      	ldr	r0, [pc, #228]	; (800077c <STM32CAN_Initialise+0x19c>)
 8000696:	f000 facb 	bl	8000c30 <EH_Exception>
 800069a:	bf00      	nop
	return BT_SUCCESS;

STM32CAN_BAD_ARGS:
	return BT_FAIL;
STM32CAN_CONNECTED:
	return BT_FAIL;
 800069c:	2300      	movs	r3, #0
 800069e:	e063      	b.n	8000768 <STM32CAN_Initialise+0x188>
	ptsCANRegisters->FDCAN_CCCR |= 0x2UL;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f043 0202 	orr.w	r2, r3, #2
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	619a      	str	r2, [r3, #24]
	ptsCANRegisters->FDCAN_TTOCF &= ~0x3UL;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80006b2:	f023 0203 	bic.w	r2, r3, #3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	ptsCANRegisters->FDCAN_GFC = 0x3FUL;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	223f      	movs	r2, #63	; 0x3f
 80006c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	ptsCANRegisters->FDCAN_NBTP = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
	ptsCANRegisters->FDCAN_NBTP |= (1 - 1) << 25; // SJW
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	69da      	ldr	r2, [r3, #28]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	61da      	str	r2, [r3, #28]
	ptsCANRegisters->FDCAN_NBTP |= (5 - 1) << 16; // Prescaler
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	61da      	str	r2, [r3, #28]
	ptsCANRegisters->FDCAN_NBTP |= (7 - 1) << 8; // TSEG1
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f443 62c0 	orr.w	r2, r3, #1536	; 0x600
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	61da      	str	r2, [r3, #28]
	ptsCANRegisters->FDCAN_NBTP |= (2 - 1); // TSEG2
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f043 0201 	orr.w	r2, r3, #1
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	61da      	str	r2, [r3, #28]
	pBufferMemory = pInitialBufferMemory;
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	60bb      	str	r3, [r7, #8]
	ptsCANRegisters->FDCAN_XIDFC = ((tUINT32)pBufferMemory - STM32CAN_MESSAGE_RAM_ADDRESS) & 0xFFFCUL;
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <STM32CAN_Initialise+0x1b4>)
 80006fe:	441a      	add	r2, r3
 8000700:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000704:	4013      	ands	r3, r2
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	pBufferMemory += (iNumberOf29bitFilters * STM32CAN_EXTENDED_FILTER_SIZE_BYTES);
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	015b      	lsls	r3, r3, #5
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	4413      	add	r3, r2
 8000714:	60bb      	str	r3, [r7, #8]
	ptsCANRegisters->FDCAN_RXF0C = (((((tUINT32)pBufferMemory - STM32CAN_MESSAGE_RAM_ADDRESS) | (iNumberOfReceiveFramesInFIFO << 16UL))) & 0x7FFFFCUL);
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <STM32CAN_Initialise+0x1b4>)
 800071a:	4413      	add	r3, r2
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	0412      	lsls	r2, r2, #16
 8000720:	431a      	orrs	r2, r3
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <STM32CAN_Initialise+0x1b8>)
 8000724:	4013      	ands	r3, r2
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	pBufferMemory += (iNumberOfReceiveFramesInFIFO * STM32CAN_RX_FIFO_ELEMENT_SIZE_BYTES);
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	019b      	lsls	r3, r3, #6
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4413      	add	r3, r2
 8000734:	60bb      	str	r3, [r7, #8]
	ptsCANRegisters->FDCAN_TXBC = (((((tUINT32)pBufferMemory - STM32CAN_MESSAGE_RAM_ADDRESS) | (iNumberOfTransmitFramesInFIFO << 24UL))) & 0x3F00FFFCUL);
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <STM32CAN_Initialise+0x1b4>)
 800073a:	4413      	add	r3, r2
 800073c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800073e:	0612      	lsls	r2, r2, #24
 8000740:	431a      	orrs	r2, r3
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <STM32CAN_Initialise+0x1bc>)
 8000744:	4013      	ands	r3, r2
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	ptsCANRegisters->FDCAN_ILE = 0x2UL;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2202      	movs	r2, #2
 8000750:	65da      	str	r2, [r3, #92]	; 0x5c
	ptsCANRegisters->FDCAN_ILS = 0x2800000UL;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 8000758:	659a      	str	r2, [r3, #88]	; 0x58
	ptsCANRegisters->FDCAN_IE = 0x2800000UL;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	f04f 7220 	mov.w	r2, #41943040	; 0x2800000
 8000760:	655a      	str	r2, [r3, #84]	; 0x54
	return BT_SUCCESS;
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <STM32CAN_Initialise+0x188>
	return BT_FAIL;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3718      	adds	r7, #24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	4000a000 	.word	0x4000a000
 8000774:	4000a400 	.word	0x4000a400
 8000778:	0800729c 	.word	0x0800729c
 800077c:	080072cc 	.word	0x080072cc
 8000780:	080072f8 	.word	0x080072f8
 8000784:	08007330 	.word	0x08007330
 8000788:	08007370 	.word	0x08007370
 800078c:	080073b4 	.word	0x080073b4
 8000790:	080073e8 	.word	0x080073e8
 8000794:	bfff5400 	.word	0xbfff5400
 8000798:	007ffffc 	.word	0x007ffffc
 800079c:	3f00fffc 	.word	0x3f00fffc

080007a0 <STM32CAN_Transmit>:
 * @param atsCanFrame[]: tsSTM32CAN_Frame: The CAN frames for transmission.
 * @param iNumberOfFrames: tUINT32: The number of CAN frames to transmit.
 * @re-entrant: 
 */
teFUNC_STATUS STM32CAN_Transmit(teSTM32CAN_PERIPHERAL tePeripheral, tsSTM32CAN_Frame atsCanFrame[], tUINT32 iNumberOfFrames)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	tsSTM32CAN_Registers* ptsCANRegisters = (tsSTM32CAN_Registers*)tePeripheral;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	61fb      	str	r3, [r7, #28]
	tsSTM32CAN_TXFifoElement* ptsNewTxElement = {0};
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
	tUINT32 iNewElementAddressOffset = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
	tUINT32 iNewElementNumber = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
	tUINT32 iFrameCounter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    tUINT32 iDataByteCounter = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    tUINT32 iLowerFourBytes = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
    tUINT32 iUpperFourBytes = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]

	// Throw an exception if the requested peripheral isn't valid.
	EH_ASSERT(tePeripheral == CAN_PERIPHERAL_FDCAN1 || tePeripheral == CAN_PERIPHERAL_FDCAN2, STM32CAN_BAD_ARGS, "CAN Transmit Fail, Invalid CAN peripheral selected.");
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4a6b      	ldr	r2, [pc, #428]	; (800097c <STM32CAN_Transmit+0x1dc>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d00c      	beq.n	80007ee <STM32CAN_Transmit+0x4e>
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4a6a      	ldr	r2, [pc, #424]	; (8000980 <STM32CAN_Transmit+0x1e0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d008      	beq.n	80007ee <STM32CAN_Transmit+0x4e>
 80007dc:	4a69      	ldr	r2, [pc, #420]	; (8000984 <STM32CAN_Transmit+0x1e4>)
 80007de:	f240 1169 	movw	r1, #361	; 0x169
 80007e2:	4869      	ldr	r0, [pc, #420]	; (8000988 <STM32CAN_Transmit+0x1e8>)
 80007e4:	f000 fa24 	bl	8000c30 <EH_Exception>
 80007e8:	bf00      	nop
	}

	return BT_SUCCESS;

STM32CAN_BAD_ARGS:
	return BT_FAIL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e0c1      	b.n	8000972 <STM32CAN_Transmit+0x1d2>
	for (iFrameCounter = 0; iFrameCounter < iNumberOfFrames; iFrameCounter++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007f2:	e0b8      	b.n	8000966 <STM32CAN_Transmit+0x1c6>
		EH_ASSERT((ptsCANRegisters->FDCAN_TXFQS & 0x200000UL) != 0x200000UL, STM32CAN_TX_FIFO_FULL, "CAN Transmit Fail, TX FIFO is Full.");
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d008      	beq.n	8000814 <STM32CAN_Transmit+0x74>
 8000802:	4a62      	ldr	r2, [pc, #392]	; (800098c <STM32CAN_Transmit+0x1ec>)
 8000804:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8000808:	485f      	ldr	r0, [pc, #380]	; (8000988 <STM32CAN_Transmit+0x1e8>)
 800080a:	f000 fa11 	bl	8000c30 <EH_Exception>
 800080e:	bf00      	nop
STM32CAN_TX_FIFO_FULL:
	return BT_FAIL;
 8000810:	2300      	movs	r3, #0
 8000812:	e0ae      	b.n	8000972 <STM32CAN_Transmit+0x1d2>
		iNewElementAddressOffset = STM32CAN_MESSAGE_RAM_ADDRESS + (ptsCANRegisters->FDCAN_TXBC & 0xFFFCUL);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800081a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800081e:	401a      	ands	r2, r3
 8000820:	4b5b      	ldr	r3, [pc, #364]	; (8000990 <STM32CAN_Transmit+0x1f0>)
 8000822:	4413      	add	r3, r2
 8000824:	617b      	str	r3, [r7, #20]
		iNewElementNumber = ((ptsCANRegisters->FDCAN_TXFQS >> 16) & 0x1FUL);
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	613b      	str	r3, [r7, #16]
		ptsNewTxElement = (tsSTM32CAN_TXFifoElement*)(iNewElementAddressOffset + (iNewElementNumber * STM32CAN_TX_FIFO_ELEMENT_SIZE_BYTES));
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	011a      	lsls	r2, r3, #4
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4413      	add	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
	    ptsNewTxElement->iESI = 0;
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	78d3      	ldrb	r3, [r2, #3]
 8000842:	f36f 13c7 	bfc	r3, #7, #1
 8000846:	70d3      	strb	r3, [r2, #3]
	    ptsNewTxElement->iXTD = 1; // Configure identifier to extended 29 bit format.
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	78d3      	ldrb	r3, [r2, #3]
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	70d3      	strb	r3, [r2, #3]
	    ptsNewTxElement->iRTR = 0; // Set to transmit a data frame.
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	78d3      	ldrb	r3, [r2, #3]
 8000856:	f36f 1345 	bfc	r3, #5, #1
 800085a:	70d3      	strb	r3, [r2, #3]
	    ptsNewTxElement->iID = atsCanFrame[iFrameCounter].iIdentifier & 0x1FFFFFFFUL; // Set the identifier.
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f361 031c 	bfi	r3, r1, #0, #29
 8000872:	6013      	str	r3, [r2, #0]
	    ptsNewTxElement->iMM = 0;
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	2200      	movs	r2, #0
 8000878:	71da      	strb	r2, [r3, #7]
	    ptsNewTxElement->iEFC = 0; // Do not store TX events.
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	7993      	ldrb	r3, [r2, #6]
 800087e:	f36f 13c7 	bfc	r3, #7, #1
 8000882:	7193      	strb	r3, [r2, #6]
	    ptsNewTxElement->iFDF = 0; // Configure for classic CAN format.
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	7993      	ldrb	r3, [r2, #6]
 8000888:	f36f 1345 	bfc	r3, #5, #1
 800088c:	7193      	strb	r3, [r2, #6]
	    ptsNewTxElement->iBPS = 0; // No bitrate switching.
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	7993      	ldrb	r3, [r2, #6]
 8000892:	f36f 1304 	bfc	r3, #4, #1
 8000896:	7193      	strb	r3, [r2, #6]
	    ptsNewTxElement->iDLC = atsCanFrame[iFrameCounter].iDataLength & 0xFUL; // Set the data length code.
 8000898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	4413      	add	r3, r2
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	b2d9      	uxtb	r1, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	7993      	ldrb	r3, [r2, #6]
 80008ac:	f361 0303 	bfi	r3, r1, #0, #4
 80008b0:	7193      	strb	r3, [r2, #6]
	    for (iDataByteCounter = 0; iDataByteCounter < atsCanFrame[iFrameCounter].iDataLength || iDataByteCounter < 4; iDataByteCounter++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008b6:	e012      	b.n	80008de <STM32CAN_Transmit+0x13e>
	    	iLowerFourBytes |= ((tUINT32)atsCanFrame[iFrameCounter].aData[iDataByteCounter]) << (8 * iDataByteCounter);
 80008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	441a      	add	r2, r3
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	4413      	add	r3, r2
 80008c4:	3308      	adds	r3, #8
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008d4:	4313      	orrs	r3, r2
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
	    for (iDataByteCounter = 0; iDataByteCounter < atsCanFrame[iFrameCounter].iDataLength || iDataByteCounter < 4; iDataByteCounter++)
 80008d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008da:	3301      	adds	r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3e4      	bcc.n	80008b8 <STM32CAN_Transmit+0x118>
 80008ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d9e1      	bls.n	80008b8 <STM32CAN_Transmit+0x118>
        *(tUINT32*)ptsNewTxElement->aDataBytes = iLowerFourBytes;
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	3308      	adds	r3, #8
 80008f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fa:	601a      	str	r2, [r3, #0]
	    for (iDataByteCounter = 4; iDataByteCounter < atsCanFrame[iFrameCounter].iDataLength || iDataByteCounter < 8; iDataByteCounter++)
 80008fc:	2304      	movs	r3, #4
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000900:	e013      	b.n	800092a <STM32CAN_Transmit+0x18a>
	    	iUpperFourBytes |= ((tUINT32)atsCanFrame[iFrameCounter].aData[iDataByteCounter]) << (8 * (iDataByteCounter - 4));
 8000902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	441a      	add	r2, r3
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	4413      	add	r3, r2
 800090e:	3308      	adds	r3, #8
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	3b04      	subs	r3, #4
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	6a3a      	ldr	r2, [r7, #32]
 8000920:	4313      	orrs	r3, r2
 8000922:	623b      	str	r3, [r7, #32]
	    for (iDataByteCounter = 4; iDataByteCounter < atsCanFrame[iFrameCounter].iDataLength || iDataByteCounter < 8; iDataByteCounter++)
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	3301      	adds	r3, #1
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	4413      	add	r3, r2
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000936:	429a      	cmp	r2, r3
 8000938:	d3e3      	bcc.n	8000902 <STM32CAN_Transmit+0x162>
 800093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093c:	2b07      	cmp	r3, #7
 800093e:	d9e0      	bls.n	8000902 <STM32CAN_Transmit+0x162>
        *(tUINT32*)(ptsNewTxElement->aDataBytes + 4) = iUpperFourBytes;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	3308      	adds	r3, #8
 8000944:	3304      	adds	r3, #4
 8000946:	6a3a      	ldr	r2, [r7, #32]
 8000948:	601a      	str	r2, [r3, #0]
		ptsCANRegisters->FDCAN_TXBAR |= (0x1UL << iNewElementNumber);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8000950:	2101      	movs	r1, #1
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	431a      	orrs	r2, r3
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	for (iFrameCounter = 0; iFrameCounter < iNumberOfFrames; iFrameCounter++)
 8000960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000962:	3301      	adds	r3, #1
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	f4ff af42 	bcc.w	80007f4 <STM32CAN_Transmit+0x54>
	return BT_SUCCESS;
 8000970:	2301      	movs	r3, #1
}
 8000972:	4618      	mov	r0, r3
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	4000a000 	.word	0x4000a000
 8000980:	4000a400 	.word	0x4000a400
 8000984:	08007414 	.word	0x08007414
 8000988:	080072cc 	.word	0x080072cc
 800098c:	08007448 	.word	0x08007448
 8000990:	4000ac00 	.word	0x4000ac00

08000994 <STM32CAN_Receive>:
 * @param piMaxNumberOFElementsInFIFO: tUINT32*: The maximum number of elements in the buffer.
 * Returned to the calling function.
 * @re-entrant: True
 */
teFUNC_STATUS STM32CAN_Receive(teSTM32CAN_PERIPHERAL tePeripheral, tUINT32* pStartAddressOfRxFIFO, tUINT32* piIndexOfFirst, tUINT32* piNumberOFElementsToRead, tUINT32* piMaxNumberOFElementsInFIFO)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	603b      	str	r3, [r7, #0]
	tsSTM32CAN_Registers* ptsCANRegisters = (tsSTM32CAN_Registers*)tePeripheral;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	61bb      	str	r3, [r7, #24]
	tUINT32 iPutIndex = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
	tUINT32 iPeripheralIndex = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]

	// Throw an exception if the requested peripheral isn't valid.
	EH_ASSERT(tePeripheral == CAN_PERIPHERAL_FDCAN1 || tePeripheral == CAN_PERIPHERAL_FDCAN2, STM32CAN_BAD_ARGS, "CAN Init Fail, Invalid CAN peripheral selected.");
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <STM32CAN_Receive+0xcc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d00c      	beq.n	80009d0 <STM32CAN_Receive+0x3c>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <STM32CAN_Receive+0xd0>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d008      	beq.n	80009d0 <STM32CAN_Receive+0x3c>
 80009be:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <STM32CAN_Receive+0xd4>)
 80009c0:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80009c4:	4829      	ldr	r0, [pc, #164]	; (8000a6c <STM32CAN_Receive+0xd8>)
 80009c6:	f000 f933 	bl	8000c30 <EH_Exception>
 80009ca:	bf00      	nop
	}

	return BT_SUCCESS;

STM32CAN_BAD_ARGS:
	return BT_FAIL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e042      	b.n	8000a56 <STM32CAN_Receive+0xc2>
	if (tePeripheral == CAN_PERIPHERAL_FDCAN2)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <STM32CAN_Receive+0xd0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d102      	bne.n	80009de <STM32CAN_Receive+0x4a>
		iPeripheralIndex = 1;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
 80009dc:	e001      	b.n	80009e2 <STM32CAN_Receive+0x4e>
		iPeripheralIndex = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
	*piIndexOfFirst = (ptsCANRegisters->FDCAN_RXF0S >> 8) & 0x3FUL;
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
	*pStartAddressOfRxFIFO = STM32CAN_MESSAGE_RAM_ADDRESS + (ptsCANRegisters->FDCAN_RXF0C & 0xFFFCUL);
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80009f8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80009fc:	401a      	ands	r2, r3
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <STM32CAN_Receive+0xdc>)
 8000a00:	4413      	add	r3, r2
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	6013      	str	r3, [r2, #0]
	iPutIndex = (ptsCANRegisters->FDCAN_RXF0S >> 16) & 0x3FUL;
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a0c:	0c1b      	lsrs	r3, r3, #16
 8000a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a12:	617b      	str	r3, [r7, #20]
	*piNumberOFElementsToRead = ptsCANRegisters->FDCAN_RXF0S & 0x7FUL;
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	601a      	str	r2, [r3, #0]
	*piMaxNumberOFElementsInFIFO = (ptsCANRegisters->FDCAN_RXF0C >> 16) & 0x7FUL;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000a28:	0c1b      	lsrs	r3, r3, #16
 8000a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a30:	601a      	str	r2, [r3, #0]
	if (iPutIndex == 0)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <STM32CAN_Receive+0xb4>
		aiSTM32CAN_LastElementReadIndex[iPeripheralIndex] = *piMaxNumberOFElementsInFIFO - 1;
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <STM32CAN_Receive+0xe0>)
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a46:	e005      	b.n	8000a54 <STM32CAN_Receive+0xc0>
		aiSTM32CAN_LastElementReadIndex[iPeripheralIndex] = iPutIndex - 1;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	1e5a      	subs	r2, r3, #1
 8000a4c:	4909      	ldr	r1, [pc, #36]	; (8000a74 <STM32CAN_Receive+0xe0>)
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return BT_SUCCESS;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	4000a000 	.word	0x4000a000
 8000a64:	4000a400 	.word	0x4000a400
 8000a68:	0800729c 	.word	0x0800729c
 8000a6c:	080072cc 	.word	0x080072cc
 8000a70:	4000ac00 	.word	0x4000ac00
 8000a74:	24000620 	.word	0x24000620

08000a78 <STM32CAN_Flush>:
 * @return BT_SUCCESS always.
 * @param tePeripheral: teSTM32CAN_PERIPHERAL: The physical CAN bus to flush.
 * @re-entrant: True
 */
teFUNC_STATUS STM32CAN_Flush(teSTM32CAN_PERIPHERAL tePeripheral)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	tsSTM32CAN_Registers* ptsCANRegisters = (tsSTM32CAN_Registers*)tePeripheral;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	60bb      	str	r3, [r7, #8]
	tUINT32 iPeripheralIndex = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]

	// Throw an exception if the requested peripheral isn't valid.
	EH_ASSERT(tePeripheral == CAN_PERIPHERAL_FDCAN1 || tePeripheral == CAN_PERIPHERAL_FDCAN2, STM32CAN_BAD_ARGS, "CAN Init Fail, Invalid CAN peripheral selected.");
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <STM32CAN_Flush+0x5c>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00c      	beq.n	8000aaa <STM32CAN_Flush+0x32>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <STM32CAN_Flush+0x60>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d008      	beq.n	8000aaa <STM32CAN_Flush+0x32>
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <STM32CAN_Flush+0x64>)
 8000a9a:	f240 11eb 	movw	r1, #491	; 0x1eb
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <STM32CAN_Flush+0x68>)
 8000aa0:	f000 f8c6 	bl	8000c30 <EH_Exception>
 8000aa4:	bf00      	nop
	ptsCANRegisters->FDCAN_RXF0A = aiSTM32CAN_LastElementReadIndex[iPeripheralIndex];

	return BT_SUCCESS;

STM32CAN_BAD_ARGS:
	return BT_FAIL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e010      	b.n	8000acc <STM32CAN_Flush+0x54>
	if (tePeripheral == CAN_PERIPHERAL_FDCAN2)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <STM32CAN_Flush+0x60>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d102      	bne.n	8000ab8 <STM32CAN_Flush+0x40>
		iPeripheralIndex = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	e001      	b.n	8000abc <STM32CAN_Flush+0x44>
		iPeripheralIndex = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
	ptsCANRegisters->FDCAN_RXF0A = aiSTM32CAN_LastElementReadIndex[iPeripheralIndex];
 8000abc:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <STM32CAN_Flush+0x6c>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	return BT_SUCCESS;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	4000a000 	.word	0x4000a000
 8000ad8:	4000a400 	.word	0x4000a400
 8000adc:	0800729c 	.word	0x0800729c
 8000ae0:	080072cc 	.word	0x080072cc
 8000ae4:	24000620 	.word	0x24000620

08000ae8 <STM32CAN_Connect>:
 * @throws STM32CAN_BAD_ARGS if any arguments are invalid.
 * @param tePeripheral: teSTM32CAN_PERIPHERAL: The physical CAN bus to connect.
 * @re-entrant: 
 */
teFUNC_STATUS STM32CAN_Connect(teSTM32CAN_PERIPHERAL tePeripheral)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	// Throw an exception if the requested peripheral isn't valid.
	EH_ASSERT(tePeripheral == CAN_PERIPHERAL_FDCAN1 || tePeripheral == CAN_PERIPHERAL_FDCAN2, STM32CAN_BAD_ARGS, "CAN Init Fail, Invalid CAN peripheral selected.");
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <STM32CAN_Connect+0x64>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00c      	beq.n	8000b12 <STM32CAN_Connect+0x2a>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <STM32CAN_Connect+0x68>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d008      	beq.n	8000b12 <STM32CAN_Connect+0x2a>
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <STM32CAN_Connect+0x6c>)
 8000b02:	f44f 714a 	mov.w	r1, #808	; 0x328
 8000b06:	4814      	ldr	r0, [pc, #80]	; (8000b58 <STM32CAN_Connect+0x70>)
 8000b08:	f000 f892 	bl	8000c30 <EH_Exception>
 8000b0c:	bf00      	nop
	// The node will now be live on the bus. CCE bit is automatically cleared if set.

	return BT_SUCCESS;

STM32CAN_BAD_ARGS:
	return BT_FAIL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e017      	b.n	8000b42 <STM32CAN_Connect+0x5a>
	tsSTM32CAN_Registers* ptsCANRegisters = (tsSTM32CAN_Registers*)tePeripheral;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]
	EH_ASSERT((ptsCANRegisters->FDCAN_CCCR & 0x1UL) == 0x1UL, STM32CAN_CONNECTED, "CAN Connect Fail, Already Connected To The Bus.");
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d108      	bne.n	8000b34 <STM32CAN_Connect+0x4c>
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <STM32CAN_Connect+0x74>)
 8000b24:	f240 312d 	movw	r1, #813	; 0x32d
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <STM32CAN_Connect+0x70>)
 8000b2a:	f000 f881 	bl	8000c30 <EH_Exception>
 8000b2e:	bf00      	nop
STM32CAN_CONNECTED:
	return BT_FAIL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e006      	b.n	8000b42 <STM32CAN_Connect+0x5a>
	ptsCANRegisters->FDCAN_CCCR &= ~0x1UL;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f023 0201 	bic.w	r2, r3, #1
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	619a      	str	r2, [r3, #24]
	return BT_SUCCESS;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	4000a000 	.word	0x4000a000
 8000b50:	4000a400 	.word	0x4000a400
 8000b54:	0800729c 	.word	0x0800729c
 8000b58:	080072cc 	.word	0x080072cc
 8000b5c:	080076d8 	.word	0x080076d8

08000b60 <STM32CAN_RegisterCallbacks>:
 * @param pTransmitCallback(): tFUNC_PTR: A pointer to the function that is called in the event of a
 * frame transmission.
 * @re-entrant: 
 */
teFUNC_STATUS STM32CAN_RegisterCallbacks(teSTM32CAN_PERIPHERAL tePeripheral, tFUNC_PTR pReceiveCallback, tFUNC_PTR pTransmitCallback)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
	tsSTM32CAN_Registers* ptsCANRegisters = (tsSTM32CAN_Registers*)tePeripheral;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
	tUINT32 iPeripheralIndex = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

	// Throw an exception if the requested peripheral isn't valid.
	EH_ASSERT(tePeripheral == CAN_PERIPHERAL_FDCAN1 || tePeripheral == CAN_PERIPHERAL_FDCAN2, STM32CAN_BAD_ARGS, "CAN Init Fail, Invalid CAN peripheral selected.");
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <STM32CAN_RegisterCallbacks+0xbc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d00c      	beq.n	8000b96 <STM32CAN_RegisterCallbacks+0x36>
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <STM32CAN_RegisterCallbacks+0xc0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d008      	beq.n	8000b96 <STM32CAN_RegisterCallbacks+0x36>
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <STM32CAN_RegisterCallbacks+0xc4>)
 8000b86:	f240 314b 	movw	r1, #843	; 0x34b
 8000b8a:	4827      	ldr	r0, [pc, #156]	; (8000c28 <STM32CAN_RegisterCallbacks+0xc8>)
 8000b8c:	f000 f850 	bl	8000c30 <EH_Exception>
 8000b90:	bf00      	nop
	}

	return BT_SUCCESS;

STM32CAN_BAD_ARGS:
	return BT_FAIL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e03e      	b.n	8000c14 <STM32CAN_RegisterCallbacks+0xb4>
	if (tePeripheral == CAN_PERIPHERAL_FDCAN2)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <STM32CAN_RegisterCallbacks+0xc0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d102      	bne.n	8000ba4 <STM32CAN_RegisterCallbacks+0x44>
		iPeripheralIndex = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e001      	b.n	8000ba8 <STM32CAN_RegisterCallbacks+0x48>
		iPeripheralIndex = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
	if(pReceiveCallback)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d017      	beq.n	8000bde <STM32CAN_RegisterCallbacks+0x7e>
		atsSTM32CAN_Callbacks[iPeripheralIndex].pRxCallback = pReceiveCallback;
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <STM32CAN_RegisterCallbacks+0xcc>)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	605a      	str	r2, [r3, #4]
		ptsCANRegisters->FDCAN_IE |= 0x1UL;
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	655a      	str	r2, [r3, #84]	; 0x54
		ptsCANRegisters->FDCAN_ILS &= ~0x1UL;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	f023 0201 	bic.w	r2, r3, #1
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	659a      	str	r2, [r3, #88]	; 0x58
		ptsCANRegisters->FDCAN_ILE |= 0x1UL;
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	65da      	str	r2, [r3, #92]	; 0x5c
	if(pTransmitCallback)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d016      	beq.n	8000c12 <STM32CAN_RegisterCallbacks+0xb2>
		atsSTM32CAN_Callbacks[iPeripheralIndex].pTxCallback = pTransmitCallback;
 8000be4:	4911      	ldr	r1, [pc, #68]	; (8000c2c <STM32CAN_RegisterCallbacks+0xcc>)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		ptsCANRegisters->FDCAN_IE |= 0x200UL;
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	655a      	str	r2, [r3, #84]	; 0x54
		ptsCANRegisters->FDCAN_ILS &= ~0x200UL;
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	659a      	str	r2, [r3, #88]	; 0x58
		ptsCANRegisters->FDCAN_ILE |= 0x1UL;
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c0a:	f043 0201 	orr.w	r2, r3, #1
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	65da      	str	r2, [r3, #92]	; 0x5c
	return BT_SUCCESS;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	4000a000 	.word	0x4000a000
 8000c20:	4000a400 	.word	0x4000a400
 8000c24:	0800729c 	.word	0x0800729c
 8000c28:	080072cc 	.word	0x080072cc
 8000c2c:	24000610 	.word	0x24000610

08000c30 <EH_Exception>:
STM32CAN_DISCONNECTED:
	return BT_FAIL;
}

void EH_Exception(char* sFile, char* sLine, char* sErrorString)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, sErrorString, 120, 1000);
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	2278      	movs	r2, #120	; 0x78
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <EH_Exception+0x24>)
 8000c46:	f005 f849 	bl	8005cdc <HAL_UART_Transmit>
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24000684 	.word	0x24000684

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ba      	sub	sp, #232	; 0xe8
 8000c5c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char pData[1];
	pData[0] = '\0';
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0318 	add.w	r3, r7, #24
 8000c68:	22bc      	movs	r2, #188	; 0xbc
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f006 fb01 	bl	8007274 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f001 fea7 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 fef3 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f001 f909 	bl	8001e90 <MX_GPIO_Init>

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fac9 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <main+0x48>
    {
      Error_Handler();
 8000c9c:	f001 fb7e 	bl	800239c <Error_Handler>
    }
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ca0:	4bc2      	ldr	r3, [pc, #776]	; (8000fac <main+0x354>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4ac1      	ldr	r2, [pc, #772]	; (8000fac <main+0x354>)
 8000ca8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000caa:	4bc0      	ldr	r3, [pc, #768]	; (8000fac <main+0x354>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10e      	bne.n	8000cd0 <main+0x78>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cb2:	4bbf      	ldr	r3, [pc, #764]	; (8000fb0 <main+0x358>)
 8000cb4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000cb8:	4abd      	ldr	r2, [pc, #756]	; (8000fb0 <main+0x358>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000cc2:	4bbb      	ldr	r3, [pc, #748]	; (8000fb0 <main+0x358>)
 8000cc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
    }

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000cd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 faa0 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <main+0x9a>
    {
      Error_Handler();
 8000cee:	f001 fb55 	bl	800239c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000cf2:	4bae      	ldr	r3, [pc, #696]	; (8000fac <main+0x354>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4aac      	ldr	r2, [pc, #688]	; (8000fac <main+0x354>)
 8000cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000cfc:	4bab      	ldr	r3, [pc, #684]	; (8000fac <main+0x354>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10e      	bne.n	8000d22 <main+0xca>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d04:	4baa      	ldr	r3, [pc, #680]	; (8000fb0 <main+0x358>)
 8000d06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d0a:	4aa9      	ldr	r2, [pc, #676]	; (8000fb0 <main+0x358>)
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d10:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000d14:	4ba6      	ldr	r3, [pc, #664]	; (8000fb0 <main+0x358>)
 8000d16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  //MX_ADC1_Init();
  //MX_ADC3_Init();
  //MX_FDCAN1_Init();
  //MX_FDCAN2_Init();
  MX_FMC_Init();
 8000d22:	f001 f853 	bl	8001dcc <MX_FMC_Init>
  //MX_I2C1_Init();
  //MX_I2C2_Init();
  //MX_SPI1_Init();
  MX_UART4_Init();
 8000d26:	f000 ff6d 	bl	8001c04 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000d2a:	f000 ffb7 	bl	8001c9c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000d2e:	f000 ff37 	bl	8001ba0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000d32:	f000 ffff 	bl	8001d34 <MX_USART3_UART_Init>
  //MX_I2C4_Init();
  GPIO_PinState pinButton1State;
  GPIO_PinState pinButton2State;

  // Initialise the CAN busses
  STM32CAN_Initialise(CAN_PERIPHERAL_FDCAN1, STM32CAN_FDCAN1_MESSAGE_RAM_ADDRESS, CAN_BAUD_1MBPS, 0, 1, 1, 1);
 8000d36:	2301      	movs	r3, #1
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	2200      	movs	r2, #0
 8000d46:	499b      	ldr	r1, [pc, #620]	; (8000fb4 <main+0x35c>)
 8000d48:	489b      	ldr	r0, [pc, #620]	; (8000fb8 <main+0x360>)
 8000d4a:	f7ff fc49 	bl	80005e0 <STM32CAN_Initialise>
  STM32CAN_Initialise(CAN_PERIPHERAL_FDCAN2, STM32CAN_FDCAN2_MESSAGE_RAM_ADDRESS, CAN_BAUD_1MBPS, 0, 1, 1, 1);
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	2301      	movs	r3, #1
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4997      	ldr	r1, [pc, #604]	; (8000fbc <main+0x364>)
 8000d60:	4897      	ldr	r0, [pc, #604]	; (8000fc0 <main+0x368>)
 8000d62:	f7ff fc3d 	bl	80005e0 <STM32CAN_Initialise>
  STM32CAN_RegisterCallbacks(CAN_PERIPHERAL_FDCAN1, CAN1_ISR, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	4996      	ldr	r1, [pc, #600]	; (8000fc4 <main+0x36c>)
 8000d6a:	4893      	ldr	r0, [pc, #588]	; (8000fb8 <main+0x360>)
 8000d6c:	f7ff fef8 	bl	8000b60 <STM32CAN_RegisterCallbacks>
  STM32CAN_RegisterCallbacks(CAN_PERIPHERAL_FDCAN2, CAN2_ISR, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	4995      	ldr	r1, [pc, #596]	; (8000fc8 <main+0x370>)
 8000d74:	4892      	ldr	r0, [pc, #584]	; (8000fc0 <main+0x368>)
 8000d76:	f7ff fef3 	bl	8000b60 <STM32CAN_RegisterCallbacks>
  STM32CAN_Connect(CAN_PERIPHERAL_FDCAN1);
 8000d7a:	488f      	ldr	r0, [pc, #572]	; (8000fb8 <main+0x360>)
 8000d7c:	f7ff feb4 	bl	8000ae8 <STM32CAN_Connect>
  STM32CAN_Connect(CAN_PERIPHERAL_FDCAN2);
 8000d80:	488f      	ldr	r0, [pc, #572]	; (8000fc0 <main+0x368>)
 8000d82:	f7ff feb1 	bl	8000ae8 <STM32CAN_Connect>
  //HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
  //HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  //HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);

  tsSTM32CAN_Frame tsCANFrame;
  tsCANFrame.iDataLength = 2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	60fb      	str	r3, [r7, #12]
  tsCANFrame.iIdentifier = 0x55;
 8000d8a:	2355      	movs	r3, #85	; 0x55
 8000d8c:	60bb      	str	r3, [r7, #8]
  tsCANFrame.aData[0] = 0x55;
 8000d8e:	2355      	movs	r3, #85	; 0x55
 8000d90:	743b      	strb	r3, [r7, #16]
  tsCANFrame.aData[1] = 0x55;
 8000d92:	2355      	movs	r3, #85	; 0x55
 8000d94:	747b      	strb	r3, [r7, #17]

  STM32CAN_Transmit(CAN_PERIPHERAL_FDCAN1, &tsCANFrame,1);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4886      	ldr	r0, [pc, #536]	; (8000fb8 <main+0x360>)
 8000da0:	f7ff fcfe 	bl	80007a0 <STM32CAN_Transmit>
  STM32CAN_Transmit(CAN_PERIPHERAL_FDCAN2, &tsCANFrame,1);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	4884      	ldr	r0, [pc, #528]	; (8000fc0 <main+0x368>)
 8000dae:	f7ff fcf7 	bl	80007a0 <STM32CAN_Transmit>
  /* USER CODE BEGIN 2 */
  // for this board, PC10: USART3_TX, PC11: USART3_RX

  // print the splash screen and wait for something to happen
  HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 500);
 8000db2:	4886      	ldr	r0, [pc, #536]	; (8000fcc <main+0x374>)
 8000db4:	f7ff fa90 	bl	80002d8 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dc0:	4982      	ldr	r1, [pc, #520]	; (8000fcc <main+0x374>)
 8000dc2:	4883      	ldr	r0, [pc, #524]	; (8000fd0 <main+0x378>)
 8000dc4:	f004 ff8a 	bl	8005cdc <HAL_UART_Transmit>
  // LED 2 is PG7
  // LED 3 is PG8
  // USER_BUTTON_1 is PC6
  // USER_BUTTON_2 is PC4
  // Set LED1
  HAL_GPIO_WritePin(GPIOG, 0x0040, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4881      	ldr	r0, [pc, #516]	; (8000fd4 <main+0x37c>)
 8000dce:	f002 f98b 	bl	80030e8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	pData[0] = '\0';
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
    // Read the UART3 for a character... wait 1/4 second
	HAL_UART_Receive(&huart3, pData, 1, 250);
 8000dd8:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000ddc:	23fa      	movs	r3, #250	; 0xfa
 8000dde:	2201      	movs	r2, #1
 8000de0:	487b      	ldr	r0, [pc, #492]	; (8000fd0 <main+0x378>)
 8000de2:	f005 f811 	bl	8005e08 <HAL_UART_Receive>

	// Toggle LED 1 & 2
	HAL_GPIO_TogglePin(GPIOG, 0x00C0);
 8000de6:	21c0      	movs	r1, #192	; 0xc0
 8000de8:	487a      	ldr	r0, [pc, #488]	; (8000fd4 <main+0x37c>)
 8000dea:	f002 f996 	bl	800311a <HAL_GPIO_TogglePin>
	// Read the buttons PC4 & 6

	pinButton2State = HAL_GPIO_ReadPin(GPIOC, 0x0010);
 8000dee:	2110      	movs	r1, #16
 8000df0:	4879      	ldr	r0, [pc, #484]	; (8000fd8 <main+0x380>)
 8000df2:	f002 f961 	bl	80030b8 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	pinButton1State = HAL_GPIO_ReadPin(GPIOC, 0x0040);
 8000dfc:	2140      	movs	r1, #64	; 0x40
 8000dfe:	4876      	ldr	r0, [pc, #472]	; (8000fd8 <main+0x380>)
 8000e00:	f002 f95a 	bl	80030b8 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6

	// set LED 3 if someone is pressing button 2
	if (pinButton2State == GPIO_PIN_RESET)
 8000e0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <main+0x1c6>
	{
		// set LED 3
		HAL_GPIO_WritePin(GPIOG, 0x0100, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	486e      	ldr	r0, [pc, #440]	; (8000fd4 <main+0x37c>)
 8000e1a:	f002 f965 	bl	80030e8 <HAL_GPIO_WritePin>
	}
	// reset LED 3 if someone is pressing button 1
	if (pinButton1State == GPIO_PIN_RESET)
 8000e1e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d105      	bne.n	8000e32 <main+0x1da>
	{
		// reset LED 3
		HAL_GPIO_WritePin(GPIOG, 0x0100, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2c:	4869      	ldr	r0, [pc, #420]	; (8000fd4 <main+0x37c>)
 8000e2e:	f002 f95b 	bl	80030e8 <HAL_GPIO_WritePin>
	}

	switch (pData[0])
 8000e32:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8000e36:	3b41      	subs	r3, #65	; 0x41
 8000e38:	2b11      	cmp	r3, #17
 8000e3a:	f200 80b5 	bhi.w	8000fa8 <main+0x350>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <main+0x1ec>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e8d 	.word	0x08000e8d
 8000e48:	08000ea1 	.word	0x08000ea1
 8000e4c:	08000eb5 	.word	0x08000eb5
 8000e50:	08000fa9 	.word	0x08000fa9
 8000e54:	08000fa9 	.word	0x08000fa9
 8000e58:	08000fa9 	.word	0x08000fa9
 8000e5c:	08000fa9 	.word	0x08000fa9
 8000e60:	08000ec9 	.word	0x08000ec9
 8000e64:	08000edf 	.word	0x08000edf
 8000e68:	08000ef5 	.word	0x08000ef5
 8000e6c:	08000f09 	.word	0x08000f09
 8000e70:	08000f1d 	.word	0x08000f1d
 8000e74:	08000f31 	.word	0x08000f31
 8000e78:	08000f45 	.word	0x08000f45
 8000e7c:	08000f59 	.word	0x08000f59
 8000e80:	08000f6d 	.word	0x08000f6d
 8000e84:	08000f81 	.word	0x08000f81
 8000e88:	08000f95 	.word	0x08000f95
	{
	case 'A':
		HAL_UART_Transmit(&huart3, "Starting Memory CS Decoder Test\r\n", 33, 1000);
 8000e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e90:	2221      	movs	r2, #33	; 0x21
 8000e92:	4952      	ldr	r1, [pc, #328]	; (8000fdc <main+0x384>)
 8000e94:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <main+0x378>)
 8000e96:	f004 ff21 	bl	8005cdc <HAL_UART_Transmit>
		MRAM_CSTest();
 8000e9a:	f000 f947 	bl	800112c <MRAM_CSTest>
		break;
 8000e9e:	e084      	b.n	8000faa <main+0x352>
	case 'B':
		HAL_UART_Transmit(&huart3, "Starting MRAM Write Test\r\n", 26, 1000);
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	221a      	movs	r2, #26
 8000ea6:	494e      	ldr	r1, [pc, #312]	; (8000fe0 <main+0x388>)
 8000ea8:	4849      	ldr	r0, [pc, #292]	; (8000fd0 <main+0x378>)
 8000eaa:	f004 ff17 	bl	8005cdc <HAL_UART_Transmit>
		MRAM_WriteTest();
 8000eae:	f000 fccf 	bl	8001850 <MRAM_WriteTest>
		break;
 8000eb2:	e07a      	b.n	8000faa <main+0x352>
	case 'C':
		HAL_UART_Transmit(&huart3, "Starting MRAM Read Test\r\n", 25, 1000);
 8000eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb8:	2219      	movs	r2, #25
 8000eba:	494a      	ldr	r1, [pc, #296]	; (8000fe4 <main+0x38c>)
 8000ebc:	4844      	ldr	r0, [pc, #272]	; (8000fd0 <main+0x378>)
 8000ebe:	f004 ff0d 	bl	8005cdc <HAL_UART_Transmit>
		MRAM_ReadTest();
 8000ec2:	f000 fd39 	bl	8001938 <MRAM_ReadTest>
		break;
 8000ec6:	e070      	b.n	8000faa <main+0x352>
	case 'H':
		HAL_UART_Transmit(&huart3, "Starting UART4 Testing, waiting for UART character\r\n", 52, 1000);
 8000ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ecc:	2234      	movs	r2, #52	; 0x34
 8000ece:	4946      	ldr	r1, [pc, #280]	; (8000fe8 <main+0x390>)
 8000ed0:	483f      	ldr	r0, [pc, #252]	; (8000fd0 <main+0x378>)
 8000ed2:	f004 ff03 	bl	8005cdc <HAL_UART_Transmit>
		UART_Test(&huart4);
 8000ed6:	4845      	ldr	r0, [pc, #276]	; (8000fec <main+0x394>)
 8000ed8:	f000 f9f6 	bl	80012c8 <UART_Test>
		break;
 8000edc:	e065      	b.n	8000faa <main+0x352>
	case 'I':
		HAL_UART_Transmit(&huart3, "Starting UART2 Testing, waiting for UART character\r\n", 52, 1000);
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	2234      	movs	r2, #52	; 0x34
 8000ee4:	4942      	ldr	r1, [pc, #264]	; (8000ff0 <main+0x398>)
 8000ee6:	483a      	ldr	r0, [pc, #232]	; (8000fd0 <main+0x378>)
 8000ee8:	f004 fef8 	bl	8005cdc <HAL_UART_Transmit>
		UART_Test(&huart2);
 8000eec:	4841      	ldr	r0, [pc, #260]	; (8000ff4 <main+0x39c>)
 8000eee:	f000 f9eb 	bl	80012c8 <UART_Test>
		break;
 8000ef2:	e05a      	b.n	8000faa <main+0x352>
	case 'J':
		HAL_UART_Transmit(&huart3, "Starting GPIO test, pulsing successive outputs\r\n", 49, 1000);
 8000ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef8:	2231      	movs	r2, #49	; 0x31
 8000efa:	493f      	ldr	r1, [pc, #252]	; (8000ff8 <main+0x3a0>)
 8000efc:	4834      	ldr	r0, [pc, #208]	; (8000fd0 <main+0x378>)
 8000efe:	f004 feed 	bl	8005cdc <HAL_UART_Transmit>
		GPIO_Test();
 8000f02:	f000 facd 	bl	80014a0 <GPIO_Test>
		break;
 8000f06:	e050      	b.n	8000faa <main+0x352>
	case 'K':
		HAL_UART_Transmit(&huart3, "Starting ADC test, pulsing successive ADC inputs\r\n", 50, 1000);
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	2232      	movs	r2, #50	; 0x32
 8000f0e:	493b      	ldr	r1, [pc, #236]	; (8000ffc <main+0x3a4>)
 8000f10:	482f      	ldr	r0, [pc, #188]	; (8000fd0 <main+0x378>)
 8000f12:	f004 fee3 	bl	8005cdc <HAL_UART_Transmit>
		ANALOGUE_Test();
 8000f16:	f000 fbc7 	bl	80016a8 <ANALOGUE_Test>
		break;
 8000f1a:	e046      	b.n	8000faa <main+0x352>
	case 'L':
		HAL_UART_Transmit(&huart3, "Starting PPS test\r\n", 19, 1000);
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	2213      	movs	r2, #19
 8000f22:	4937      	ldr	r1, [pc, #220]	; (8001000 <main+0x3a8>)
 8000f24:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <main+0x378>)
 8000f26:	f004 fed9 	bl	8005cdc <HAL_UART_Transmit>
		PPS_Test();
 8000f2a:	f000 fc53 	bl	80017d4 <PPS_Test>
		break;
 8000f2e:	e03c      	b.n	8000faa <main+0x352>
	case 'M':
		HAL_UART_Transmit(&huart3, "Starting LVDS, Data Ready to MOSI test. Looping back for 10s\r\n", 62, 1000);
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	223e      	movs	r2, #62	; 0x3e
 8000f36:	4933      	ldr	r1, [pc, #204]	; (8001004 <main+0x3ac>)
 8000f38:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <main+0x378>)
 8000f3a:	f004 fecf 	bl	8005cdc <HAL_UART_Transmit>
		LVDS_DR_To_MOSI_Test();
 8000f3e:	f000 fa1b 	bl	8001378 <LVDS_DR_To_MOSI_Test>
		break;
 8000f42:	e032      	b.n	8000faa <main+0x352>
	case 'N':
		HAL_UART_Transmit(&huart3, "Starting LVDS, Data Ready to NSS test. Looping back for 10s\r\n", 61, 1000);
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	223d      	movs	r2, #61	; 0x3d
 8000f4a:	492f      	ldr	r1, [pc, #188]	; (8001008 <main+0x3b0>)
 8000f4c:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <main+0x378>)
 8000f4e:	f004 fec5 	bl	8005cdc <HAL_UART_Transmit>
		LVDS_DR_To_NSS_Test();
 8000f52:	f000 fa21 	bl	8001398 <LVDS_DR_To_NSS_Test>
		break;
 8000f56:	e028      	b.n	8000faa <main+0x352>
	case 'O':
		HAL_UART_Transmit(&huart3, "Starting LVDS, Data Ready to SCK test. Looping back for 10s\r\n", 61, 1000);
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	223d      	movs	r2, #61	; 0x3d
 8000f5e:	492b      	ldr	r1, [pc, #172]	; (800100c <main+0x3b4>)
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <main+0x378>)
 8000f62:	f004 febb 	bl	8005cdc <HAL_UART_Transmit>
		LVDS_DR_To_SCK_Test();
 8000f66:	f000 fa25 	bl	80013b4 <LVDS_DR_To_SCK_Test>
		break;
 8000f6a:	e01e      	b.n	8000faa <main+0x352>
	case 'P':
		HAL_UART_Transmit(&huart3, "Starting LVDS, EXTI9 to MOSI test. Looping back for 10s\r\n", 56, 1000);
 8000f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f70:	2238      	movs	r2, #56	; 0x38
 8000f72:	4927      	ldr	r1, [pc, #156]	; (8001010 <main+0x3b8>)
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <main+0x378>)
 8000f76:	f004 feb1 	bl	8005cdc <HAL_UART_Transmit>
		LVDS_EXTI9_To_MOSI_Test();
 8000f7a:	f000 fa29 	bl	80013d0 <LVDS_EXTI9_To_MOSI_Test>
		break;
 8000f7e:	e014      	b.n	8000faa <main+0x352>
	case 'Q':
		HAL_UART_Transmit(&huart3, "Starting LVDS, EXTI9 to NSS test. Looping back for 10s\r\n", 57, 1000);
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	2239      	movs	r2, #57	; 0x39
 8000f86:	4923      	ldr	r1, [pc, #140]	; (8001014 <main+0x3bc>)
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <main+0x378>)
 8000f8a:	f004 fea7 	bl	8005cdc <HAL_UART_Transmit>
		LVDS_EXTI9_To_NSS_Test();
 8000f8e:	f000 fa2f 	bl	80013f0 <LVDS_EXTI9_To_NSS_Test>
		break;
 8000f92:	e00a      	b.n	8000faa <main+0x352>
	case 'R':
		HAL_UART_Transmit(&huart3, "Starting LVDS, EXTI9 to SCK test. Looping back for 10s\r\n", 57, 1000);
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	2239      	movs	r2, #57	; 0x39
 8000f9a:	491f      	ldr	r1, [pc, #124]	; (8001018 <main+0x3c0>)
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <main+0x378>)
 8000f9e:	f004 fe9d 	bl	8005cdc <HAL_UART_Transmit>
		LVDS_EXTI9_To_SCK_Test();
 8000fa2:	f000 fa33 	bl	800140c <LVDS_EXTI9_To_SCK_Test>
		break;
 8000fa6:	e000      	b.n	8000faa <main+0x352>
	default:
		break;
 8000fa8:	bf00      	nop
	pData[0] = '\0';
 8000faa:	e712      	b.n	8000dd2 <main+0x17a>
 8000fac:	24000628 	.word	0x24000628
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	4000ac00 	.word	0x4000ac00
 8000fb8:	4000a000 	.word	0x4000a000
 8000fbc:	4000fc12 	.word	0x4000fc12
 8000fc0:	4000a400 	.word	0x4000a400
 8000fc4:	0800101d 	.word	0x0800101d
 8000fc8:	080010a5 	.word	0x080010a5
 8000fcc:	24000000 	.word	0x24000000
 8000fd0:	24000684 	.word	0x24000684
 8000fd4:	58021800 	.word	0x58021800
 8000fd8:	58020800 	.word	0x58020800
 8000fdc:	08007734 	.word	0x08007734
 8000fe0:	08007758 	.word	0x08007758
 8000fe4:	08007774 	.word	0x08007774
 8000fe8:	08007790 	.word	0x08007790
 8000fec:	24000984 	.word	0x24000984
 8000ff0:	080077c8 	.word	0x080077c8
 8000ff4:	24000a9c 	.word	0x24000a9c
 8000ff8:	08007800 	.word	0x08007800
 8000ffc:	08007834 	.word	0x08007834
 8001000:	08007868 	.word	0x08007868
 8001004:	0800787c 	.word	0x0800787c
 8001008:	080078bc 	.word	0x080078bc
 800100c:	080078fc 	.word	0x080078fc
 8001010:	0800793c 	.word	0x0800793c
 8001014:	08007978 	.word	0x08007978
 8001018:	080079b4 	.word	0x080079b4

0800101c <CAN1_ISR>:

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
}

void CAN1_ISR(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af02      	add	r7, sp, #8
	unsigned int *pBufferStartAddress;
	unsigned int *piIndexOfFirstFrame;
	unsigned int *piNumFramesToRead;
	unsigned int *piMaxFramesInFIFO;
	unsigned int i = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
	STM32CAN_Receive(CAN_PERIPHERAL_FDCAN1, pBufferStartAddress, piIndexOfFirstFrame, piNumFramesToRead, piMaxFramesInFIFO);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	6a39      	ldr	r1, [r7, #32]
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <CAN1_ISR+0x80>)
 8001032:	f7ff fcaf 	bl	8000994 <STM32CAN_Receive>

	// if the test is running
	if (CAN1_Test_Running == 1)
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <CAN1_ISR+0x84>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d126      	bne.n	800108c <CAN1_ISR+0x70>
	{
		tsSTM32CAN_Frame tsCANFrame;
		tsCANFrame.iIdentifier = ((tsSTM32CAN_RXFifoElement*)pBufferStartAddress)->iID;
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001046:	607b      	str	r3, [r7, #4]
		tsCANFrame.iDataLength = ((tsSTM32CAN_RXFifoElement*)pBufferStartAddress)->iDLC;
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	799b      	ldrb	r3, [r3, #6]
 800104c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001050:	b2db      	uxtb	r3, r3
 8001052:	60bb      	str	r3, [r7, #8]
		for (i = 0 ; i < tsCANFrame.iDataLength ; i++ )
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
 8001058:	e00d      	b.n	8001076 <CAN1_ISR+0x5a>
		{
			tsCANFrame.aData[i] = ((tsSTM32CAN_RXFifoElement*)pBufferStartAddress)->aDataBytes[i];
 800105a:	6a3a      	ldr	r2, [r7, #32]
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	4413      	add	r3, r2
 8001060:	3308      	adds	r3, #8
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	4413      	add	r3, r2
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
		for (i = 0 ; i < tsCANFrame.iDataLength ; i++ )
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	3301      	adds	r3, #1
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107a:	429a      	cmp	r2, r3
 800107c:	d3ed      	bcc.n	800105a <CAN1_ISR+0x3e>
		}

		STM32CAN_Transmit(CAN_PERIPHERAL_FDCAN1, &tsCANFrame, 1);
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <CAN1_ISR+0x80>)
 8001086:	f7ff fb8b 	bl	80007a0 <STM32CAN_Transmit>
	}
	else
	{
		STM32CAN_Flush(CAN_PERIPHERAL_FDCAN1);
	}
}
 800108a:	e002      	b.n	8001092 <CAN1_ISR+0x76>
		STM32CAN_Flush(CAN_PERIPHERAL_FDCAN1);
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <CAN1_ISR+0x80>)
 800108e:	f7ff fcf3 	bl	8000a78 <STM32CAN_Flush>
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	4000a000 	.word	0x4000a000
 80010a0:	2400062c 	.word	0x2400062c

080010a4 <CAN2_ISR>:

void CAN2_ISR(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af02      	add	r7, sp, #8
	unsigned int *pBufferStartAddress;
	unsigned int *piIndexOfFirstFrame;
	unsigned int *piNumFramesToRead;
	unsigned int *piMaxFramesInFIFO;
	unsigned int i = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
	STM32CAN_Receive(CAN_PERIPHERAL_FDCAN2, pBufferStartAddress, piIndexOfFirstFrame, piNumFramesToRead, piMaxFramesInFIFO);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	6a39      	ldr	r1, [r7, #32]
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <CAN2_ISR+0x80>)
 80010ba:	f7ff fc6b 	bl	8000994 <STM32CAN_Receive>

	// if the test is running
	if (CAN2_Test_Running == 1)
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <CAN2_ISR+0x84>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d126      	bne.n	8001114 <CAN2_ISR+0x70>
	{
		tsSTM32CAN_Frame tsCANFrame;
		tsCANFrame.iIdentifier = ((tsSTM32CAN_RXFifoElement*)pBufferStartAddress)->iID;
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80010ce:	607b      	str	r3, [r7, #4]
		tsCANFrame.iDataLength = ((tsSTM32CAN_RXFifoElement*)pBufferStartAddress)->iDLC;
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	799b      	ldrb	r3, [r3, #6]
 80010d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	60bb      	str	r3, [r7, #8]
		for (i = 0 ; i < tsCANFrame.iDataLength ; i++ )
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	e00d      	b.n	80010fe <CAN2_ISR+0x5a>
		{
			tsCANFrame.aData[i] = ((tsSTM32CAN_RXFifoElement*)pBufferStartAddress)->aDataBytes[i];
 80010e2:	6a3a      	ldr	r2, [r7, #32]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	4413      	add	r3, r2
 80010e8:	3308      	adds	r3, #8
 80010ea:	7819      	ldrb	r1, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
		for (i = 0 ; i < tsCANFrame.iDataLength ; i++ )
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3301      	adds	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001102:	429a      	cmp	r2, r3
 8001104:	d3ed      	bcc.n	80010e2 <CAN2_ISR+0x3e>
		}

		STM32CAN_Transmit(CAN_PERIPHERAL_FDCAN2, &tsCANFrame, 1);
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <CAN2_ISR+0x80>)
 800110e:	f7ff fb47 	bl	80007a0 <STM32CAN_Transmit>
	}
	else
	{
		STM32CAN_Flush(CAN_PERIPHERAL_FDCAN2);
	}
}
 8001112:	e002      	b.n	800111a <CAN2_ISR+0x76>
		STM32CAN_Flush(CAN_PERIPHERAL_FDCAN2);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <CAN2_ISR+0x80>)
 8001116:	f7ff fcaf 	bl	8000a78 <STM32CAN_Flush>
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	4000a400 	.word	0x4000a400
 8001128:	24000630 	.word	0x24000630

0800112c <MRAM_CSTest>:

// Perform a test of the decoders that are used to assert the Chip Select signals.
static void MRAM_CSTest(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, "Intialising the FMC to connect the MRAM\r\n", 41, 1000);
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	2229      	movs	r2, #41	; 0x29
 8001138:	4959      	ldr	r1, [pc, #356]	; (80012a0 <MRAM_CSTest+0x174>)
 800113a:	485a      	ldr	r0, [pc, #360]	; (80012a4 <MRAM_CSTest+0x178>)
 800113c:	f004 fdce 	bl	8005cdc <HAL_UART_Transmit>

	int i = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
	int j = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
	unsigned short *pMRAMLocation;
	unsigned short actualValue;
	char cCounterChar;

	// FMC bank 1 registers
	int *piFMC_BCR1 = 0x52004000;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <MRAM_CSTest+0x17c>)
 800114a:	61bb      	str	r3, [r7, #24]
	int *piFMC_BTR1 = 0x52004004;
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <MRAM_CSTest+0x180>)
 800114e:	617b      	str	r3, [r7, #20]

	// pointer to the MRAM
	unsigned short *piMRAM = MRAM_START_ADDRESS;
 8001150:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001154:	613b      	str	r3, [r7, #16]

	unsigned short Value = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	81fb      	strh	r3, [r7, #14]
	unsigned int iLoopCounter = 0UL;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]

    // set the BTR register to 00000000000000000000000100000010 (binary) 0x00000102 (hex)
	// See the above commentry for justification
	*piFMC_BTR1 = 0x00000202UL;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f240 2202 	movw	r2, #514	; 0x202
 8001164:	601a      	str	r2, [r3, #0]
	//*piFMC_BTR1 = 0x0000FF08UL;
	// Set the BCR register to 1000 0000 0010 0000 0001 0000 1001 0001 (binary) 0x80201091 (hex)
	// See the above commentry for justification
	*piFMC_BCR1 = 0x81201091UL;
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <MRAM_CSTest+0x184>)
 800116a:	601a      	str	r2, [r3, #0]

	// run through all 10 chip selects
	for (i=0 ; i < 10 ; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
 8001170:	e082      	b.n	8001278 <MRAM_CSTest+0x14c>
	{
		// address the next chip
		pMRAMLocation = MRAM_START_ADDRESS + (i* MRAM_SINGLE_CHIP_SIZE);
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001178:	059b      	lsls	r3, r3, #22
 800117a:	61fb      	str	r3, [r7, #28]
		HAL_UART_Transmit(&huart3, "Writing to MRAM at chip select #", 32, 1000);
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	2220      	movs	r2, #32
 8001182:	494c      	ldr	r1, [pc, #304]	; (80012b4 <MRAM_CSTest+0x188>)
 8001184:	4847      	ldr	r0, [pc, #284]	; (80012a4 <MRAM_CSTest+0x178>)
 8001186:	f004 fda9 	bl	8005cdc <HAL_UART_Transmit>
		cCounterChar = i + 48;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3330      	adds	r3, #48	; 0x30
 8001190:	b2db      	uxtb	r3, r3
 8001192:	717b      	strb	r3, [r7, #5]
		HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 8001194:	1d79      	adds	r1, r7, #5
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	2201      	movs	r2, #1
 800119c:	4841      	ldr	r0, [pc, #260]	; (80012a4 <MRAM_CSTest+0x178>)
 800119e:	f004 fd9d 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	2202      	movs	r2, #2
 80011a8:	4943      	ldr	r1, [pc, #268]	; (80012b8 <MRAM_CSTest+0x18c>)
 80011aa:	483e      	ldr	r0, [pc, #248]	; (80012a4 <MRAM_CSTest+0x178>)
 80011ac:	f004 fd96 	bl	8005cdc <HAL_UART_Transmit>

		// fill the first 10 locations with content
		for(j=0 ; j < 10 ; j++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
 80011b4:	e009      	b.n	80011ca <MRAM_CSTest+0x9e>
		{
			*pMRAMLocation = (unsigned short)j;
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	801a      	strh	r2, [r3, #0]
			pMRAMLocation++;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3302      	adds	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
		for(j=0 ; j < 10 ; j++)
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	3301      	adds	r3, #1
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	ddf2      	ble.n	80011b6 <MRAM_CSTest+0x8a>
		}

		// reset the pointer to the start address of this chip.
		pMRAMLocation = MRAM_START_ADDRESS + (i* MRAM_SINGLE_CHIP_SIZE);
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80011d6:	059b      	lsls	r3, r3, #22
 80011d8:	61fb      	str	r3, [r7, #28]
		// check that the chip is storing the first 10 locations
		for (j=0 ; j < 10 ; j++)
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e028      	b.n	8001232 <MRAM_CSTest+0x106>
		{
			actualValue = *pMRAMLocation;
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	80fb      	strh	r3, [r7, #6]
			pMRAMLocation++;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3302      	adds	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
			if (actualValue != j)
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d01b      	beq.n	800122c <MRAM_CSTest+0x100>
			{
				HAL_UART_Transmit(&huart3, "Error reading MRAM at chip select #", 35, 1000);
 80011f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f8:	2223      	movs	r2, #35	; 0x23
 80011fa:	4930      	ldr	r1, [pc, #192]	; (80012bc <MRAM_CSTest+0x190>)
 80011fc:	4829      	ldr	r0, [pc, #164]	; (80012a4 <MRAM_CSTest+0x178>)
 80011fe:	f004 fd6d 	bl	8005cdc <HAL_UART_Transmit>
				cCounterChar = i + 48;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	b2db      	uxtb	r3, r3
 8001206:	3330      	adds	r3, #48	; 0x30
 8001208:	b2db      	uxtb	r3, r3
 800120a:	717b      	strb	r3, [r7, #5]
				HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 800120c:	1d79      	adds	r1, r7, #5
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	2201      	movs	r2, #1
 8001214:	4823      	ldr	r0, [pc, #140]	; (80012a4 <MRAM_CSTest+0x178>)
 8001216:	f004 fd61 	bl	8005cdc <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	2202      	movs	r2, #2
 8001220:	4925      	ldr	r1, [pc, #148]	; (80012b8 <MRAM_CSTest+0x18c>)
 8001222:	4820      	ldr	r0, [pc, #128]	; (80012a4 <MRAM_CSTest+0x178>)
 8001224:	f004 fd5a 	bl	8005cdc <HAL_UART_Transmit>
				j = 20;
 8001228:	2314      	movs	r3, #20
 800122a:	623b      	str	r3, [r7, #32]
		for (j=0 ; j < 10 ; j++)
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	3301      	adds	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2b09      	cmp	r3, #9
 8001236:	ddd3      	ble.n	80011e0 <MRAM_CSTest+0xb4>
			}
		}
		// if the test was successful.
		if (j == 10)
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d119      	bne.n	8001272 <MRAM_CSTest+0x146>
		{
			HAL_UART_Transmit(&huart3, "Successfully wrote and read data at chip select #", 49, 1000);
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	2231      	movs	r2, #49	; 0x31
 8001244:	491e      	ldr	r1, [pc, #120]	; (80012c0 <MRAM_CSTest+0x194>)
 8001246:	4817      	ldr	r0, [pc, #92]	; (80012a4 <MRAM_CSTest+0x178>)
 8001248:	f004 fd48 	bl	8005cdc <HAL_UART_Transmit>
			cCounterChar = i + 48;
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3330      	adds	r3, #48	; 0x30
 8001252:	b2db      	uxtb	r3, r3
 8001254:	717b      	strb	r3, [r7, #5]
			HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 8001256:	1d79      	adds	r1, r7, #5
 8001258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125c:	2201      	movs	r2, #1
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MRAM_CSTest+0x178>)
 8001260:	f004 fd3c 	bl	8005cdc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\r\n", 2, 1000);
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	2202      	movs	r2, #2
 800126a:	4913      	ldr	r1, [pc, #76]	; (80012b8 <MRAM_CSTest+0x18c>)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MRAM_CSTest+0x178>)
 800126e:	f004 fd35 	bl	8005cdc <HAL_UART_Transmit>
	for (i=0 ; i < 10 ; i++)
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	3301      	adds	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	2b09      	cmp	r3, #9
 800127c:	f77f af79 	ble.w	8001172 <MRAM_CSTest+0x46>
		}

	}
	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <MRAM_CSTest+0x198>)
 8001282:	f7ff f829 	bl	80002d8 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <MRAM_CSTest+0x198>)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MRAM_CSTest+0x178>)
 8001292:	f004 fd23 	bl	8005cdc <HAL_UART_Transmit>

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	080079f0 	.word	0x080079f0
 80012a4:	24000684 	.word	0x24000684
 80012a8:	52004000 	.word	0x52004000
 80012ac:	52004004 	.word	0x52004004
 80012b0:	81201091 	.word	0x81201091
 80012b4:	08007a1c 	.word	0x08007a1c
 80012b8:	08007a40 	.word	0x08007a40
 80012bc:	08007a44 	.word	0x08007a44
 80012c0:	08007a68 	.word	0x08007a68
 80012c4:	24000000 	.word	0x24000000

080012c8 <UART_Test>:

static void UART_Test(UART_HandleTypeDef *huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	char pData[1];

	// perform dummy read to flush UART
	HAL_UART_Receive(huart, pData, 1, 0);
 80012d0:	f107 010c 	add.w	r1, r7, #12
 80012d4:	2300      	movs	r3, #0
 80012d6:	2201      	movs	r2, #1
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f004 fd95 	bl	8005e08 <HAL_UART_Receive>

	status = HAL_UART_Receive(huart, pData, 1, 10000);
 80012de:	f107 010c 	add.w	r1, r7, #12
 80012e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80012e6:	2201      	movs	r2, #1
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f004 fd8d 	bl	8005e08 <HAL_UART_Receive>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_TIMEOUT)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d107      	bne.n	8001308 <UART_Test+0x40>
	{
		HAL_UART_Transmit(&huart3, "Nothing received\r\n", 18, 1000);
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	2212      	movs	r2, #18
 80012fe:	4919      	ldr	r1, [pc, #100]	; (8001364 <UART_Test+0x9c>)
 8001300:	4819      	ldr	r0, [pc, #100]	; (8001368 <UART_Test+0xa0>)
 8001302:	f004 fceb 	bl	8005cdc <HAL_UART_Transmit>
 8001306:	e01d      	b.n	8001344 <UART_Test+0x7c>
	}
	else
	{
		HAL_UART_Transmit(&huart3, "Received ", 10, 1000);
 8001308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130c:	220a      	movs	r2, #10
 800130e:	4917      	ldr	r1, [pc, #92]	; (800136c <UART_Test+0xa4>)
 8001310:	4815      	ldr	r0, [pc, #84]	; (8001368 <UART_Test+0xa0>)
 8001312:	f004 fce3 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, pData, 1, 1000);
 8001316:	f107 010c 	add.w	r1, r7, #12
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	2201      	movs	r2, #1
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <UART_Test+0xa0>)
 8001322:	f004 fcdb 	bl	8005cdc <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart3, " echoing on UART\r\n", 18, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	2212      	movs	r2, #18
 800132c:	4910      	ldr	r1, [pc, #64]	; (8001370 <UART_Test+0xa8>)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <UART_Test+0xa0>)
 8001330:	f004 fcd4 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(huart, pData, 1, 1000);
 8001334:	f107 010c 	add.w	r1, r7, #12
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	2201      	movs	r2, #1
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f004 fccc 	bl	8005cdc <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <UART_Test+0xac>)
 8001346:	f7fe ffc7 	bl	80002d8 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <UART_Test+0xac>)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <UART_Test+0xa0>)
 8001356:	f004 fcc1 	bl	8005cdc <HAL_UART_Transmit>
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08007a9c 	.word	0x08007a9c
 8001368:	24000684 	.word	0x24000684
 800136c:	08007ab0 	.word	0x08007ab0
 8001370:	08007abc 	.word	0x08007abc
 8001374:	24000000 	.word	0x24000000

08001378 <LVDS_DR_To_MOSI_Test>:

static void LVDS_DR_To_MOSI_Test(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	LoopBackIoTest(GPIOG, 0x8000, GPIOD, 0x0080);
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <LVDS_DR_To_MOSI_Test+0x18>)
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <LVDS_DR_To_MOSI_Test+0x1c>)
 8001386:	f000 f84f 	bl	8001428 <LoopBackIoTest>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	58020c00 	.word	0x58020c00
 8001394:	58021800 	.word	0x58021800

08001398 <LVDS_DR_To_NSS_Test>:
static void LVDS_DR_To_NSS_Test(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	LoopBackIoTest(GPIOG, 0x8000, GPIOG, 0x0400);
 800139c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <LVDS_DR_To_NSS_Test+0x18>)
 80013a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a6:	4802      	ldr	r0, [pc, #8]	; (80013b0 <LVDS_DR_To_NSS_Test+0x18>)
 80013a8:	f000 f83e 	bl	8001428 <LoopBackIoTest>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	58021800 	.word	0x58021800

080013b4 <LVDS_DR_To_SCK_Test>:
static void LVDS_DR_To_SCK_Test(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	LoopBackIoTest(GPIOG, 0x8000, GPIOG, 0x0800);
 80013b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <LVDS_DR_To_SCK_Test+0x18>)
 80013be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c2:	4802      	ldr	r0, [pc, #8]	; (80013cc <LVDS_DR_To_SCK_Test+0x18>)
 80013c4:	f000 f830 	bl	8001428 <LoopBackIoTest>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	58021800 	.word	0x58021800

080013d0 <LVDS_EXTI9_To_MOSI_Test>:
static void LVDS_EXTI9_To_MOSI_Test(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	LoopBackIoTest(GPIOG, 0x0200, GPIOD, 0x0080);
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <LVDS_EXTI9_To_MOSI_Test+0x18>)
 80013d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <LVDS_EXTI9_To_MOSI_Test+0x1c>)
 80013de:	f000 f823 	bl	8001428 <LoopBackIoTest>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	58020c00 	.word	0x58020c00
 80013ec:	58021800 	.word	0x58021800

080013f0 <LVDS_EXTI9_To_NSS_Test>:
static void LVDS_EXTI9_To_NSS_Test(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	LoopBackIoTest(GPIOG, 0x0200, GPIOG, 0x0400);
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	4a03      	ldr	r2, [pc, #12]	; (8001408 <LVDS_EXTI9_To_NSS_Test+0x18>)
 80013fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <LVDS_EXTI9_To_NSS_Test+0x18>)
 8001400:	f000 f812 	bl	8001428 <LoopBackIoTest>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	58021800 	.word	0x58021800

0800140c <LVDS_EXTI9_To_SCK_Test>:
static void LVDS_EXTI9_To_SCK_Test(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	LoopBackIoTest(GPIOG, 0x0200, GPIOG, 0x0800);
 8001410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <LVDS_EXTI9_To_SCK_Test+0x18>)
 8001416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <LVDS_EXTI9_To_SCK_Test+0x18>)
 800141c:	f000 f804 	bl	8001428 <LoopBackIoTest>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	58021800 	.word	0x58021800

08001428 <LoopBackIoTest>:


static void LoopBackIoTest(GPIO_TypeDef *InputGPIOx, uint16_t InputGPIO_Pin, GPIO_TypeDef *OutputGPIOx, uint16_t OutputGPIO_Pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	461a      	mov	r2, r3
 8001434:	460b      	mov	r3, r1
 8001436:	817b      	strh	r3, [r7, #10]
 8001438:	4613      	mov	r3, r2
 800143a:	813b      	strh	r3, [r7, #8]
	unsigned int tEndTime, tStartTime, tCurrentTime;
	tStartTime = HAL_GetTick();
 800143c:	f001 fb48 	bl	8002ad0 <HAL_GetTick>
 8001440:	61b8      	str	r0, [r7, #24]
	tEndTime = tStartTime + 10000; // end time is 10 seconds in the future
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	f242 7310 	movw	r3, #10000	; 0x2710
 8001448:	4413      	add	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
	tCurrentTime = tStartTime;
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	61fb      	str	r3, [r7, #28]
	GPIO_PinState PinState;

	// while 10 seconds are not yet up
	while (tCurrentTime < tEndTime)
 8001450:	e00f      	b.n	8001472 <LoopBackIoTest+0x4a>
	{
		// sample the input IO
		PinState = HAL_GPIO_ReadPin(InputGPIOx , InputGPIO_Pin);
 8001452:	897b      	ldrh	r3, [r7, #10]
 8001454:	4619      	mov	r1, r3
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f001 fe2e 	bl	80030b8 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	74fb      	strb	r3, [r7, #19]
		HAL_GPIO_WritePin(OutputGPIOx, OutputGPIO_Pin, PinState);
 8001460:	7cfa      	ldrb	r2, [r7, #19]
 8001462:	893b      	ldrh	r3, [r7, #8]
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f001 fe3e 	bl	80030e8 <HAL_GPIO_WritePin>

		// set the output given the input
		tCurrentTime = HAL_GetTick();
 800146c:	f001 fb30 	bl	8002ad0 <HAL_GetTick>
 8001470:	61f8      	str	r0, [r7, #28]
	while (tCurrentTime < tEndTime)
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3eb      	bcc.n	8001452 <LoopBackIoTest+0x2a>
	}

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <LoopBackIoTest+0x70>)
 800147c:	f7fe ff2c 	bl	80002d8 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <LoopBackIoTest+0x70>)
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <LoopBackIoTest+0x74>)
 800148c:	f004 fc26 	bl	8005cdc <HAL_UART_Transmit>
}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	24000000 	.word	0x24000000
 800149c:	24000684 	.word	0x24000684

080014a0 <GPIO_Test>:
	GPIO_TypeDef *GPIOx;
	uint16_t     GPIO_Pin;
} tePinMapping;

static void GPIO_Test(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0c0      	sub	sp, #256	; 0x100
 80014a4:	af00      	add	r7, sp, #0
	tePinMapping teGPIOPinMapping[31] =
 80014a6:	4a75      	ldr	r2, [pc, #468]	; (800167c <GPIO_Test+0x1dc>)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4611      	mov	r1, r2
 80014ac:	22f8      	movs	r2, #248	; 0xf8
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fed2 	bl	8007258 <memcpy>
		{GPIOB, 0x0800},
		{GPIOB, 0x0400},
		{GPIOB, 0x0080},
		{GPIOB, 0x0040}
	};
	int Counter = 0UL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	HAL_UART_Transmit(&huart3, "GPIO Tests, cycling GPIO lines\r\n", 32, 1000);
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	2220      	movs	r2, #32
 80014c0:	496f      	ldr	r1, [pc, #444]	; (8001680 <GPIO_Test+0x1e0>)
 80014c2:	4870      	ldr	r0, [pc, #448]	; (8001684 <GPIO_Test+0x1e4>)
 80014c4:	f004 fc0a 	bl	8005cdc <HAL_UART_Transmit>

	for (Counter = 0UL ; Counter < 31UL ; Counter++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014ce:	e0bf      	b.n	8001650 <GPIO_Test+0x1b0>
	{
		char cCounterChar = (Counter%10) + 48; // convert number to ASCII
 80014d0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80014d4:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <GPIO_Test+0x1e8>)
 80014d6:	fb83 1302 	smull	r1, r3, r3, r2
 80014da:	1099      	asrs	r1, r3, #2
 80014dc:	17d3      	asrs	r3, r2, #31
 80014de:	1ac9      	subs	r1, r1, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	1ad1      	subs	r1, r2, r3
 80014ea:	b2cb      	uxtb	r3, r1
 80014ec:	3330      	adds	r3, #48	; 0x30
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	70fb      	strb	r3, [r7, #3]
		// set one output high
		HAL_UART_Transmit(&huart3, "Setting GPIO output ", 20, 1000);
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	2214      	movs	r2, #20
 80014f8:	4964      	ldr	r1, [pc, #400]	; (800168c <GPIO_Test+0x1ec>)
 80014fa:	4862      	ldr	r0, [pc, #392]	; (8001684 <GPIO_Test+0x1e4>)
 80014fc:	f004 fbee 	bl	8005cdc <HAL_UART_Transmit>
		if ((Counter > 9) && (Counter <= 19))
 8001500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001504:	2b09      	cmp	r3, #9
 8001506:	dd0a      	ble.n	800151e <GPIO_Test+0x7e>
 8001508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800150c:	2b13      	cmp	r3, #19
 800150e:	dc06      	bgt.n	800151e <GPIO_Test+0x7e>
		{
			HAL_UART_Transmit(&huart3, "1", 1, 1000);
 8001510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001514:	2201      	movs	r2, #1
 8001516:	495e      	ldr	r1, [pc, #376]	; (8001690 <GPIO_Test+0x1f0>)
 8001518:	485a      	ldr	r0, [pc, #360]	; (8001684 <GPIO_Test+0x1e4>)
 800151a:	f004 fbdf 	bl	8005cdc <HAL_UART_Transmit>
		}
	    if ((Counter > 19) && (Counter <= 29))
 800151e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001522:	2b13      	cmp	r3, #19
 8001524:	dd0a      	ble.n	800153c <GPIO_Test+0x9c>
 8001526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800152a:	2b1d      	cmp	r3, #29
 800152c:	dc06      	bgt.n	800153c <GPIO_Test+0x9c>
		{
	    	HAL_UART_Transmit(&huart3, "2", 1, 1000);
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	2201      	movs	r2, #1
 8001534:	4957      	ldr	r1, [pc, #348]	; (8001694 <GPIO_Test+0x1f4>)
 8001536:	4853      	ldr	r0, [pc, #332]	; (8001684 <GPIO_Test+0x1e4>)
 8001538:	f004 fbd0 	bl	8005cdc <HAL_UART_Transmit>
		}
	    if (Counter == 30)
 800153c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001540:	2b1e      	cmp	r3, #30
 8001542:	d106      	bne.n	8001552 <GPIO_Test+0xb2>
	    {
	    	HAL_UART_Transmit(&huart3, "3", 1, 1000);
 8001544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001548:	2201      	movs	r2, #1
 800154a:	4953      	ldr	r1, [pc, #332]	; (8001698 <GPIO_Test+0x1f8>)
 800154c:	484d      	ldr	r0, [pc, #308]	; (8001684 <GPIO_Test+0x1e4>)
 800154e:	f004 fbc5 	bl	8005cdc <HAL_UART_Transmit>
	    }
		HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 8001552:	1cf9      	adds	r1, r7, #3
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	2201      	movs	r2, #1
 800155a:	484a      	ldr	r0, [pc, #296]	; (8001684 <GPIO_Test+0x1e4>)
 800155c:	f004 fbbe 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, " high\r\n", 7, 1000);
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	2207      	movs	r2, #7
 8001566:	494d      	ldr	r1, [pc, #308]	; (800169c <GPIO_Test+0x1fc>)
 8001568:	4846      	ldr	r0, [pc, #280]	; (8001684 <GPIO_Test+0x1e4>)
 800156a:	f004 fbb7 	bl	8005cdc <HAL_UART_Transmit>

		HAL_GPIO_WritePin(teGPIOPinMapping[Counter].GPIOx, teGPIOPinMapping[Counter].GPIO_Pin, GPIO_PIN_SET);
 800156e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001578:	4413      	add	r3, r2
 800157a:	f853 0cfc 	ldr.w	r0, [r3, #-252]
 800157e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001588:	4413      	add	r3, r2
 800158a:	f833 3cf8 	ldrh.w	r3, [r3, #-248]
 800158e:	2201      	movs	r2, #1
 8001590:	4619      	mov	r1, r3
 8001592:	f001 fda9 	bl	80030e8 <HAL_GPIO_WritePin>

		// wait for 0.025 seconds
		HAL_Delay(25);
 8001596:	2019      	movs	r0, #25
 8001598:	f001 faa6 	bl	8002ae8 <HAL_Delay>

		// set one output low
		HAL_UART_Transmit(&huart3, "Setting GPIO output ", 20, 1000);
 800159c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a0:	2214      	movs	r2, #20
 80015a2:	493a      	ldr	r1, [pc, #232]	; (800168c <GPIO_Test+0x1ec>)
 80015a4:	4837      	ldr	r0, [pc, #220]	; (8001684 <GPIO_Test+0x1e4>)
 80015a6:	f004 fb99 	bl	8005cdc <HAL_UART_Transmit>
		if ((Counter > 9) && (Counter <= 19))
 80015aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	dd0a      	ble.n	80015c8 <GPIO_Test+0x128>
 80015b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015b6:	2b13      	cmp	r3, #19
 80015b8:	dc06      	bgt.n	80015c8 <GPIO_Test+0x128>
		{
			HAL_UART_Transmit(&huart3, "1", 1, 1000);
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	2201      	movs	r2, #1
 80015c0:	4933      	ldr	r1, [pc, #204]	; (8001690 <GPIO_Test+0x1f0>)
 80015c2:	4830      	ldr	r0, [pc, #192]	; (8001684 <GPIO_Test+0x1e4>)
 80015c4:	f004 fb8a 	bl	8005cdc <HAL_UART_Transmit>
		}
		if ((Counter > 19) && (Counter <= 29))
 80015c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015cc:	2b13      	cmp	r3, #19
 80015ce:	dd0a      	ble.n	80015e6 <GPIO_Test+0x146>
 80015d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015d4:	2b1d      	cmp	r3, #29
 80015d6:	dc06      	bgt.n	80015e6 <GPIO_Test+0x146>
		{
		   	HAL_UART_Transmit(&huart3, "2", 1, 1000);
 80015d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015dc:	2201      	movs	r2, #1
 80015de:	492d      	ldr	r1, [pc, #180]	; (8001694 <GPIO_Test+0x1f4>)
 80015e0:	4828      	ldr	r0, [pc, #160]	; (8001684 <GPIO_Test+0x1e4>)
 80015e2:	f004 fb7b 	bl	8005cdc <HAL_UART_Transmit>
		}
		if (Counter == 30)
 80015e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015ea:	2b1e      	cmp	r3, #30
 80015ec:	d106      	bne.n	80015fc <GPIO_Test+0x15c>
		{
		   	HAL_UART_Transmit(&huart3, "3", 1, 1000);
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	2201      	movs	r2, #1
 80015f4:	4928      	ldr	r1, [pc, #160]	; (8001698 <GPIO_Test+0x1f8>)
 80015f6:	4823      	ldr	r0, [pc, #140]	; (8001684 <GPIO_Test+0x1e4>)
 80015f8:	f004 fb70 	bl	8005cdc <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 80015fc:	1cf9      	adds	r1, r7, #3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	2201      	movs	r2, #1
 8001604:	481f      	ldr	r0, [pc, #124]	; (8001684 <GPIO_Test+0x1e4>)
 8001606:	f004 fb69 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, " low\r\n", 6, 1000);
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	2206      	movs	r2, #6
 8001610:	4923      	ldr	r1, [pc, #140]	; (80016a0 <GPIO_Test+0x200>)
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <GPIO_Test+0x1e4>)
 8001614:	f004 fb62 	bl	8005cdc <HAL_UART_Transmit>

		HAL_GPIO_WritePin(teGPIOPinMapping[Counter].GPIOx, teGPIOPinMapping[Counter].GPIO_Pin, GPIO_PIN_RESET);
 8001618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001622:	4413      	add	r3, r2
 8001624:	f853 0cfc 	ldr.w	r0, [r3, #-252]
 8001628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001632:	4413      	add	r3, r2
 8001634:	f833 3cf8 	ldrh.w	r3, [r3, #-248]
 8001638:	2200      	movs	r2, #0
 800163a:	4619      	mov	r1, r3
 800163c:	f001 fd54 	bl	80030e8 <HAL_GPIO_WritePin>

		// wait for 0.025 seconds
		HAL_Delay(25);
 8001640:	2019      	movs	r0, #25
 8001642:	f001 fa51 	bl	8002ae8 <HAL_Delay>
	for (Counter = 0UL ; Counter < 31UL ; Counter++)
 8001646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800164a:	3301      	adds	r3, #1
 800164c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001654:	2b1e      	cmp	r3, #30
 8001656:	f67f af3b 	bls.w	80014d0 <GPIO_Test+0x30>
	}

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <GPIO_Test+0x204>)
 800165c:	f7fe fe3c 	bl	80002d8 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001668:	490e      	ldr	r1, [pc, #56]	; (80016a4 <GPIO_Test+0x204>)
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <GPIO_Test+0x1e4>)
 800166c:	f004 fb36 	bl	8005cdc <HAL_UART_Transmit>
}
 8001670:	bf00      	nop
 8001672:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	08007b28 	.word	0x08007b28
 8001680:	08007ad0 	.word	0x08007ad0
 8001684:	24000684 	.word	0x24000684
 8001688:	66666667 	.word	0x66666667
 800168c:	08007af4 	.word	0x08007af4
 8001690:	08007b0c 	.word	0x08007b0c
 8001694:	08007b10 	.word	0x08007b10
 8001698:	08007b14 	.word	0x08007b14
 800169c:	08007b18 	.word	0x08007b18
 80016a0:	08007b20 	.word	0x08007b20
 80016a4:	24000000 	.word	0x24000000

080016a8 <ANALOGUE_Test>:

static void ANALOGUE_Test(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b092      	sub	sp, #72	; 0x48
 80016ac:	af00      	add	r7, sp, #0
	int Counter;
	tePinMapping teAnalogueInputPinMapping[8] =
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <ANALOGUE_Test+0x110>)
 80016b0:	1d3c      	adds	r4, r7, #4
 80016b2:	461d      	mov	r5, r3
 80016b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{GPIOC, 0x0008},
			{GPIOC, 0x0001},
			{GPIOC, 0x0002}
		};

	HAL_UART_Transmit(&huart3, "\r\nAnalogue Input Tests, cycling through Inputs\r\n", 48, 1000);
 80016c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016cc:	2230      	movs	r2, #48	; 0x30
 80016ce:	493b      	ldr	r1, [pc, #236]	; (80017bc <ANALOGUE_Test+0x114>)
 80016d0:	483b      	ldr	r0, [pc, #236]	; (80017c0 <ANALOGUE_Test+0x118>)
 80016d2:	f004 fb03 	bl	8005cdc <HAL_UART_Transmit>

	for (Counter = 0UL ; Counter < 8UL ; Counter++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
 80016da:	e05b      	b.n	8001794 <ANALOGUE_Test+0xec>
	{
		char cCounterChar = Counter + 48; // convert number to ASCII
 80016dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3330      	adds	r3, #48	; 0x30
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	70fb      	strb	r3, [r7, #3]
		// set one output high
		HAL_UART_Transmit(&huart3, "Setting analogue input ", 23, 1000);
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	2217      	movs	r2, #23
 80016ec:	4935      	ldr	r1, [pc, #212]	; (80017c4 <ANALOGUE_Test+0x11c>)
 80016ee:	4834      	ldr	r0, [pc, #208]	; (80017c0 <ANALOGUE_Test+0x118>)
 80016f0:	f004 faf4 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 80016f4:	1cf9      	adds	r1, r7, #3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	2201      	movs	r2, #1
 80016fc:	4830      	ldr	r0, [pc, #192]	; (80017c0 <ANALOGUE_Test+0x118>)
 80016fe:	f004 faed 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, " high\r\n", 7, 1000);
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	2207      	movs	r2, #7
 8001708:	492f      	ldr	r1, [pc, #188]	; (80017c8 <ANALOGUE_Test+0x120>)
 800170a:	482d      	ldr	r0, [pc, #180]	; (80017c0 <ANALOGUE_Test+0x118>)
 800170c:	f004 fae6 	bl	8005cdc <HAL_UART_Transmit>

		HAL_GPIO_WritePin(teAnalogueInputPinMapping[Counter].GPIOx, teAnalogueInputPinMapping[Counter].GPIO_Pin, GPIO_PIN_SET);
 8001710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001718:	4413      	add	r3, r2
 800171a:	f853 0c44 	ldr.w	r0, [r3, #-68]
 800171e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001726:	4413      	add	r3, r2
 8001728:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 800172c:	2201      	movs	r2, #1
 800172e:	4619      	mov	r1, r3
 8001730:	f001 fcda 	bl	80030e8 <HAL_GPIO_WritePin>
		// wait for 0.25 seconds
		HAL_Delay(250);
 8001734:	20fa      	movs	r0, #250	; 0xfa
 8001736:	f001 f9d7 	bl	8002ae8 <HAL_Delay>
		// set one output low
		HAL_UART_Transmit(&huart3, "Setting analogue input ", 23, 1000);
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	2217      	movs	r2, #23
 8001740:	4920      	ldr	r1, [pc, #128]	; (80017c4 <ANALOGUE_Test+0x11c>)
 8001742:	481f      	ldr	r0, [pc, #124]	; (80017c0 <ANALOGUE_Test+0x118>)
 8001744:	f004 faca 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, &cCounterChar, 1, 1000);
 8001748:	1cf9      	adds	r1, r7, #3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	2201      	movs	r2, #1
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <ANALOGUE_Test+0x118>)
 8001752:	f004 fac3 	bl	8005cdc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, " low\r\n", 6, 1000);
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	2206      	movs	r2, #6
 800175c:	491b      	ldr	r1, [pc, #108]	; (80017cc <ANALOGUE_Test+0x124>)
 800175e:	4818      	ldr	r0, [pc, #96]	; (80017c0 <ANALOGUE_Test+0x118>)
 8001760:	f004 fabc 	bl	8005cdc <HAL_UART_Transmit>
		HAL_GPIO_WritePin(teAnalogueInputPinMapping[Counter].GPIOx, teAnalogueInputPinMapping[Counter].GPIO_Pin, GPIO_PIN_RESET);
 8001764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800176c:	4413      	add	r3, r2
 800176e:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8001772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800177a:	4413      	add	r3, r2
 800177c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	f001 fcb0 	bl	80030e8 <HAL_GPIO_WritePin>
		// wait for 0.25 seconds
		HAL_Delay(250);
 8001788:	20fa      	movs	r0, #250	; 0xfa
 800178a:	f001 f9ad 	bl	8002ae8 <HAL_Delay>
	for (Counter = 0UL ; Counter < 8UL ; Counter++)
 800178e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001790:	3301      	adds	r3, #1
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
 8001794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001796:	2b07      	cmp	r3, #7
 8001798:	d9a0      	bls.n	80016dc <ANALOGUE_Test+0x34>
	}
	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <ANALOGUE_Test+0x128>)
 800179c:	f7fe fd9c 	bl	80002d8 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a8:	4909      	ldr	r1, [pc, #36]	; (80017d0 <ANALOGUE_Test+0x128>)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <ANALOGUE_Test+0x118>)
 80017ac:	f004 fa96 	bl	8005cdc <HAL_UART_Transmit>

}
 80017b0:	bf00      	nop
 80017b2:	3748      	adds	r7, #72	; 0x48
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	08007c6c 	.word	0x08007c6c
 80017bc:	08007c20 	.word	0x08007c20
 80017c0:	24000684 	.word	0x24000684
 80017c4:	08007c54 	.word	0x08007c54
 80017c8:	08007b18 	.word	0x08007b18
 80017cc:	08007b20 	.word	0x08007b20
 80017d0:	24000000 	.word	0x24000000

080017d4 <PPS_Test>:

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
}

void PPS_Test(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, "PPS test, high and low 10 times @ 1Hz\r\n", 39, 1000);
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	2227      	movs	r2, #39	; 0x27
 80017e0:	4917      	ldr	r1, [pc, #92]	; (8001840 <PPS_Test+0x6c>)
 80017e2:	4818      	ldr	r0, [pc, #96]	; (8001844 <PPS_Test+0x70>)
 80017e4:	f004 fa7a 	bl	8005cdc <HAL_UART_Transmit>

	for (int i = 0 ; i < 10 ; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e016      	b.n	800181c <PPS_Test+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, 0x2000, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f4:	4814      	ldr	r0, [pc, #80]	; (8001848 <PPS_Test+0x74>)
 80017f6:	f001 fc77 	bl	80030e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80017fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fe:	f001 f973 	bl	8002ae8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, 0x2000, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <PPS_Test+0x74>)
 800180a:	f001 fc6d 	bl	80030e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800180e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001812:	f001 f969 	bl	8002ae8 <HAL_Delay>
	for (int i = 0 ; i < 10 ; i++)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b09      	cmp	r3, #9
 8001820:	dde5      	ble.n	80017ee <PPS_Test+0x1a>
	}

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 8001822:	480a      	ldr	r0, [pc, #40]	; (800184c <PPS_Test+0x78>)
 8001824:	f7fe fd58 	bl	80002d8 <strlen>
 8001828:	4603      	mov	r3, r0
 800182a:	b29a      	uxth	r2, r3
 800182c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <PPS_Test+0x78>)
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <PPS_Test+0x70>)
 8001834:	f004 fa52 	bl	8005cdc <HAL_UART_Transmit>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	08007da8 	.word	0x08007da8
 8001844:	24000684 	.word	0x24000684
 8001848:	58020800 	.word	0x58020800
 800184c:	24000000 	.word	0x24000000

08001850 <MRAM_WriteTest>:

// nW controlled write access

// 64 MHz: FMC clock drive fmc_ker_ck ** I think **
void MRAM_WriteTest(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
	// initialise the FMC to talk to the MRAM
	HAL_UART_Transmit(&huart3, "Intialising the FMC to connect the MRAM\r\n", 41, 1000);
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	2229      	movs	r2, #41	; 0x29
 800185c:	492e      	ldr	r1, [pc, #184]	; (8001918 <MRAM_WriteTest+0xc8>)
 800185e:	482f      	ldr	r0, [pc, #188]	; (800191c <MRAM_WriteTest+0xcc>)
 8001860:	f004 fa3c 	bl	8005cdc <HAL_UART_Transmit>

	// FMC bank 1 registers
	int *piFMC_BCR1 = 0x52004000;
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MRAM_WriteTest+0xd0>)
 8001866:	60bb      	str	r3, [r7, #8]

	int *piFMC_BTR1 = 0x52004004;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <MRAM_WriteTest+0xd4>)
 800186a:	607b      	str	r3, [r7, #4]

	// pointer to the MRAM
	unsigned short *piMRAM = MRAM_START_ADDRESS;
 800186c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001870:	617b      	str	r3, [r7, #20]

	unsigned short Value = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	827b      	strh	r3, [r7, #18]
	unsigned int iLoopCounter = 0UL;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]


	//HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
    // set the BTR register to 00000000000000000000000100000010 (binary) 0x00000102 (hex)
	// See the above commentry for justification
	*piFMC_BTR1 = 0x00000202UL;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f240 2202 	movw	r2, #514	; 0x202
 8001880:	601a      	str	r2, [r3, #0]
	//*piFMC_BTR1 = 0x0000FF02UL;
	// Set the BCR register to 1000 0010 1010 0000 0001 0000 1001 0001 (binary) 0x80201091 (hex)
	// See the above commentry for justification
	*piFMC_BCR1 = 0x81201091UL;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4a28      	ldr	r2, [pc, #160]	; (8001928 <MRAM_WriteTest+0xd8>)
 8001886:	601a      	str	r2, [r3, #0]

	// Write a pattern into the memory
	// the board has 8 million bytes of memory. starting at location 0x60000000
	// so the memory extends from 0x60000000 to 0x607A1200
	// Place data into the memory in 1000 byte chunks (pattern 0,1,2.....), start the next chunk at the next number (pattern 1,2,3.....)
	HAL_UART_Transmit(&huart3, "Writing next 1000 bytes\r\n", 25, 1000);
 8001888:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188c:	2219      	movs	r2, #25
 800188e:	4927      	ldr	r1, [pc, #156]	; (800192c <MRAM_WriteTest+0xdc>)
 8001890:	4822      	ldr	r0, [pc, #136]	; (800191c <MRAM_WriteTest+0xcc>)
 8001892:	f004 fa23 	bl	8005cdc <HAL_UART_Transmit>
	while (piMRAM < (MRAM_START_ADDRESS + MRAM_SIZE))
 8001896:	e02b      	b.n	80018f0 <MRAM_WriteTest+0xa0>
	{
		// set the value in the location and move to next 16 bits.
		*piMRAM = Value;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	8a7a      	ldrh	r2, [r7, #18]
 800189c:	801a      	strh	r2, [r3, #0]
		Value++;
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	3301      	adds	r3, #1
 80018a2:	827b      	strh	r3, [r7, #18]
		piMRAM++;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3302      	adds	r3, #2
 80018a8:	617b      	str	r3, [r7, #20]
		iLoopCounter++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]

		// every 1000 locations, start the sequence again, starting at a value above the last start value.
		if ((iLoopCounter % 1000) == 0)
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MRAM_WriteTest+0xe0>)
 80018b4:	fba3 1302 	umull	r1, r3, r3, r2
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d113      	bne.n	80018f0 <MRAM_WriteTest+0xa0>
		{
			HAL_UART_Transmit(&huart3, "Writing next 1000 bytes\r\n", 25, 1000);
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	2219      	movs	r2, #25
 80018ce:	4917      	ldr	r1, [pc, #92]	; (800192c <MRAM_WriteTest+0xdc>)
 80018d0:	4812      	ldr	r0, [pc, #72]	; (800191c <MRAM_WriteTest+0xcc>)
 80018d2:	f004 fa03 	bl	8005cdc <HAL_UART_Transmit>
			Value = (iLoopCounter / 1000)*1000;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MRAM_WriteTest+0xe0>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	0152      	lsls	r2, r2, #5
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	827b      	strh	r3, [r7, #18]
	while (piMRAM < (MRAM_START_ADDRESS + MRAM_SIZE))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f06f 527e 	mvn.w	r2, #1065353216	; 0x3f800000
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d3ce      	bcc.n	8001898 <MRAM_WriteTest+0x48>
		}
	}

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <MRAM_WriteTest+0xe4>)
 80018fc:	f7fe fcec 	bl	80002d8 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	b29a      	uxth	r2, r3
 8001904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001908:	490a      	ldr	r1, [pc, #40]	; (8001934 <MRAM_WriteTest+0xe4>)
 800190a:	4804      	ldr	r0, [pc, #16]	; (800191c <MRAM_WriteTest+0xcc>)
 800190c:	f004 f9e6 	bl	8005cdc <HAL_UART_Transmit>
}
 8001910:	bf00      	nop
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	080079f0 	.word	0x080079f0
 800191c:	24000684 	.word	0x24000684
 8001920:	52004000 	.word	0x52004000
 8001924:	52004004 	.word	0x52004004
 8001928:	81201091 	.word	0x81201091
 800192c:	08007dd0 	.word	0x08007dd0
 8001930:	10624dd3 	.word	0x10624dd3
 8001934:	24000000 	.word	0x24000000

08001938 <MRAM_ReadTest>:

// reads the data written to by the write function
void MRAM_ReadTest(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
	// pointer to the MRAM
	unsigned short *piMRAM = MRAM_START_ADDRESS;
 800193e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001942:	61fb      	str	r3, [r7, #28]
	unsigned int bProblem = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]

	// FMC bank 1 registers
	int *piFMC_BCR1 = 0x52004000;
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <MRAM_ReadTest+0x100>)
 800194a:	60fb      	str	r3, [r7, #12]

	int *piFMC_BTR1 = 0x52004004;
 800194c:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <MRAM_ReadTest+0x104>)
 800194e:	60bb      	str	r3, [r7, #8]

	unsigned short ExpectedValue = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	82fb      	strh	r3, [r7, #22]
	unsigned short ActualValue = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	80fb      	strh	r3, [r7, #6]
	unsigned int iLoopCounter = 0UL;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]

	// set the BTR register to 00000000000000000000000100000010 (binary) 0x00000102 (hex)
	// See the above commentry for justification
	//*piFMC_BTR1 = 0x00000202UL;
	*piFMC_BTR1 = 0x00000202UL;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f240 2202 	movw	r2, #514	; 0x202
 8001962:	601a      	str	r2, [r3, #0]
	// Set the BCR register to 1000 0000 0010 0000 0001 0000 1001 0001 (binary) 0x80201091 (hex)
	// See the above commentry for justification
	*piFMC_BCR1 = 0x81201091UL;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <MRAM_ReadTest+0x108>)
 8001968:	601a      	str	r2, [r3, #0]

	// Reading a pattern from the memory
	// the board has 8 million bytes of memory. starting at location 0x60000000
	// so the memory extends from 0x60000000 to 0x607A1200
	// Read data from the memory in 1000 byte chunks (pattern 0,1,2.....), start the next chunk at the next number (pattern 1,2,3.....)
	HAL_UART_Transmit(&huart3, "Reading next 1000 bytes\r\n", 24, 1000);
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	2218      	movs	r2, #24
 8001970:	4934      	ldr	r1, [pc, #208]	; (8001a44 <MRAM_ReadTest+0x10c>)
 8001972:	4835      	ldr	r0, [pc, #212]	; (8001a48 <MRAM_ReadTest+0x110>)
 8001974:	f004 f9b2 	bl	8005cdc <HAL_UART_Transmit>

	while (piMRAM < (MRAM_START_ADDRESS + MRAM_SIZE))
 8001978:	e038      	b.n	80019ec <MRAM_ReadTest+0xb4>
	{
		// set the value in the location and move to next 16 bits.
		ActualValue = *piMRAM;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	80fb      	strh	r3, [r7, #6]

		// compare actual with expected value
		if (ActualValue != ExpectedValue)
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	8afb      	ldrh	r3, [r7, #22]
 8001984:	429a      	cmp	r2, r3
 8001986:	d008      	beq.n	800199a <MRAM_ReadTest+0x62>
		{
			HAL_UART_Transmit(&huart3, "Error reading data\r\n", 20, 1000);
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	2214      	movs	r2, #20
 800198e:	492f      	ldr	r1, [pc, #188]	; (8001a4c <MRAM_ReadTest+0x114>)
 8001990:	482d      	ldr	r0, [pc, #180]	; (8001a48 <MRAM_ReadTest+0x110>)
 8001992:	f004 f9a3 	bl	8005cdc <HAL_UART_Transmit>
			bProblem = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
		}
		ExpectedValue++;
 800199a:	8afb      	ldrh	r3, [r7, #22]
 800199c:	3301      	adds	r3, #1
 800199e:	82fb      	strh	r3, [r7, #22]
		piMRAM++;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3302      	adds	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
		iLoopCounter++;
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	3301      	adds	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]

		// every 1000 locations, start the sequence again, starting at a value above the last start value.
		if ((iLoopCounter % 1000) == 0)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <MRAM_ReadTest+0x118>)
 80019b0:	fba3 1302 	umull	r1, r3, r3, r2
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d113      	bne.n	80019ec <MRAM_ReadTest+0xb4>
		{
			HAL_UART_Transmit(&huart3, "Reading next 1000 bytes\r\n", 25, 1000);
 80019c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c8:	2219      	movs	r2, #25
 80019ca:	491e      	ldr	r1, [pc, #120]	; (8001a44 <MRAM_ReadTest+0x10c>)
 80019cc:	481e      	ldr	r0, [pc, #120]	; (8001a48 <MRAM_ReadTest+0x110>)
 80019ce:	f004 f985 	bl	8005cdc <HAL_UART_Transmit>
			ExpectedValue = (unsigned short)(iLoopCounter / 1000)*1000;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <MRAM_ReadTest+0x118>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	0152      	lsls	r2, r2, #5
 80019e2:	1ad2      	subs	r2, r2, r3
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	82fb      	strh	r3, [r7, #22]
	while (piMRAM < (MRAM_START_ADDRESS + MRAM_SIZE))
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f06f 527e 	mvn.w	r2, #1065353216	; 0x3f800000
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d3c1      	bcc.n	800197a <MRAM_ReadTest+0x42>
		}
	}
	if (bProblem == 1)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <MRAM_ReadTest+0xd4>
	{
		HAL_UART_Transmit(&huart3, "ERROR READING MEMORY\r\n", 22, 1000);
 80019fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a00:	2216      	movs	r2, #22
 8001a02:	4914      	ldr	r1, [pc, #80]	; (8001a54 <MRAM_ReadTest+0x11c>)
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <MRAM_ReadTest+0x110>)
 8001a06:	f004 f969 	bl	8005cdc <HAL_UART_Transmit>
 8001a0a:	e006      	b.n	8001a1a <MRAM_ReadTest+0xe2>
	}
	else
	{
		HAL_UART_Transmit(&huart3, "MEMORY ALL OK\r\n", 15, 1000);
 8001a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a10:	220f      	movs	r2, #15
 8001a12:	4911      	ldr	r1, [pc, #68]	; (8001a58 <MRAM_ReadTest+0x120>)
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <MRAM_ReadTest+0x110>)
 8001a16:	f004 f961 	bl	8005cdc <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart3, pcSplashScreen, strlen(pcSplashScreen), 1000);
 8001a1a:	4810      	ldr	r0, [pc, #64]	; (8001a5c <MRAM_ReadTest+0x124>)
 8001a1c:	f7fe fc5c 	bl	80002d8 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <MRAM_ReadTest+0x124>)
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MRAM_ReadTest+0x110>)
 8001a2c:	f004 f956 	bl	8005cdc <HAL_UART_Transmit>
}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	52004000 	.word	0x52004000
 8001a3c:	52004004 	.word	0x52004004
 8001a40:	81201091 	.word	0x81201091
 8001a44:	08007dec 	.word	0x08007dec
 8001a48:	24000684 	.word	0x24000684
 8001a4c:	08007e08 	.word	0x08007e08
 8001a50:	10624dd3 	.word	0x10624dd3
 8001a54:	08007e20 	.word	0x08007e20
 8001a58:	08007e38 	.word	0x08007e38
 8001a5c:	24000000 	.word	0x24000000

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09c      	sub	sp, #112	; 0x70
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	224c      	movs	r2, #76	; 0x4c
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fc00 	bl	8007274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2220      	movs	r2, #32
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fbfa 	bl	8007274 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f001 fb75 	bl	8003170 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <SystemClock_Config+0x134>)
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	4a41      	ldr	r2, [pc, #260]	; (8001b94 <SystemClock_Config+0x134>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a96:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <SystemClock_Config+0x134>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <SystemClock_Config+0x138>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <SystemClock_Config+0x138>)
 8001aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <SystemClock_Config+0x138>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001abc:	bf00      	nop
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <SystemClock_Config+0x138>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aca:	d1f8      	bne.n	8001abe <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001acc:	f001 fb40 	bl	8003150 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ad0:	f001 f82e 	bl	8002b30 <HAL_GetREVID>
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <SystemClock_Config+0x13c>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <SystemClock_Config+0x13c>)
 8001ada:	f023 0318 	bic.w	r3, r3, #24
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aea:	2301      	movs	r3, #1
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001af6:	2301      	movs	r3, #1
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b02:	2304      	movs	r3, #4
 8001b04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001b06:	2309      	movs	r3, #9
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b16:	230c      	movs	r3, #12
 8001b18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001b1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b22:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 fb5b 	bl	80031e4 <HAL_RCC_OscConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b34:	f000 fc32 	bl	800239c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b38:	233f      	movs	r3, #63	; 0x3f
 8001b3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b4c:	2340      	movs	r3, #64	; 0x40
 8001b4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b56:	2340      	movs	r3, #64	; 0x40
 8001b58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 ff6c 	bl	8003a3c <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001b6a:	f000 fc17 	bl	800239c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
 8001b6e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b76:	2000      	movs	r0, #0
 8001b78:	f002 f916 	bl	8003da8 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 8001b7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b84:	2001      	movs	r0, #1
 8001b86:	f002 f90f 	bl	8003da8 <HAL_RCC_MCOConfig>
}
 8001b8a:	bf00      	nop
 8001b8c:	3770      	adds	r7, #112	; 0x70
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	58000400 	.word	0x58000400
 8001b98:	58024800 	.word	0x58024800
 8001b9c:	58024400 	.word	0x58024400

08001ba0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <MX_RTC_Init+0x60>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bb2:	227f      	movs	r2, #127	; 0x7f
 8001bb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bd6:	f003 fe89 	bl	80058ec <HAL_RTC_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001be0:	f000 fbdc 	bl	800239c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8001be4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_RTC_Init+0x5c>)
 8001bea:	f003 ff8f 	bl	8005b0c <HAL_RTCEx_SetCalibrationOutPut>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001bf4:	f000 fbd2 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	240008c0 	.word	0x240008c0
 8001c00:	58004000 	.word	0x58004000

08001c04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c08:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <MX_UART4_Init+0x94>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c4e:	f003 fff5 	bl	8005c3c <HAL_UART_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c58:	f000 fba0 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c60:	f005 f8f4 	bl	8006e4c <HAL_UARTEx_SetTxFifoThreshold>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c6a:	f000 fb97 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4808      	ldr	r0, [pc, #32]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c72:	f005 f929 	bl	8006ec8 <HAL_UARTEx_SetRxFifoThreshold>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c7c:	f000 fb8e 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_UART4_Init+0x90>)
 8001c82:	f005 f8aa 	bl	8006dda <HAL_UARTEx_DisableFifoMode>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c8c:	f000 fb86 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000984 	.word	0x24000984
 8001c98:	40004c00 	.word	0x40004c00

08001c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <MX_USART2_UART_Init+0x94>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce4:	4811      	ldr	r0, [pc, #68]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001ce6:	f003 ffa9 	bl	8005c3c <HAL_UART_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001cf0:	f000 fb54 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001cf8:	f005 f8a8 	bl	8006e4c <HAL_UARTEx_SetTxFifoThreshold>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d02:	f000 fb4b 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d06:	2100      	movs	r1, #0
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001d0a:	f005 f8dd 	bl	8006ec8 <HAL_UARTEx_SetRxFifoThreshold>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d14:	f000 fb42 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_USART2_UART_Init+0x90>)
 8001d1a:	f005 f85e 	bl	8006dda <HAL_UARTEx_DisableFifoMode>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d24:	f000 fb3a 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	24000a9c 	.word	0x24000a9c
 8001d30:	40004400 	.word	0x40004400

08001d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d3a:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <MX_USART3_UART_Init+0x94>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d3e:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d7c:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d7e:	f003 ff5d 	bl	8005c3c <HAL_UART_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d88:	f000 fb08 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001d90:	f005 f85c 	bl	8006e4c <HAL_UARTEx_SetTxFifoThreshold>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d9a:	f000 faff 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001da2:	f005 f891 	bl	8006ec8 <HAL_UARTEx_SetRxFifoThreshold>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001dac:	f000 faf6 	bl	800239c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_USART3_UART_Init+0x90>)
 8001db2:	f005 f812 	bl	8006dda <HAL_UARTEx_DisableFifoMode>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dbc:	f000 faee 	bl	800239c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	24000684 	.word	0x24000684
 8001dc8:	40004800 	.word	0x40004800

08001dcc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <MX_FMC_Init+0xbc>)
 8001de8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <MX_FMC_Init+0xc0>)
 8001dee:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e04:	2210      	movs	r2, #16
 8001e06:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001e4e:	230f      	movs	r3, #15
 8001e50:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001e52:	23ff      	movs	r3, #255	; 0xff
 8001e54:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001e56:	230f      	movs	r3, #15
 8001e58:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001e5e:	2311      	movs	r3, #17
 8001e60:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_FMC_Init+0xb8>)
 8001e6e:	f003 fe95 	bl	8005b9c <HAL_SRAM_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_FMC_Init+0xb0>
  {
    Error_Handler( );
 8001e78:	f000 fa90 	bl	800239c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	240007ac 	.word	0x240007ac
 8001e88:	52004000 	.word	0x52004000
 8001e8c:	52004104 	.word	0x52004104

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea6:	4bc1      	ldr	r3, [pc, #772]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	4abf      	ldr	r2, [pc, #764]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb6:	4bbd      	ldr	r3, [pc, #756]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	4bb9      	ldr	r3, [pc, #740]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eca:	4ab8      	ldr	r2, [pc, #736]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed4:	4bb5      	ldr	r3, [pc, #724]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee2:	4bb2      	ldr	r3, [pc, #712]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	4ab0      	ldr	r2, [pc, #704]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001eea:	f043 0320 	orr.w	r3, r3, #32
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef2:	4bae      	ldr	r3, [pc, #696]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f00:	4baa      	ldr	r3, [pc, #680]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	4aa9      	ldr	r2, [pc, #676]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f10:	4ba6      	ldr	r3, [pc, #664]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4ba3      	ldr	r3, [pc, #652]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	4aa1      	ldr	r2, [pc, #644]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2e:	4b9f      	ldr	r3, [pc, #636]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b9b      	ldr	r3, [pc, #620]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f42:	4a9a      	ldr	r2, [pc, #616]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4c:	4b97      	ldr	r3, [pc, #604]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f5a:	4b94      	ldr	r3, [pc, #592]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	4a92      	ldr	r2, [pc, #584]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6a:	4b90      	ldr	r3, [pc, #576]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	4a8b      	ldr	r2, [pc, #556]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f88:	4b88      	ldr	r3, [pc, #544]	; (80021ac <MX_GPIO_Init+0x31c>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8001f9c:	4884      	ldr	r0, [pc, #528]	; (80021b0 <MX_GPIO_Init+0x320>)
 8001f9e:	f001 f8a3 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001fa8:	4882      	ldr	r0, [pc, #520]	; (80021b4 <MX_GPIO_Init+0x324>)
 8001faa:	f001 f89d 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f24c 0120 	movw	r1, #49184	; 0xc020
 8001fb4:	4880      	ldr	r0, [pc, #512]	; (80021b8 <MX_GPIO_Init+0x328>)
 8001fb6:	f001 f897 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f244 11c0 	movw	r1, #16832	; 0x41c0
 8001fc0:	487e      	ldr	r0, [pc, #504]	; (80021bc <MX_GPIO_Init+0x32c>)
 8001fc2:	f001 f891 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fcc:	487c      	ldr	r0, [pc, #496]	; (80021c0 <MX_GPIO_Init+0x330>)
 8001fce:	f001 f88b 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE0 and PE1*/
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4876      	ldr	r0, [pc, #472]	; (80021c4 <MX_GPIO_Init+0x334>)
 8001fea:	f000 feb5 	bl	8002d58 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	4874      	ldr	r0, [pc, #464]	; (80021c4 <MX_GPIO_Init+0x334>)
 8001ff4:	f001 f878 	bl	80030e8 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PA9 (DI6)*/
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	486b      	ldr	r0, [pc, #428]	; (80021c0 <MX_GPIO_Init+0x330>)
 8002012:	f000 fea1 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002016:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202c:	4619      	mov	r1, r3
 800202e:	4860      	ldr	r0, [pc, #384]	; (80021b0 <MX_GPIO_Init+0x320>)
 8002030:	f000 fe92 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	4619      	mov	r1, r3
 8002048:	4859      	ldr	r0, [pc, #356]	; (80021b0 <MX_GPIO_Init+0x320>)
 800204a:	f000 fe85 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800204e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	4619      	mov	r1, r3
 8002062:	4857      	ldr	r0, [pc, #348]	; (80021c0 <MX_GPIO_Init+0x330>)
 8002064:	f000 fe78 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	484c      	ldr	r0, [pc, #304]	; (80021b4 <MX_GPIO_Init+0x324>)
 8002082:	f000 fe69 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002086:	2304      	movs	r3, #4
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	4619      	mov	r1, r3
 8002098:	4847      	ldr	r0, [pc, #284]	; (80021b8 <MX_GPIO_Init+0x328>)
 800209a:	f000 fe5d 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 800209e:	f24c 0320 	movw	r3, #49184	; 0xc020
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4840      	ldr	r0, [pc, #256]	; (80021b8 <MX_GPIO_Init+0x328>)
 80020b8:	f000 fe4e 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_14;
 80020bc:	f244 13c0 	movw	r3, #16832	; 0x41c0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4839      	ldr	r0, [pc, #228]	; (80021bc <MX_GPIO_Init+0x32c>)
 80020d6:	f000 fe3f 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 & PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 80020da:	2350      	movs	r3, #80	; 0x50
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	4831      	ldr	r0, [pc, #196]	; (80021b4 <MX_GPIO_Init+0x324>)
 80020ee:	f000 fe33 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC12 */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80020f2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	482b      	ldr	r0, [pc, #172]	; (80021b4 <MX_GPIO_Init+0x324>)
 8002108:	f000 fe26 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800210c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	4826      	ldr	r0, [pc, #152]	; (80021c0 <MX_GPIO_Init+0x330>)
 8002126:	f000 fe17 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD3 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 800212a:	234c      	movs	r3, #76	; 0x4c
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213a:	4619      	mov	r1, r3
 800213c:	4822      	ldr	r0, [pc, #136]	; (80021c8 <MX_GPIO_Init+0x338>)
 800213e:	f000 fe0b 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_15;
 8002142:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002148:	2301      	movs	r3, #1
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002154:	4619      	mov	r1, r3
 8002156:	4819      	ldr	r0, [pc, #100]	; (80021bc <MX_GPIO_Init+0x32c>)
 8002158:	f000 fdfe 	bl	8002d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800216a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216e:	4619      	mov	r1, r3
 8002170:	4812      	ldr	r0, [pc, #72]	; (80021bc <MX_GPIO_Init+0x32c>)
 8002172:	f000 fdf1 	bl	8002d58 <HAL_GPIO_Init>

  /* configure

  /*Configure GPIO pin: PB6,7,8,9,10,11 as GP Output... all the I2C busses.*/
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
 8002176:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <MX_GPIO_Init+0x328>)
 800218c:	f000 fde4 	bl	8002d58 <HAL_GPIO_Init>

  /* configure the analogue inputs to be run as outputs */
  // PA6
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_GPIO_Init+0x330>)
 80021a4:	f000 fdd8 	bl	8002d58 <HAL_GPIO_Init>

  // PB1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021a8:	2302      	movs	r3, #2
 80021aa:	e00f      	b.n	80021cc <MX_GPIO_Init+0x33c>
 80021ac:	58024400 	.word	0x58024400
 80021b0:	58021400 	.word	0x58021400
 80021b4:	58020800 	.word	0x58020800
 80021b8:	58020400 	.word	0x58020400
 80021bc:	58021800 	.word	0x58021800
 80021c0:	58020000 	.word	0x58020000
 80021c4:	58021000 	.word	0x58021000
 80021c8:	58020c00 	.word	0x58020c00
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	4868      	ldr	r0, [pc, #416]	; (8002380 <MX_GPIO_Init+0x4f0>)
 80021de:	f000 fdbb 	bl	8002d58 <HAL_GPIO_Init>

  // PC0,1,2,3,5
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 |GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5;
 80021e2:	232f      	movs	r3, #47	; 0x2f
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4863      	ldr	r0, [pc, #396]	; (8002384 <MX_GPIO_Init+0x4f4>)
 80021f6:	f000 fdaf 	bl	8002d58 <HAL_GPIO_Init>

  // PF9,11
  GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11;
 80021fa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220c:	4619      	mov	r1, r3
 800220e:	485e      	ldr	r0, [pc, #376]	; (8002388 <MX_GPIO_Init+0x4f8>)
 8002210:	f000 fda2 	bl	8002d58 <HAL_GPIO_Init>

  // PG10,11 (NSS SCLK)
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8002214:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4858      	ldr	r0, [pc, #352]	; (800238c <MX_GPIO_Init+0x4fc>)
 800222a:	f000 fd95 	bl	8002d58 <HAL_GPIO_Init>

  // PD7 (MOSI)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002232:	2301      	movs	r3, #1
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223e:	4619      	mov	r1, r3
 8002240:	4853      	ldr	r0, [pc, #332]	; (8002390 <MX_GPIO_Init+0x500>)
 8002242:	f000 fd89 	bl	8002d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
                            |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                            |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                            |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002258:	230c      	movs	r3, #12
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	484c      	ldr	r0, [pc, #304]	; (8002394 <MX_GPIO_Init+0x504>)
 8002264:	f000 fd78 	bl	8002d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002268:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
                            |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                            |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800227a:	230c      	movs	r3, #12
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	4840      	ldr	r0, [pc, #256]	; (8002388 <MX_GPIO_Init+0x4f8>)
 8002286:	f000 fd67 	bl	8002d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800228a:	f242 033f 	movw	r3, #8255	; 0x203f
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
                            |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800229c:	230c      	movs	r3, #12
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	4839      	ldr	r0, [pc, #228]	; (800238c <MX_GPIO_Init+0x4fc>)
 80022a8:	f000 fd56 	bl	8002d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80022ac:	f64f 7333 	movw	r3, #65331	; 0xff33
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
                            |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                            |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022be:	230c      	movs	r3, #12
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	4831      	ldr	r0, [pc, #196]	; (8002390 <MX_GPIO_Init+0x500>)
 80022ca:	f000 fd45 	bl	8002d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80022de:	2309      	movs	r3, #9
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4826      	ldr	r0, [pc, #152]	; (8002384 <MX_GPIO_Init+0x4f4>)
 80022ea:	f000 fd35 	bl	8002d58 <HAL_GPIO_Init>
	
	/*Configure GPIO pin : PC9 */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002300:	2300      	movs	r3, #0
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002308:	4619      	mov	r1, r3
 800230a:	481e      	ldr	r0, [pc, #120]	; (8002384 <MX_GPIO_Init+0x4f4>)
 800230c:	f000 fd24 	bl	8002d58 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	481a      	ldr	r0, [pc, #104]	; (8002398 <MX_GPIO_Init+0x508>)
 800232e:	f000 fd13 	bl	8002d58 <HAL_GPIO_Init>

    // initialise CAN2 pins
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002332:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002344:	2309      	movs	r3, #9
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	480c      	ldr	r0, [pc, #48]	; (8002380 <MX_GPIO_Init+0x4f0>)
 8002350:	f000 fd02 	bl	8002d58 <HAL_GPIO_Init>

    // initialise CAN1 pins
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002354:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002366:	2309      	movs	r3, #9
 8002368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236e:	4619      	mov	r1, r3
 8002370:	4809      	ldr	r0, [pc, #36]	; (8002398 <MX_GPIO_Init+0x508>)
 8002372:	f000 fcf1 	bl	8002d58 <HAL_GPIO_Init>


}
 8002376:	bf00      	nop
 8002378:	3738      	adds	r7, #56	; 0x38
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	58020400 	.word	0x58020400
 8002384:	58020800 	.word	0x58020800
 8002388:	58021400 	.word	0x58021400
 800238c:	58021800 	.word	0x58021800
 8002390:	58020c00 	.word	0x58020c00
 8002394:	58021000 	.word	0x58021000
 8002398:	58020000 	.word	0x58020000

0800239c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <Error_Handler+0x8>
	...

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_MspInit+0x54>)
 80023b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023b4:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_MspInit+0x54>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_MspInit+0x54>)
 80023c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_MspInit+0x54>)
 80023ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_MspInit+0x54>)
 80023d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_MspInit+0x54>)
 80023de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80023ea:	f000 fbc1 	bl	8002b70 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80023ee:	2002      	movs	r0, #2
 80023f0:	f000 fbaa 	bl	8002b48 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	58024400 	.word	0x58024400

08002400 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0b2      	sub	sp, #200	; 0xc8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	22bc      	movs	r2, #188	; 0xbc
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f004 ff2f 	bl	8007274 <memset>
  if(hrtc->Instance==RTC)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <HAL_RTC_MspInit+0x58>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d116      	bne.n	800244e <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002420:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002424:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fef8 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800243e:	f7ff ffad 	bl	800239c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RTC_MspInit+0x5c>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <HAL_RTC_MspInit+0x5c>)
 8002448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	37c8      	adds	r7, #200	; 0xc8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58004000 	.word	0x58004000
 800245c:	58024400 	.word	0x58024400

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0bc      	sub	sp, #240	; 0xf0
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002478:	f107 0320 	add.w	r3, r7, #32
 800247c:	22bc      	movs	r2, #188	; 0xbc
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f004 fef7 	bl	8007274 <memset>
  if(huart->Instance==UART4)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6d      	ldr	r2, [pc, #436]	; (8002640 <HAL_UART_MspInit+0x1e0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d142      	bne.n	8002516 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249a:	f107 0320 	add.w	r3, r7, #32
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fec2 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024aa:	f7ff ff77 	bl	800239c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80024b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024b4:	4a63      	ldr	r2, [pc, #396]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80024b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024be:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80024c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d2:	4a5c      	ldr	r2, [pc, #368]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024ea:	2303      	movs	r3, #3
 80024ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002502:	2308      	movs	r3, #8
 8002504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800250c:	4619      	mov	r1, r3
 800250e:	484e      	ldr	r0, [pc, #312]	; (8002648 <HAL_UART_MspInit+0x1e8>)
 8002510:	f000 fc22 	bl	8002d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002514:	e08f      	b.n	8002636 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4c      	ldr	r2, [pc, #304]	; (800264c <HAL_UART_MspInit+0x1ec>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d142      	bne.n	80025a6 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002520:	2302      	movs	r3, #2
 8002522:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fe7a 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800253a:	f7ff ff2f 	bl	800239c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 8002540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002544:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 8002546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	4b39      	ldr	r3, [pc, #228]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002562:	4a38      	ldr	r2, [pc, #224]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 800256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800257a:	230c      	movs	r3, #12
 800257c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002592:	2307      	movs	r3, #7
 8002594:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800259c:	4619      	mov	r1, r3
 800259e:	482a      	ldr	r0, [pc, #168]	; (8002648 <HAL_UART_MspInit+0x1e8>)
 80025a0:	f000 fbda 	bl	8002d58 <HAL_GPIO_Init>
}
 80025a4:	e047      	b.n	8002636 <HAL_UART_MspInit+0x1d6>
  else if(huart->Instance==USART3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <HAL_UART_MspInit+0x1f0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d142      	bne.n	8002636 <HAL_UART_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ba:	f107 0320 	add.w	r3, r7, #32
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 fe32 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_UART_MspInit+0x16e>
      Error_Handler();
 80025ca:	f7ff fee7 	bl	800239c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80025d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80025e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80025ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f2:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_UART_MspInit+0x1e4>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800260a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800260e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002624:	2307      	movs	r3, #7
 8002626:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800262e:	4619      	mov	r1, r3
 8002630:	4808      	ldr	r0, [pc, #32]	; (8002654 <HAL_UART_MspInit+0x1f4>)
 8002632:	f000 fb91 	bl	8002d58 <HAL_GPIO_Init>
}
 8002636:	bf00      	nop
 8002638:	37f0      	adds	r7, #240	; 0xf0
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40004c00 	.word	0x40004c00
 8002644:	58024400 	.word	0x58024400
 8002648:	58020000 	.word	0x58020000
 800264c:	40004400 	.word	0x40004400
 8002650:	40004800 	.word	0x40004800
 8002654:	58020800 	.word	0x58020800

08002658 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002658:	b580      	push	{r7, lr}
 800265a:	b0b6      	sub	sp, #216	; 0xd8
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800265e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_FMC_MspInit+0x154>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f040 8096 	bne.w	80027a4 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8002678:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <HAL_FMC_MspInit+0x154>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	22bc      	movs	r2, #188	; 0xbc
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fdf4 	bl	8007274 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800268c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002690:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8002692:	2300      	movs	r3, #0
 8002694:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fdc4 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80026a6:	f7ff fe79 	bl	800239c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_FMC_MspInit+0x158>)
 80026ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026b0:	4a3f      	ldr	r2, [pc, #252]	; (80027b0 <HAL_FMC_MspInit+0x158>)
 80026b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_FMC_MspInit+0x158>)
 80026bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
  PD5   ------> FMC_NWE
  PG13   ------> FMC_A24
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80026c8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80026cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;//|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026e2:	230c      	movs	r3, #12
 80026e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4831      	ldr	r0, [pc, #196]	; (80027b4 <HAL_FMC_MspInit+0x15c>)
 80026f0:	f000 fb32 	bl	8002d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80026f4:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80026f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800270e:	230c      	movs	r3, #12
 8002710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002714:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002718:	4619      	mov	r1, r3
 800271a:	4827      	ldr	r0, [pc, #156]	; (80027b8 <HAL_FMC_MspInit+0x160>)
 800271c:	f000 fb1c 	bl	8002d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002720:	f242 033f 	movw	r3, #8255	; 0x203f
 8002724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800273a:	230c      	movs	r3, #12
 800273c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002740:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002744:	4619      	mov	r1, r3
 8002746:	481d      	ldr	r0, [pc, #116]	; (80027bc <HAL_FMC_MspInit+0x164>)
 8002748:	f000 fb06 	bl	8002d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800274c:	f64f 7333 	movw	r3, #65331	; 0xff33
 8002750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002766:	230c      	movs	r3, #12
 8002768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002770:	4619      	mov	r1, r3
 8002772:	4813      	ldr	r0, [pc, #76]	; (80027c0 <HAL_FMC_MspInit+0x168>)
 8002774:	f000 faf0 	bl	8002d58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8002790:	2309      	movs	r3, #9
 8002792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002796:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800279a:	4619      	mov	r1, r3
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <HAL_FMC_MspInit+0x16c>)
 800279e:	f000 fadb 	bl	8002d58 <HAL_GPIO_Init>
 80027a2:	e000      	b.n	80027a6 <HAL_FMC_MspInit+0x14e>
    return;
 80027a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80027a6:	37d8      	adds	r7, #216	; 0xd8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	24000634 	.word	0x24000634
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58021000 	.word	0x58021000
 80027b8:	58021400 	.word	0x58021400
 80027bc:	58021800 	.word	0x58021800
 80027c0:	58020c00 	.word	0x58020c00
 80027c4:	58020800 	.word	0x58020800

080027c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80027d0:	f7ff ff42 	bl	8002658 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <NMI_Handler+0x4>

080027e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <HardFault_Handler+0x4>

080027e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <MemManage_Handler+0x4>

080027ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002828:	f000 f93e 	bl	8002aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	CAN1_ISR();
 8002834:	f7fe fbf2 	bl	800101c <CAN1_ISR>
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	CAN2_ISR();
 8002840:	f7fe fc30 	bl	80010a4 <CAN2_ISR>
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <FDCAN1_IT1_IRQHandler>:
void FDCAN1_IT1_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	CAN1_ISR();
 800284c:	f7fe fbe6 	bl	800101c <CAN1_ISR>
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <FDCAN2_IT1_IRQHandler>:
void FDCAN2_IT1_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	CAN2_ISR();
 8002858:	f7fe fc24 	bl	80010a4 <CAN2_ISR>
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <SystemInit+0xe4>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	4a36      	ldr	r2, [pc, #216]	; (8002944 <SystemInit+0xe4>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <SystemInit+0xe8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	2b06      	cmp	r3, #6
 800287e:	d807      	bhi.n	8002890 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <SystemInit+0xe8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 030f 	bic.w	r3, r3, #15
 8002888:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <SystemInit+0xe8>)
 800288a:	f043 0307 	orr.w	r3, r3, #7
 800288e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002890:	4b2e      	ldr	r3, [pc, #184]	; (800294c <SystemInit+0xec>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2d      	ldr	r2, [pc, #180]	; (800294c <SystemInit+0xec>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <SystemInit+0xec>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <SystemInit+0xec>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4929      	ldr	r1, [pc, #164]	; (800294c <SystemInit+0xec>)
 80028a8:	4b29      	ldr	r3, [pc, #164]	; (8002950 <SystemInit+0xf0>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <SystemInit+0xe8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <SystemInit+0xe8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 030f 	bic.w	r3, r3, #15
 80028c2:	4a21      	ldr	r2, [pc, #132]	; (8002948 <SystemInit+0xe8>)
 80028c4:	f043 0307 	orr.w	r3, r3, #7
 80028c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <SystemInit+0xec>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <SystemInit+0xec>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <SystemInit+0xec>)
 80028d8:	2200      	movs	r2, #0
 80028da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <SystemInit+0xec>)
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <SystemInit+0xf4>)
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <SystemInit+0xec>)
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <SystemInit+0xf8>)
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <SystemInit+0xec>)
 80028ea:	4a1c      	ldr	r2, [pc, #112]	; (800295c <SystemInit+0xfc>)
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <SystemInit+0xec>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <SystemInit+0xec>)
 80028f6:	4a19      	ldr	r2, [pc, #100]	; (800295c <SystemInit+0xfc>)
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <SystemInit+0xec>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <SystemInit+0xec>)
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <SystemInit+0xfc>)
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <SystemInit+0xec>)
 8002908:	2200      	movs	r2, #0
 800290a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <SystemInit+0xec>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0e      	ldr	r2, [pc, #56]	; (800294c <SystemInit+0xec>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <SystemInit+0xec>)
 800291a:	2200      	movs	r2, #0
 800291c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <SystemInit+0x100>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <SystemInit+0x104>)
 8002924:	4013      	ands	r3, r2
 8002926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800292a:	d202      	bcs.n	8002932 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <SystemInit+0x108>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <SystemInit+0x10c>)
 8002934:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002938:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	52002000 	.word	0x52002000
 800294c:	58024400 	.word	0x58024400
 8002950:	eaf6ed7f 	.word	0xeaf6ed7f
 8002954:	02020200 	.word	0x02020200
 8002958:	01ff0000 	.word	0x01ff0000
 800295c:	01010280 	.word	0x01010280
 8002960:	5c001000 	.word	0x5c001000
 8002964:	ffff0000 	.word	0xffff0000
 8002968:	51008108 	.word	0x51008108
 800296c:	52004000 	.word	0x52004000

08002970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002974:	f7ff ff74 	bl	8002860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	; (80029b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	; (80029bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299e:	f004 fc37 	bl	8007210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a2:	f7fe f959 	bl	8000c58 <main>
  bx  lr
 80029a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80029ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029b0:	240005f4 	.word	0x240005f4
  ldr r2, =_sidata
 80029b4:	08007e90 	.word	0x08007e90
  ldr r2, =_sbss
 80029b8:	240005f4 	.word	0x240005f4
  ldr r4, =_ebss
 80029bc:	24000bd0 	.word	0x24000bd0

080029c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC3_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ca:	2003      	movs	r0, #3
 80029cc:	f000 f992 	bl	8002cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029d0:	f001 fa54 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_Init+0x68>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	4913      	ldr	r1, [pc, #76]	; (8002a30 <HAL_Init+0x6c>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_Init+0x68>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_Init+0x6c>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_Init+0x70>)
 8002a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <HAL_Init+0x74>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a0e:	200f      	movs	r0, #15
 8002a10:	f000 f814 	bl	8002a3c <HAL_InitTick>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e002      	b.n	8002a24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1e:	f7ff fcc3 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	08007e48 	.word	0x08007e48
 8002a34:	240005e8 	.word	0x240005e8
 8002a38:	240005e4 	.word	0x240005e4

08002a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_InitTick+0x60>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e021      	b.n	8002a94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_InitTick+0x64>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_InitTick+0x60>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f969 	bl	8002d3e <HAL_SYSTICK_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00e      	b.n	8002a94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b0f      	cmp	r3, #15
 8002a7a:	d80a      	bhi.n	8002a92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f000 f941 	bl	8002d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a88:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <HAL_InitTick+0x68>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	240005f0 	.word	0x240005f0
 8002aa0:	240005e4 	.word	0x240005e4
 8002aa4:	240005ec 	.word	0x240005ec

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	240005f0 	.word	0x240005f0
 8002acc:	24000bcc 	.word	0x24000bcc

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	24000bcc 	.word	0x24000bcc

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	240005f0 	.word	0x240005f0

08002b30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetREVID+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0c1b      	lsrs	r3, r3, #16
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	5c001000 	.word	0x5c001000

08002b48 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0202 	bic.w	r2, r3, #2
 8002b58:	4904      	ldr	r1, [pc, #16]	; (8002b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	58003c00 	.word	0x58003c00

08002b70 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	58003c00 	.word	0x58003c00

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bbe:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	60d3      	str	r3, [r2, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000ed00 	.word	0xe000ed00
 8002bd4:	05fa0000 	.word	0x05fa0000

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc0:	d301      	bcc.n	8002cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00f      	b.n	8002ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <SysTick_Config+0x40>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cce:	210f      	movs	r1, #15
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	f7ff ff8e 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <SysTick_Config+0x40>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <SysTick_Config+0x40>)
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	e000e010 	.word	0xe000e010

08002cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff47 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff5e 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff90 	bl	8002c48 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5f 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffb2 	bl	8002cb0 <SysTick_Config>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d66:	4b89      	ldr	r3, [pc, #548]	; (8002f8c <HAL_GPIO_Init+0x234>)
 8002d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d6a:	e194      	b.n	8003096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8186 	beq.w	8003090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d005      	beq.n	8002d9c <HAL_GPIO_Init+0x44>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0201 	and.w	r2, r3, #1
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d017      	beq.n	8002e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d123      	bne.n	8002e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	69b9      	ldr	r1, [r7, #24]
 8002e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80e0 	beq.w	8003090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x238>)
 8002ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ed6:	4a2e      	ldr	r2, [pc, #184]	; (8002f90 <HAL_GPIO_Init+0x238>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_GPIO_Init+0x238>)
 8002ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eee:	4a29      	ldr	r2, [pc, #164]	; (8002f94 <HAL_GPIO_Init+0x23c>)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	220f      	movs	r2, #15
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <HAL_GPIO_Init+0x240>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d052      	beq.n	8002fc0 <HAL_GPIO_Init+0x268>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <HAL_GPIO_Init+0x244>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d031      	beq.n	8002f86 <HAL_GPIO_Init+0x22e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_GPIO_Init+0x248>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d02b      	beq.n	8002f82 <HAL_GPIO_Init+0x22a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_GPIO_Init+0x24c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d025      	beq.n	8002f7e <HAL_GPIO_Init+0x226>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_GPIO_Init+0x250>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <HAL_GPIO_Init+0x222>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_GPIO_Init+0x254>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d019      	beq.n	8002f76 <HAL_GPIO_Init+0x21e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_GPIO_Init+0x258>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0x21a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_GPIO_Init+0x25c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00d      	beq.n	8002f6e <HAL_GPIO_Init+0x216>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_GPIO_Init+0x260>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <HAL_GPIO_Init+0x212>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_GPIO_Init+0x264>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_Init+0x20e>
 8002f62:	2309      	movs	r3, #9
 8002f64:	e02d      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f66:	230a      	movs	r3, #10
 8002f68:	e02b      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	e029      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f6e:	2307      	movs	r3, #7
 8002f70:	e027      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e025      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e023      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e021      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e01f      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e01d      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e01b      	b.n	8002fc2 <HAL_GPIO_Init+0x26a>
 8002f8a:	bf00      	nop
 8002f8c:	58000080 	.word	0x58000080
 8002f90:	58024400 	.word	0x58024400
 8002f94:	58000400 	.word	0x58000400
 8002f98:	58020000 	.word	0x58020000
 8002f9c:	58020400 	.word	0x58020400
 8002fa0:	58020800 	.word	0x58020800
 8002fa4:	58020c00 	.word	0x58020c00
 8002fa8:	58021000 	.word	0x58021000
 8002fac:	58021400 	.word	0x58021400
 8002fb0:	58021800 	.word	0x58021800
 8002fb4:	58021c00 	.word	0x58021c00
 8002fb8:	58022000 	.word	0x58022000
 8002fbc:	58022400 	.word	0x58022400
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd2:	4938      	ldr	r1, [pc, #224]	; (80030b4 <HAL_GPIO_Init+0x35c>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f47f ae63 	bne.w	8002d6c <HAL_GPIO_Init+0x14>
  }
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3724      	adds	r7, #36	; 0x24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	58000400 	.word	0x58000400

080030b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	041a      	lsls	r2, r3, #16
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43d9      	mvns	r1, r3
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	400b      	ands	r3, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	58024800 	.word	0x58024800

08003170 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_PWREx_ConfigSupply+0x70>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d00a      	beq.n	800319a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_PWREx_ConfigSupply+0x70>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e01f      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e01d      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_PWREx_ConfigSupply+0x70>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	490f      	ldr	r1, [pc, #60]	; (80031e0 <HAL_PWREx_ConfigSupply+0x70>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80031aa:	f7ff fc91 	bl	8002ad0 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031b0:	e009      	b.n	80031c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031b2:	f7ff fc8d 	bl	8002ad0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c0:	d901      	bls.n	80031c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e007      	b.n	80031d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_PWREx_ConfigSupply+0x70>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	d1ee      	bne.n	80031b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	58024800 	.word	0x58024800

080031e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f000 bc1c 	b.w	8003a30 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8087 	beq.w	8003314 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	4b9e      	ldr	r3, [pc, #632]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003210:	4b9b      	ldr	r3, [pc, #620]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b10      	cmp	r3, #16
 800321a:	d007      	beq.n	800322c <HAL_RCC_OscConfig+0x48>
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	2b18      	cmp	r3, #24
 8003220:	d110      	bne.n	8003244 <HAL_RCC_OscConfig+0x60>
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d10b      	bne.n	8003244 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	4b94      	ldr	r3, [pc, #592]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d06c      	beq.n	8003312 <HAL_RCC_OscConfig+0x12e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d168      	bne.n	8003312 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e3f5      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x78>
 800324e:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a8b      	ldr	r2, [pc, #556]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e02e      	b.n	80032ba <HAL_RCC_OscConfig+0xd6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10c      	bne.n	800327e <HAL_RCC_OscConfig+0x9a>
 8003264:	4b86      	ldr	r3, [pc, #536]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a85      	ldr	r2, [pc, #532]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b83      	ldr	r3, [pc, #524]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a82      	ldr	r2, [pc, #520]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e01d      	b.n	80032ba <HAL_RCC_OscConfig+0xd6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003286:	d10c      	bne.n	80032a2 <HAL_RCC_OscConfig+0xbe>
 8003288:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7c      	ldr	r2, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800328e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b7a      	ldr	r3, [pc, #488]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a79      	ldr	r2, [pc, #484]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e00b      	b.n	80032ba <HAL_RCC_OscConfig+0xd6>
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a76      	ldr	r2, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d013      	beq.n	80032ea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7ff fc05 	bl	8002ad0 <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7ff fc01 	bl	8002ad0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e3a9      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0xe6>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7ff fbf1 	bl	8002ad0 <HAL_GetTick>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f2:	f7ff fbed 	bl	8002ad0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e395      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003304:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x10e>
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003312:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80ca 	beq.w	80034b6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003322:	4b57      	ldr	r3, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800332a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332c:	4b54      	ldr	r3, [pc, #336]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_RCC_OscConfig+0x164>
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b18      	cmp	r3, #24
 800333c:	d156      	bne.n	80033ec <HAL_RCC_OscConfig+0x208>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d151      	bne.n	80033ec <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003348:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x17c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e367      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003360:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 0219 	bic.w	r2, r3, #25
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4944      	ldr	r1, [pc, #272]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003372:	f7ff fbad 	bl	8002ad0 <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7ff fba9 	bl	8002ad0 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e351      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338c:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	f7ff fbca 	bl	8002b30 <HAL_GetREVID>
 800339c:	4603      	mov	r3, r0
 800339e:	f241 0203 	movw	r2, #4099	; 0x1003
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d817      	bhi.n	80033d6 <HAL_RCC_OscConfig+0x1f2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d108      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1dc>
 80033ae:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033b6:	4a32      	ldr	r2, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033be:	e07a      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	031b      	lsls	r3, r3, #12
 80033ce:	492c      	ldr	r1, [pc, #176]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	e06f      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	4926      	ldr	r1, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ea:	e064      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d047      	beq.n	8003484 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033f4:	4b22      	ldr	r3, [pc, #136]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 0219 	bic.w	r2, r3, #25
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	491f      	ldr	r1, [pc, #124]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7ff fb63 	bl	8002ad0 <HAL_GetTick>
 800340a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340e:	f7ff fb5f 	bl	8002ad0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e307      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	f7ff fb80 	bl	8002b30 <HAL_GetREVID>
 8003430:	4603      	mov	r3, r0
 8003432:	f241 0203 	movw	r2, #4099	; 0x1003
 8003436:	4293      	cmp	r3, r2
 8003438:	d817      	bhi.n	800346a <HAL_RCC_OscConfig+0x286>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d108      	bne.n	8003454 <HAL_RCC_OscConfig+0x270>
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800344a:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	6053      	str	r3, [r2, #4]
 8003452:	e030      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	031b      	lsls	r3, r3, #12
 8003462:	4907      	ldr	r1, [pc, #28]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e025      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	061b      	lsls	r3, r3, #24
 8003478:	4901      	ldr	r1, [pc, #4]	; (8003480 <HAL_RCC_OscConfig+0x29c>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
 800347e:	e01a      	b.n	80034b6 <HAL_RCC_OscConfig+0x2d2>
 8003480:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003484:	4b9e      	ldr	r3, [pc, #632]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a9d      	ldr	r2, [pc, #628]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7ff fb1e 	bl	8002ad0 <HAL_GetTick>
 8003494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003498:	f7ff fb1a 	bl	8002ad0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e2c2      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80034aa:	4b95      	ldr	r3, [pc, #596]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a9 	beq.w	8003616 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c4:	4b8e      	ldr	r3, [pc, #568]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034ce:	4b8c      	ldr	r3, [pc, #560]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d007      	beq.n	80034ea <HAL_RCC_OscConfig+0x306>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	2b18      	cmp	r3, #24
 80034de:	d13a      	bne.n	8003556 <HAL_RCC_OscConfig+0x372>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d135      	bne.n	8003556 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034ea:	4b85      	ldr	r3, [pc, #532]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_RCC_OscConfig+0x31e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e296      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003502:	f7ff fb15 	bl	8002b30 <HAL_GetREVID>
 8003506:	4603      	mov	r3, r0
 8003508:	f241 0203 	movw	r2, #4099	; 0x1003
 800350c:	4293      	cmp	r3, r2
 800350e:	d817      	bhi.n	8003540 <HAL_RCC_OscConfig+0x35c>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	2b20      	cmp	r3, #32
 8003516:	d108      	bne.n	800352a <HAL_RCC_OscConfig+0x346>
 8003518:	4b79      	ldr	r3, [pc, #484]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003520:	4a77      	ldr	r2, [pc, #476]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003526:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003528:	e075      	b.n	8003616 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800352a:	4b75      	ldr	r3, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	069b      	lsls	r3, r3, #26
 8003538:	4971      	ldr	r1, [pc, #452]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800353e:	e06a      	b.n	8003616 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	061b      	lsls	r3, r3, #24
 800354e:	496c      	ldr	r1, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003554:	e05f      	b.n	8003616 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d042      	beq.n	80035e4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800355e:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a67      	ldr	r2, [pc, #412]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7ff fab1 	bl	8002ad0 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003572:	f7ff faad 	bl	8002ad0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e255      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003584:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003590:	f7ff face 	bl	8002b30 <HAL_GetREVID>
 8003594:	4603      	mov	r3, r0
 8003596:	f241 0203 	movw	r2, #4099	; 0x1003
 800359a:	4293      	cmp	r3, r2
 800359c:	d817      	bhi.n	80035ce <HAL_RCC_OscConfig+0x3ea>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d108      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3d4>
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035ae:	4a54      	ldr	r2, [pc, #336]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035b4:	6053      	str	r3, [r2, #4]
 80035b6:	e02e      	b.n	8003616 <HAL_RCC_OscConfig+0x432>
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	069b      	lsls	r3, r3, #26
 80035c6:	494e      	ldr	r1, [pc, #312]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	e023      	b.n	8003616 <HAL_RCC_OscConfig+0x432>
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	061b      	lsls	r3, r3, #24
 80035dc:	4948      	ldr	r1, [pc, #288]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	60cb      	str	r3, [r1, #12]
 80035e2:	e018      	b.n	8003616 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035e4:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a45      	ldr	r2, [pc, #276]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80035ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7ff fa6e 	bl	8002ad0 <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035f8:	f7ff fa6a 	bl	8002ad0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e212      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d036      	beq.n	8003690 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d019      	beq.n	800365e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	4b35      	ldr	r3, [pc, #212]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	4a34      	ldr	r2, [pc, #208]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7ff fa4b 	bl	8002ad0 <HAL_GetTick>
 800363a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800363e:	f7ff fa47 	bl	8002ad0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1ef      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x45a>
 800365c:	e018      	b.n	8003690 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800365e:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003662:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7ff fa31 	bl	8002ad0 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003672:	f7ff fa2d 	bl	8002ad0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1d5      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 8003686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d039      	beq.n	8003710 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d019      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80036aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036b0:	f7ff fa0e 	bl	8002ad0 <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036b8:	f7ff fa0a 	bl	8002ad0 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1b2      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4d4>
 80036d6:	e01b      	b.n	8003710 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x51c>)
 80036de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036e4:	f7ff f9f4 	bl	8002ad0 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036ec:	f7ff f9f0 	bl	8002ad0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d904      	bls.n	8003704 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e198      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
 80036fe:	bf00      	nop
 8003700:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003704:	4ba3      	ldr	r3, [pc, #652]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ed      	bne.n	80036ec <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8081 	beq.w	8003820 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800371e:	4b9e      	ldr	r3, [pc, #632]	; (8003998 <HAL_RCC_OscConfig+0x7b4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a9d      	ldr	r2, [pc, #628]	; (8003998 <HAL_RCC_OscConfig+0x7b4>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800372a:	f7ff f9d1 	bl	8002ad0 <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7ff f9cd 	bl	8002ad0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b64      	cmp	r3, #100	; 0x64
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e175      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003744:	4b94      	ldr	r3, [pc, #592]	; (8003998 <HAL_RCC_OscConfig+0x7b4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x582>
 8003758:	4b8e      	ldr	r3, [pc, #568]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a8d      	ldr	r2, [pc, #564]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
 8003764:	e02d      	b.n	80037c2 <HAL_RCC_OscConfig+0x5de>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x5a4>
 800376e:	4b89      	ldr	r3, [pc, #548]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a88      	ldr	r2, [pc, #544]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	4b86      	ldr	r3, [pc, #536]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a85      	ldr	r2, [pc, #532]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	; 0x70
 8003786:	e01c      	b.n	80037c2 <HAL_RCC_OscConfig+0x5de>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b05      	cmp	r3, #5
 800378e:	d10c      	bne.n	80037aa <HAL_RCC_OscConfig+0x5c6>
 8003790:	4b80      	ldr	r3, [pc, #512]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a7f      	ldr	r2, [pc, #508]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	4b7d      	ldr	r3, [pc, #500]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a7c      	ldr	r2, [pc, #496]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0x5de>
 80037aa:	4b7a      	ldr	r3, [pc, #488]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a79      	ldr	r2, [pc, #484]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
 80037b6:	4b77      	ldr	r3, [pc, #476]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a76      	ldr	r2, [pc, #472]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d015      	beq.n	80037f6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7ff f981 	bl	8002ad0 <HAL_GetTick>
 80037ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7ff f97d 	bl	8002ad0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e123      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ee      	beq.n	80037d2 <HAL_RCC_OscConfig+0x5ee>
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7ff f96b 	bl	8002ad0 <HAL_GetTick>
 80037fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7ff f967 	bl	8002ad0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e10d      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003814:	4b5f      	ldr	r3, [pc, #380]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ee      	bne.n	80037fe <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8102 	beq.w	8003a2e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800382a:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003832:	2b18      	cmp	r3, #24
 8003834:	f000 80bd 	beq.w	80039b2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	2b02      	cmp	r3, #2
 800383e:	f040 8095 	bne.w	800396c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b54      	ldr	r3, [pc, #336]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a53      	ldr	r2, [pc, #332]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7ff f93f 	bl	8002ad0 <HAL_GetTick>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003856:	f7ff f93b 	bl	8002ad0 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0e3      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003868:	4b4a      	ldr	r3, [pc, #296]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f0      	bne.n	8003856 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003874:	4b47      	ldr	r3, [pc, #284]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003878:	4b48      	ldr	r3, [pc, #288]	; (800399c <HAL_RCC_OscConfig+0x7b8>)
 800387a:	4013      	ands	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	430a      	orrs	r2, r1
 8003888:	4942      	ldr	r1, [pc, #264]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	628b      	str	r3, [r1, #40]	; 0x28
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	3b01      	subs	r3, #1
 8003894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	3b01      	subs	r3, #1
 800389e:	025b      	lsls	r3, r3, #9
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	3b01      	subs	r3, #1
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038be:	4935      	ldr	r1, [pc, #212]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038c4:	4b33      	ldr	r3, [pc, #204]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d4:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_RCC_OscConfig+0x7bc>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	492d      	ldr	r1, [pc, #180]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f023 020c 	bic.w	r2, r3, #12
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4928      	ldr	r1, [pc, #160]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038f6:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f023 0202 	bic.w	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	4924      	ldr	r1, [pc, #144]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800391a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800393e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7ff f8c4 	bl	8002ad0 <HAL_GetTick>
 8003948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394c:	f7ff f8c0 	bl	8002ad0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e068      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800395e:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x768>
 800396a:	e060      	b.n	8003a2e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a08      	ldr	r2, [pc, #32]	; (8003994 <HAL_RCC_OscConfig+0x7b0>)
 8003972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7ff f8aa 	bl	8002ad0 <HAL_GetTick>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397e:	e011      	b.n	80039a4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003980:	f7ff f8a6 	bl	8002ad0 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d90a      	bls.n	80039a4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04e      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
 8003992:	bf00      	nop
 8003994:	58024400 	.word	0x58024400
 8003998:	58024800 	.word	0x58024800
 800399c:	fffffc0c 	.word	0xfffffc0c
 80039a0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_OscConfig+0x854>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e7      	bne.n	8003980 <HAL_RCC_OscConfig+0x79c>
 80039b0:	e03d      	b.n	8003a2e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_RCC_OscConfig+0x854>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80039b8:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <HAL_RCC_OscConfig+0x854>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d031      	beq.n	8003a2a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d12a      	bne.n	8003a2a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d122      	bne.n	8003a2a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d11a      	bne.n	8003a2a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	0a5b      	lsrs	r3, r3, #9
 80039f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d111      	bne.n	8003a2a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d108      	bne.n	8003a2a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	0e1b      	lsrs	r3, r3, #24
 8003a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58024400 	.word	0x58024400

08003a3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e19c      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d910      	bls.n	8003a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b87      	ldr	r3, [pc, #540]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 020f 	bic.w	r2, r3, #15
 8003a66:	4985      	ldr	r1, [pc, #532]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b83      	ldr	r3, [pc, #524]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e184      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	4b7b      	ldr	r3, [pc, #492]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d908      	bls.n	8003aae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a9c:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	4975      	ldr	r1, [pc, #468]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	4b70      	ldr	r3, [pc, #448]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d908      	bls.n	8003adc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aca:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	496a      	ldr	r1, [pc, #424]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	4b64      	ldr	r3, [pc, #400]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d908      	bls.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003af8:	4b61      	ldr	r3, [pc, #388]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	495e      	ldr	r1, [pc, #376]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d010      	beq.n	8003b38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d908      	bls.n	8003b38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4953      	ldr	r1, [pc, #332]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d010      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d908      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b4a      	ldr	r3, [pc, #296]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f023 020f 	bic.w	r2, r3, #15
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4947      	ldr	r1, [pc, #284]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d055      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b72:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4940      	ldr	r1, [pc, #256]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b8c:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d121      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0f6      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ba4:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d115      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0ea      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bbc:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0de      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0d6      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bdc:	4b28      	ldr	r3, [pc, #160]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f023 0207 	bic.w	r2, r3, #7
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4925      	ldr	r1, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fe ff6f 	bl	8002ad0 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf6:	f7fe ff6b 	bl	8002ad0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0be      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d1eb      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d010      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d208      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f023 020f 	bic.w	r2, r3, #15
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	490e      	ldr	r1, [pc, #56]	; (8003c80 <HAL_RCC_ClockConfig+0x244>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d214      	bcs.n	8003c84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4906      	ldr	r1, [pc, #24]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_RCC_ClockConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e086      	b.n	8003d8a <HAL_RCC_ClockConfig+0x34e>
 8003c7c:	52002000 	.word	0x52002000
 8003c80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d208      	bcs.n	8003cb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ca0:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	4939      	ldr	r1, [pc, #228]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d010      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d208      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	492e      	ldr	r1, [pc, #184]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d208      	bcs.n	8003d0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	4922      	ldr	r1, [pc, #136]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d010      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d208      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	4917      	ldr	r1, [pc, #92]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d3c:	f000 f89e 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	4912      	ldr	r1, [pc, #72]	; (8003d98 <HAL_RCC_ClockConfig+0x35c>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
 8003d58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_RCC_ClockConfig+0x358>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <HAL_RCC_ClockConfig+0x35c>)
 8003d64:	5cd3      	ldrb	r3, [r2, r3]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <HAL_RCC_ClockConfig+0x360>)
 8003d72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_RCC_ClockConfig+0x364>)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_RCC_ClockConfig+0x368>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe fe5c 	bl	8002a3c <HAL_InitTick>
 8003d84:	4603      	mov	r3, r0
 8003d86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
 8003d98:	08007e48 	.word	0x08007e48
 8003d9c:	240005e8 	.word	0x240005e8
 8003da0:	240005e4 	.word	0x240005e4
 8003da4:	240005ec 	.word	0x240005ec

08003da8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	; 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d12a      	bne.n	8003e10 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003dba:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dca:	4b29      	ldr	r3, [pc, #164]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dde:	2302      	movs	r3, #2
 8003de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de2:	2303      	movs	r3, #3
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	4619      	mov	r1, r3
 8003df4:	481f      	ldr	r0, [pc, #124]	; (8003e74 <HAL_RCC_MCOConfig+0xcc>)
 8003df6:	f7fe ffaf 	bl	8002d58 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	4919      	ldr	r1, [pc, #100]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003e0e:	e02a      	b.n	8003e66 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	480b      	ldr	r0, [pc, #44]	; (8003e78 <HAL_RCC_MCOConfig+0xd0>)
 8003e4c:	f7fe ff84 	bl	8002d58 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	01d9      	lsls	r1, r3, #7
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	4903      	ldr	r1, [pc, #12]	; (8003e70 <HAL_RCC_MCOConfig+0xc8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	610b      	str	r3, [r1, #16]
}
 8003e66:	bf00      	nop
 8003e68:	3730      	adds	r7, #48	; 0x30
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	58020000 	.word	0x58020000
 8003e78:	58020800 	.word	0x58020800

08003e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e82:	4bb3      	ldr	r3, [pc, #716]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e8a:	2b18      	cmp	r3, #24
 8003e8c:	f200 8155 	bhi.w	800413a <HAL_RCC_GetSysClockFreq+0x2be>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	0800413b 	.word	0x0800413b
 8003ea0:	0800413b 	.word	0x0800413b
 8003ea4:	0800413b 	.word	0x0800413b
 8003ea8:	0800413b 	.word	0x0800413b
 8003eac:	0800413b 	.word	0x0800413b
 8003eb0:	0800413b 	.word	0x0800413b
 8003eb4:	0800413b 	.word	0x0800413b
 8003eb8:	08003f23 	.word	0x08003f23
 8003ebc:	0800413b 	.word	0x0800413b
 8003ec0:	0800413b 	.word	0x0800413b
 8003ec4:	0800413b 	.word	0x0800413b
 8003ec8:	0800413b 	.word	0x0800413b
 8003ecc:	0800413b 	.word	0x0800413b
 8003ed0:	0800413b 	.word	0x0800413b
 8003ed4:	0800413b 	.word	0x0800413b
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	0800413b 	.word	0x0800413b
 8003ee0:	0800413b 	.word	0x0800413b
 8003ee4:	0800413b 	.word	0x0800413b
 8003ee8:	0800413b 	.word	0x0800413b
 8003eec:	0800413b 	.word	0x0800413b
 8003ef0:	0800413b 	.word	0x0800413b
 8003ef4:	0800413b 	.word	0x0800413b
 8003ef8:	08003f2f 	.word	0x08003f2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003efc:	4b94      	ldr	r3, [pc, #592]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f08:	4b91      	ldr	r3, [pc, #580]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	08db      	lsrs	r3, r3, #3
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	4a90      	ldr	r2, [pc, #576]	; (8004154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f1a:	e111      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f1c:	4b8d      	ldr	r3, [pc, #564]	; (8004154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f1e:	61bb      	str	r3, [r7, #24]
    break;
 8003f20:	e10e      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f22:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f24:	61bb      	str	r3, [r7, #24]
    break;
 8003f26:	e10b      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f28:	4b8c      	ldr	r3, [pc, #560]	; (800415c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003f2a:	61bb      	str	r3, [r7, #24]
    break;
 8003f2c:	e108      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f2e:	4b88      	ldr	r3, [pc, #544]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f38:	4b85      	ldr	r3, [pc, #532]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f44:	4b82      	ldr	r3, [pc, #520]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f4e:	4b80      	ldr	r3, [pc, #512]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80e1 	beq.w	8004134 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	f000 8083 	beq.w	8004080 <HAL_RCC_GetSysClockFreq+0x204>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f200 80a1 	bhi.w	80040c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x114>
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d056      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f8e:	e099      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f90:	4b6f      	ldr	r3, [pc, #444]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02d      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f9c:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	ee07 3a90 	vmov	s15, r3
 8003fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b62      	ldr	r3, [pc, #392]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004160 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ff6:	e087      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004164 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b51      	ldr	r3, [pc, #324]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a02 	vldr	s12, [r7, #8]
 800401e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004160 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800403a:	e065      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2ec>
 800404a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404e:	4b40      	ldr	r3, [pc, #256]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004062:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004160 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800407e:	e043      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800416c <HAL_RCC_GetSysClockFreq+0x2f0>
 800408e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004092:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004160 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040c2:	e021      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004168 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004160 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004106:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004108:	4b11      	ldr	r3, [pc, #68]	; (8004150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	0a5b      	lsrs	r3, r3, #9
 800410e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004112:	3301      	adds	r3, #1
 8004114:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004120:	edd7 6a07 	vldr	s13, [r7, #28]
 8004124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800412c:	ee17 3a90 	vmov	r3, s15
 8004130:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004132:	e005      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
    break;
 8004138:	e002      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800413c:	61bb      	str	r3, [r7, #24]
    break;
 800413e:	bf00      	nop
  }

  return sysclockfreq;
 8004140:	69bb      	ldr	r3, [r7, #24]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	58024400 	.word	0x58024400
 8004154:	03d09000 	.word	0x03d09000
 8004158:	003d0900 	.word	0x003d0900
 800415c:	017d7840 	.word	0x017d7840
 8004160:	46000000 	.word	0x46000000
 8004164:	4c742400 	.word	0x4c742400
 8004168:	4a742400 	.word	0x4a742400
 800416c:	4bbebc20 	.word	0x4bbebc20

08004170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004176:	f7ff fe81 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490f      	ldr	r1, [pc, #60]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80041ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041ae:	4a07      	ldr	r2, [pc, #28]	; (80041cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	58024400 	.word	0x58024400
 80041c4:	08007e48 	.word	0x08007e48
 80041c8:	240005e8 	.word	0x240005e8
 80041cc:	240005e4 	.word	0x240005e4

080041d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041d4:	f7ff ffcc 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58024400 	.word	0x58024400
 80041f8:	08007e48 	.word	0x08007e48

080041fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004200:	f7ff ffb6 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4904      	ldr	r1, [pc, #16]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	58024400 	.word	0x58024400
 8004224:	08007e48 	.word	0x08007e48

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004230:	2300      	movs	r3, #0
 8004232:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004234:	2300      	movs	r3, #0
 8004236:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d03f      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004248:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424c:	d02a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800424e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004252:	d824      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004254:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004258:	d018      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800425a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800425e:	d81e      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d007      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800426a:	e018      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4bab      	ldr	r3, [pc, #684]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4aaa      	ldr	r2, [pc, #680]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004278:	e015      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	2102      	movs	r1, #2
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f9cf 	bl	8005624 <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800428a:	e00c      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3324      	adds	r3, #36	; 0x24
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f001 fa78 	bl	8005788 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800429c:	e003      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
      break;
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042ac:	4b9b      	ldr	r3, [pc, #620]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b8:	4998      	ldr	r1, [pc, #608]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	650b      	str	r3, [r1, #80]	; 0x50
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d03d      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d826      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	080042f5 	.word	0x080042f5
 80042e4:	08004303 	.word	0x08004303
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f4:	4b89      	ldr	r3, [pc, #548]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	4a88      	ldr	r2, [pc, #544]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004300:	e015      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f98b 	bl	8005624 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004312:	e00c      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3324      	adds	r3, #36	; 0x24
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f001 fa34 	bl	8005788 <RCCEx_PLL3_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004324:	e003      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      break;
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800432c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004334:	4b79      	ldr	r3, [pc, #484]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	f023 0207 	bic.w	r2, r3, #7
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	4976      	ldr	r1, [pc, #472]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	650b      	str	r3, [r1, #80]	; 0x50
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d042      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004360:	d02b      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	d825      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004368:	2bc0      	cmp	r3, #192	; 0xc0
 800436a:	d028      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800436c:	2bc0      	cmp	r3, #192	; 0xc0
 800436e:	d821      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d016      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004374:	2b80      	cmp	r3, #128	; 0x80
 8004376:	d81d      	bhi.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d007      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004380:	e018      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004382:	4b66      	ldr	r3, [pc, #408]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	4a65      	ldr	r2, [pc, #404]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800438e:	e017      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f944 	bl	8005624 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80043a0:	e00e      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 f9ed 	bl	8005788 <RCCEx_PLL3_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80043b2:	e005      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75fb      	strb	r3, [r7, #23]
      break;
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043c6:	4b55      	ldr	r3, [pc, #340]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	4952      	ldr	r1, [pc, #328]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	650b      	str	r3, [r1, #80]	; 0x50
 80043d8:	e001      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d049      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f4:	d030      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fa:	d82a      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004400:	d02c      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004402:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004406:	d824      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440c:	d018      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800440e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004412:	d81e      	bhi.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800441e:	e018      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a3d      	ldr	r2, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800442c:	e017      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f001 f8f5 	bl	8005624 <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800443e:	e00e      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3324      	adds	r3, #36	; 0x24
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f99e 	bl	8005788 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      break;
 8004456:	e002      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004458:	bf00      	nop
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800445c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004464:	4b2d      	ldr	r3, [pc, #180]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004472:	492a      	ldr	r1, [pc, #168]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	658b      	str	r3, [r1, #88]	; 0x58
 8004478:	e001      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447a:	7dfb      	ldrb	r3, [r7, #23]
 800447c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004486:	2b00      	cmp	r3, #0
 8004488:	d04c      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004494:	d030      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800449a:	d82a      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800449c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a0:	d02c      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80044a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a6:	d824      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ac:	d018      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80044ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b2:	d81e      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80044b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044bc:	d007      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80044be:	e018      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	4b16      	ldr	r3, [pc, #88]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044cc:	e017      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f8a5 	bl	8005624 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044de:	e00e      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3324      	adds	r3, #36	; 0x24
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f94e 	bl	8005788 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044f0:	e005      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004512:	4902      	ldr	r1, [pc, #8]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	658b      	str	r3, [r1, #88]	; 0x58
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d032      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d01c      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d817      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d00c      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d813      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004548:	2b10      	cmp	r3, #16
 800454a:	d10f      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454c:	4baf      	ldr	r3, [pc, #700]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	4aae      	ldr	r2, [pc, #696]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004558:	e00e      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f001 f85f 	bl	8005624 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800456a:	e005      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	75fb      	strb	r3, [r7, #23]
      break;
 8004570:	e002      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004572:	bf00      	nop
 8004574:	e000      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800457e:	4ba3      	ldr	r3, [pc, #652]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458a:	49a0      	ldr	r1, [pc, #640]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004590:	e001      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d047      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045aa:	d030      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80045ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b0:	d82a      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80045b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045b6:	d02c      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80045b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045bc:	d824      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c2:	d018      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80045c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c8:	d81e      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d007      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80045d4:	e018      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d6:	4b8d      	ldr	r3, [pc, #564]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	4a8c      	ldr	r2, [pc, #560]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045e2:	e017      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f81a 	bl	8005624 <RCCEx_PLL2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045f4:	e00e      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 f8c3 	bl	8005788 <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004606:	e005      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800461a:	4b7c      	ldr	r3, [pc, #496]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004626:	4979      	ldr	r1, [pc, #484]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	650b      	str	r3, [r1, #80]	; 0x50
 800462c:	e001      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d049      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004646:	d02e      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464c:	d828      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800464e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004652:	d02a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004658:	d822      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800465a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800465e:	d026      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004664:	d81c      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800466a:	d010      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800466c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004670:	d816      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01d      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467a:	d111      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	2101      	movs	r1, #1
 8004682:	4618      	mov	r0, r3
 8004684:	f000 ffce 	bl	8005624 <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800468c:	e012      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3324      	adds	r3, #36	; 0x24
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f001 f877 	bl	8005788 <RCCEx_PLL3_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800469e:	e009      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
      break;
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046a6:	bf00      	nop
 80046a8:	e004      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80046b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046ba:	4b54      	ldr	r3, [pc, #336]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	4951      	ldr	r1, [pc, #324]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	650b      	str	r3, [r1, #80]	; 0x50
 80046cc:	e001      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e8:	d02e      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80046ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ee:	d828      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d02a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d822      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80046fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004700:	d026      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004706:	d81c      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800470c:	d010      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800470e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004712:	d816      	bhi.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01d      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004718:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800471c:	d111      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2101      	movs	r1, #1
 8004724:	4618      	mov	r0, r3
 8004726:	f000 ff7d 	bl	8005624 <RCCEx_PLL2_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800472e:	e012      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3324      	adds	r3, #36	; 0x24
 8004734:	2101      	movs	r1, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f001 f826 	bl	8005788 <RCCEx_PLL3_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004740:	e009      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
      break;
 8004746:	e006      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004748:	bf00      	nop
 800474a:	e004      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800474c:	bf00      	nop
 800474e:	e002      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800475c:	4b2b      	ldr	r3, [pc, #172]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800476a:	4928      	ldr	r1, [pc, #160]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	658b      	str	r3, [r1, #88]	; 0x58
 8004770:	e001      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d02f      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478a:	d00e      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004790:	d814      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d015      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d10f      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	4a1a      	ldr	r2, [pc, #104]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047a8:	e00c      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2101      	movs	r1, #1
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 ff37 	bl	8005624 <RCCEx_PLL2_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047ba:	e003      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
      break;
 80047c0:	e000      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80047c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d6:	490d      	ldr	r1, [pc, #52]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	650b      	str	r3, [r1, #80]	; 0x50
 80047dc:	e001      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d033      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d81c      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004837 	.word	0x08004837
 8004800:	08004811 	.word	0x08004811
 8004804:	0800481f 	.word	0x0800481f
 8004808:	08004837 	.word	0x08004837
 800480c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004810:	4bb8      	ldr	r3, [pc, #736]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4ab7      	ldr	r2, [pc, #732]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800481c:	e00c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2102      	movs	r1, #2
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fefd 	bl	8005624 <RCCEx_PLL2_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800483e:	4bad      	ldr	r3, [pc, #692]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	49aa      	ldr	r1, [pc, #680]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004850:	e001      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8086 	beq.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004864:	4ba4      	ldr	r3, [pc, #656]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4aa3      	ldr	r2, [pc, #652]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004870:	f7fe f92e 	bl	8002ad0 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004876:	e009      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004878:	f7fe f92a 	bl	8002ad0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d902      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	75fb      	strb	r3, [r7, #23]
        break;
 800488a:	e005      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800488c:	4b9a      	ldr	r3, [pc, #616]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ef      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d166      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800489e:	4b95      	ldr	r3, [pc, #596]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048a8:	4053      	eors	r3, r2
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d013      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b2:	4b90      	ldr	r3, [pc, #576]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048bc:	4b8d      	ldr	r3, [pc, #564]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	4a8c      	ldr	r2, [pc, #560]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c8:	4b8a      	ldr	r3, [pc, #552]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4a89      	ldr	r2, [pc, #548]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048d4:	4a87      	ldr	r2, [pc, #540]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e4:	d115      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fe f8f3 	bl	8002ad0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048ec:	e00b      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fe f8ef 	bl	8002ad0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d902      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	75fb      	strb	r3, [r7, #23]
            break;
 8004904:	e005      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004906:	4b7b      	ldr	r3, [pc, #492]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ed      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d126      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004926:	d10d      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004928:	4b72      	ldr	r3, [pc, #456]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004936:	0919      	lsrs	r1, r3, #4
 8004938:	4b70      	ldr	r3, [pc, #448]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800493a:	400b      	ands	r3, r1
 800493c:	496d      	ldr	r1, [pc, #436]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	610b      	str	r3, [r1, #16]
 8004942:	e005      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004944:	4b6b      	ldr	r3, [pc, #428]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4a6a      	ldr	r2, [pc, #424]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800494a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800494e:	6113      	str	r3, [r2, #16]
 8004950:	4b68      	ldr	r3, [pc, #416]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004952:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495e:	4965      	ldr	r1, [pc, #404]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	670b      	str	r3, [r1, #112]	; 0x70
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	75bb      	strb	r3, [r7, #22]
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d07e      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004980:	2b28      	cmp	r3, #40	; 0x28
 8004982:	d867      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	08004a5b 	.word	0x08004a5b
 8004990:	08004a55 	.word	0x08004a55
 8004994:	08004a55 	.word	0x08004a55
 8004998:	08004a55 	.word	0x08004a55
 800499c:	08004a55 	.word	0x08004a55
 80049a0:	08004a55 	.word	0x08004a55
 80049a4:	08004a55 	.word	0x08004a55
 80049a8:	08004a55 	.word	0x08004a55
 80049ac:	08004a31 	.word	0x08004a31
 80049b0:	08004a55 	.word	0x08004a55
 80049b4:	08004a55 	.word	0x08004a55
 80049b8:	08004a55 	.word	0x08004a55
 80049bc:	08004a55 	.word	0x08004a55
 80049c0:	08004a55 	.word	0x08004a55
 80049c4:	08004a55 	.word	0x08004a55
 80049c8:	08004a55 	.word	0x08004a55
 80049cc:	08004a43 	.word	0x08004a43
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004a55 	.word	0x08004a55
 80049d8:	08004a55 	.word	0x08004a55
 80049dc:	08004a55 	.word	0x08004a55
 80049e0:	08004a55 	.word	0x08004a55
 80049e4:	08004a55 	.word	0x08004a55
 80049e8:	08004a55 	.word	0x08004a55
 80049ec:	08004a5b 	.word	0x08004a5b
 80049f0:	08004a55 	.word	0x08004a55
 80049f4:	08004a55 	.word	0x08004a55
 80049f8:	08004a55 	.word	0x08004a55
 80049fc:	08004a55 	.word	0x08004a55
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004a55 	.word	0x08004a55
 8004a0c:	08004a5b 	.word	0x08004a5b
 8004a10:	08004a55 	.word	0x08004a55
 8004a14:	08004a55 	.word	0x08004a55
 8004a18:	08004a55 	.word	0x08004a55
 8004a1c:	08004a55 	.word	0x08004a55
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a55 	.word	0x08004a55
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	08004a5b 	.word	0x08004a5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fdf4 	bl	8005624 <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a40:	e00c      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3324      	adds	r3, #36	; 0x24
 8004a46:	2101      	movs	r1, #1
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fe9d 	bl	8005788 <RCCEx_PLL3_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a52:	e003      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
      break;
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6e:	4921      	ldr	r1, [pc, #132]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	654b      	str	r3, [r1, #84]	; 0x54
 8004a74:	e001      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d03e      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d820      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004ad7 	.word	0x08004ad7
 8004a98:	08004aad 	.word	0x08004aad
 8004a9c:	08004abf 	.word	0x08004abf
 8004aa0:	08004ad7 	.word	0x08004ad7
 8004aa4:	08004ad7 	.word	0x08004ad7
 8004aa8:	08004ad7 	.word	0x08004ad7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fdb6 	bl	8005624 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004abc:	e00c      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3324      	adds	r3, #36	; 0x24
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fe5f 	bl	8005788 <RCCEx_PLL3_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ace:	e003      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d110      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	f023 0207 	bic.w	r2, r3, #7
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	4902      	ldr	r1, [pc, #8]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	654b      	str	r3, [r1, #84]	; 0x54
 8004af0:	e008      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004af2:	bf00      	nop
 8004af4:	58024400 	.word	0x58024400
 8004af8:	58024800 	.word	0x58024800
 8004afc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d039      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d820      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b63 	.word	0x08004b63
 8004b24:	08004b39 	.word	0x08004b39
 8004b28:	08004b4b 	.word	0x08004b4b
 8004b2c:	08004b63 	.word	0x08004b63
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	08004b63 	.word	0x08004b63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fd70 	bl	8005624 <RCCEx_PLL2_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b48:	e00c      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3324      	adds	r3, #36	; 0x24
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fe19 	bl	8005788 <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b5a:	e003      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6a:	4bb7      	ldr	r3, [pc, #732]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f023 0207 	bic.w	r2, r3, #7
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	49b3      	ldr	r1, [pc, #716]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b7e:	e001      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
 8004b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d04b      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9a:	d02e      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ba0:	d828      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba6:	d02a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d822      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bb2:	d026      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bb8:	d81c      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbe:	d010      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc4:	d816      	bhi.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01d      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bce:	d111      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fd24 	bl	8005624 <RCCEx_PLL2_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004be0:	e012      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3324      	adds	r3, #36	; 0x24
 8004be6:	2102      	movs	r1, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fdcd 	bl	8005788 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004bfa:	bf00      	nop
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004c02:	bf00      	nop
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0e:	4b8e      	ldr	r3, [pc, #568]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	498a      	ldr	r1, [pc, #552]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	654b      	str	r3, [r1, #84]	; 0x54
 8004c22:	e001      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d04b      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c3e:	d02e      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004c40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c44:	d828      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	d02a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c50:	d822      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c56:	d026      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5c:	d81c      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c62:	d010      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d816      	bhi.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01d      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c72:	d111      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fcd2 	bl	8005624 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c84:	e012      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3324      	adds	r3, #36	; 0x24
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fd7b 	bl	8005788 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c96:	e009      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9c:	e006      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e004      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb2:	4b65      	ldr	r3, [pc, #404]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc0:	4961      	ldr	r1, [pc, #388]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8004cc6:	e001      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04b      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ce2:	d02e      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004ce4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ce8:	d828      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cee:	d02a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf4:	d822      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004cf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cfa:	d026      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004cfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d00:	d81c      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d06:	d010      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0c:	d816      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01d      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d16:	d111      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fc80 	bl	8005624 <RCCEx_PLL2_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d28:	e012      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3324      	adds	r3, #36	; 0x24
 8004d2e:	2102      	movs	r1, #2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fd29 	bl	8005788 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d3a:	e009      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	e006      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d42:	bf00      	nop
 8004d44:	e004      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d46:	bf00      	nop
 8004d48:	e002      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d56:	4b3c      	ldr	r3, [pc, #240]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d64:	4938      	ldr	r1, [pc, #224]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	658b      	str	r3, [r1, #88]	; 0x58
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d86:	d10a      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3324      	adds	r3, #36	; 0x24
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fcfa 	bl	8005788 <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d9e:	4b2a      	ldr	r3, [pc, #168]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dac:	4926      	ldr	r1, [pc, #152]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc8:	d10a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3324      	adds	r3, #36	; 0x24
 8004dce:	2102      	movs	r1, #2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fcd9 	bl	8005788 <RCCEx_PLL3_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dee:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d036      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e0a:	d01f      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e10:	d817      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004e1c:	e011      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fbfd 	bl	8005624 <RCCEx_PLL2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e2e:	e00e      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3324      	adds	r3, #36	; 0x24
 8004e34:	2102      	movs	r1, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fca6 	bl	8005788 <RCCEx_PLL3_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e40:	e005      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
      break;
 8004e46:	e002      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004e48:	58024400 	.word	0x58024400
      break;
 8004e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e54:	4b93      	ldr	r3, [pc, #588]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e62:	4990      	ldr	r1, [pc, #576]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	658b      	str	r3, [r1, #88]	; 0x58
 8004e68:	e001      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
 8004e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d033      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e84:	d01c      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e8a:	d816      	bhi.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e96:	d007      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004e98:	e00f      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9a:	4b82      	ldr	r3, [pc, #520]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	4a81      	ldr	r2, [pc, #516]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ea6:	e00c      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3324      	adds	r3, #36	; 0x24
 8004eac:	2101      	movs	r1, #1
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fc6a 	bl	8005788 <RCCEx_PLL3_Config>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec8:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed6:	4973      	ldr	r1, [pc, #460]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	654b      	str	r3, [r1, #84]	; 0x54
 8004edc:	e001      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d029      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efa:	d007      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004efc:	e00f      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efe:	4b69      	ldr	r3, [pc, #420]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a68      	ldr	r2, [pc, #416]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	2102      	movs	r1, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fb86 	bl	8005624 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
      break;
 8004f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	495b      	ldr	r1, [pc, #364]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f3c:	e001      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3324      	adds	r3, #36	; 0x24
 8004f52:	2102      	movs	r1, #2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fc17 	bl	8005788 <RCCEx_PLL3_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d030      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f78:	d017      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7e:	d811      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f84:	d013      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d80b      	bhi.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f96:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4a42      	ldr	r2, [pc, #264]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004fa2:	e007      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fba:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc6:	4937      	ldr	r1, [pc, #220]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	654b      	str	r3, [r1, #84]	; 0x54
 8004fcc:	e001      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	492e      	ldr	r1, [pc, #184]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d009      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800500a:	4926      	ldr	r1, [pc, #152]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800500c:	4313      	orrs	r3, r2
 800500e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005028:	491e      	ldr	r1, [pc, #120]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800503a:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	4a19      	ldr	r2, [pc, #100]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005044:	6113      	str	r3, [r2, #16]
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005050:	4914      	ldr	r1, [pc, #80]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	da08      	bge.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800505e:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506a:	490e      	ldr	r1, [pc, #56]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	4906      	ldr	r1, [pc, #24]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005090:	7dbb      	ldrb	r3, [r7, #22]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	58024400 	.word	0x58024400

080050a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050ac:	f7ff f860 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	58024400 	.word	0x58024400
 80050d0:	08007e48 	.word	0x08007e48

080050d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050dc:	4ba1      	ldr	r3, [pc, #644]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80050e6:	4b9f      	ldr	r3, [pc, #636]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	0b1b      	lsrs	r3, r3, #12
 80050ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050f2:	4b9c      	ldr	r3, [pc, #624]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80050fe:	4b99      	ldr	r3, [pc, #612]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	08db      	lsrs	r3, r3, #3
 8005104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8111 	beq.w	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b02      	cmp	r3, #2
 8005126:	f000 8083 	beq.w	8005230 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b02      	cmp	r3, #2
 800512e:	f200 80a1 	bhi.w	8005274 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d056      	beq.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800513e:	e099      	b.n	8005274 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005140:	4b88      	ldr	r3, [pc, #544]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02d      	beq.n	80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800514c:	4b85      	ldr	r3, [pc, #532]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	4a84      	ldr	r2, [pc, #528]	; (8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b7b      	ldr	r3, [pc, #492]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a03 	vldr	s12, [r7, #12]
 800518a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800536c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051a6:	e087      	b.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b6a      	ldr	r3, [pc, #424]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800536c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ea:	e065      	b.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fe:	4b59      	ldr	r3, [pc, #356]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005212:	eddf 5a56 	vldr	s11, [pc, #344]	; 800536c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800522e:	e043      	b.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005242:	4b48      	ldr	r3, [pc, #288]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005252:	ed97 6a03 	vldr	s12, [r7, #12]
 8005256:	eddf 5a45 	vldr	s11, [pc, #276]	; 800536c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800525a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005272:	e021      	b.n	80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005286:	4b37      	ldr	r3, [pc, #220]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005296:	ed97 6a03 	vldr	s12, [r7, #12]
 800529a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800536c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800529e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80052b8:	4b2a      	ldr	r3, [pc, #168]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	0a5b      	lsrs	r3, r3, #9
 80052be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052de:	ee17 2a90 	vmov	r2, s15
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80052e6:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052f0:	ee07 3a90 	vmov	s15, r3
 80052f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005300:	edd7 6a07 	vldr	s13, [r7, #28]
 8005304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530c:	ee17 2a90 	vmov	r2, s15
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	0e1b      	lsrs	r3, r3, #24
 800531a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800532a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800532e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800533a:	ee17 2a90 	vmov	r2, s15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005342:	e008      	b.n	8005356 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
}
 8005356:	bf00      	nop
 8005358:	3724      	adds	r7, #36	; 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	58024400 	.word	0x58024400
 8005368:	03d09000 	.word	0x03d09000
 800536c:	46000000 	.word	0x46000000
 8005370:	4c742400 	.word	0x4c742400
 8005374:	4a742400 	.word	0x4a742400
 8005378:	4bbebc20 	.word	0x4bbebc20

0800537c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005384:	4ba1      	ldr	r3, [pc, #644]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800538e:	4b9f      	ldr	r3, [pc, #636]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	0d1b      	lsrs	r3, r3, #20
 8005394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005398:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800539a:	4b9c      	ldr	r3, [pc, #624]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80053a6:	4b99      	ldr	r3, [pc, #612]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8111 	beq.w	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	f000 8083 	beq.w	80054d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	f200 80a1 	bhi.w	800551c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d056      	beq.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053e6:	e099      	b.n	800551c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02d      	beq.n	8005450 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053f4:	4b85      	ldr	r3, [pc, #532]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	08db      	lsrs	r3, r3, #3
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	4a84      	ldr	r2, [pc, #528]	; (8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b7b      	ldr	r3, [pc, #492]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005432:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800544e:	e087      	b.n	8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b6a      	ldr	r3, [pc, #424]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a03 	vldr	s12, [r7, #12]
 8005476:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005492:	e065      	b.n	8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800561c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d6:	e043      	b.n	8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b48      	ldr	r3, [pc, #288]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800551a:	e021      	b.n	8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800561c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005542:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800555e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	0a5b      	lsrs	r3, r3, #9
 8005566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800557a:	edd7 6a07 	vldr	s13, [r7, #28]
 800557e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005586:	ee17 2a90 	vmov	r2, s15
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800558e:	4b1f      	ldr	r3, [pc, #124]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	0c1b      	lsrs	r3, r3, #16
 8005594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005598:	ee07 3a90 	vmov	s15, r3
 800559c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b4:	ee17 2a90 	vmov	r2, s15
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	0e1b      	lsrs	r3, r3, #24
 80055c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80055da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e2:	ee17 2a90 	vmov	r2, s15
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	609a      	str	r2, [r3, #8]
}
 80055fe:	bf00      	nop
 8005600:	3724      	adds	r7, #36	; 0x24
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	58024400 	.word	0x58024400
 8005610:	03d09000 	.word	0x03d09000
 8005614:	46000000 	.word	0x46000000
 8005618:	4c742400 	.word	0x4c742400
 800561c:	4a742400 	.word	0x4a742400
 8005620:	4bbebc20 	.word	0x4bbebc20

08005624 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005632:	4b53      	ldr	r3, [pc, #332]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d101      	bne.n	8005642 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e099      	b.n	8005776 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005642:	4b4f      	ldr	r3, [pc, #316]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a4e      	ldr	r2, [pc, #312]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005648:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800564c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800564e:	f7fd fa3f 	bl	8002ad0 <HAL_GetTick>
 8005652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005654:	e008      	b.n	8005668 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005656:	f7fd fa3b 	bl	8002ad0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e086      	b.n	8005776 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005668:	4b45      	ldr	r3, [pc, #276]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005674:	4b42      	ldr	r3, [pc, #264]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	493f      	ldr	r1, [pc, #252]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005684:	4313      	orrs	r3, r2
 8005686:	628b      	str	r3, [r1, #40]	; 0x28
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	3b01      	subs	r3, #1
 800568e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	3b01      	subs	r3, #1
 8005698:	025b      	lsls	r3, r3, #9
 800569a:	b29b      	uxth	r3, r3
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	061b      	lsls	r3, r3, #24
 80056b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056b8:	4931      	ldr	r1, [pc, #196]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80056be:	4b30      	ldr	r3, [pc, #192]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	492d      	ldr	r1, [pc, #180]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80056d0:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	f023 0220 	bic.w	r2, r3, #32
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	4928      	ldr	r1, [pc, #160]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80056e2:	4b27      	ldr	r3, [pc, #156]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	4a26      	ldr	r2, [pc, #152]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056e8:	f023 0310 	bic.w	r3, r3, #16
 80056ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <RCCEx_PLL2_Config+0x160>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	69d2      	ldr	r2, [r2, #28]
 80056fa:	00d2      	lsls	r2, r2, #3
 80056fc:	4920      	ldr	r1, [pc, #128]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005708:	f043 0310 	orr.w	r3, r3, #16
 800570c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a19      	ldr	r2, [pc, #100]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 800571a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800571e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005720:	e00f      	b.n	8005742 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d106      	bne.n	8005736 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a14      	ldr	r2, [pc, #80]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 800572e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005732:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005734:	e005      	b.n	8005742 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	4a11      	ldr	r2, [pc, #68]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 800573c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005740:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 8005748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800574e:	f7fd f9bf 	bl	8002ad0 <HAL_GetTick>
 8005752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005754:	e008      	b.n	8005768 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005756:	f7fd f9bb 	bl	8002ad0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e006      	b.n	8005776 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <RCCEx_PLL2_Config+0x15c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	58024400 	.word	0x58024400
 8005784:	ffff0007 	.word	0xffff0007

08005788 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005796:	4b53      	ldr	r3, [pc, #332]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d101      	bne.n	80057a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e099      	b.n	80058da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80057a6:	4b4f      	ldr	r3, [pc, #316]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a4e      	ldr	r2, [pc, #312]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b2:	f7fd f98d 	bl	8002ad0 <HAL_GetTick>
 80057b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057b8:	e008      	b.n	80057cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057ba:	f7fd f989 	bl	8002ad0 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e086      	b.n	80058da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80057cc:	4b45      	ldr	r3, [pc, #276]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f0      	bne.n	80057ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80057d8:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	051b      	lsls	r3, r3, #20
 80057e6:	493f      	ldr	r1, [pc, #252]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	628b      	str	r3, [r1, #40]	; 0x28
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	025b      	lsls	r3, r3, #9
 80057fe:	b29b      	uxth	r3, r3
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	041b      	lsls	r3, r3, #16
 800580a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	3b01      	subs	r3, #1
 8005816:	061b      	lsls	r3, r3, #24
 8005818:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800581c:	4931      	ldr	r1, [pc, #196]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005822:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	492d      	ldr	r1, [pc, #180]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005834:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	4928      	ldr	r1, [pc, #160]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005842:	4313      	orrs	r3, r2
 8005844:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005856:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <RCCEx_PLL3_Config+0x160>)
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	69d2      	ldr	r2, [r2, #28]
 800585e:	00d2      	lsls	r2, r2, #3
 8005860:	4920      	ldr	r1, [pc, #128]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005866:	4b1f      	ldr	r3, [pc, #124]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800586c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005878:	4b1a      	ldr	r3, [pc, #104]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800587e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005884:	e00f      	b.n	80058a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d106      	bne.n	800589a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800588c:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 8005892:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005896:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005898:	e005      	b.n	80058a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4a11      	ldr	r2, [pc, #68]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80058a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fd f90d 	bl	8002ad0 <HAL_GetTick>
 80058b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058b8:	e008      	b.n	80058cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80058ba:	f7fd f909 	bl	8002ad0 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e006      	b.n	80058da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	58024400 	.word	0x58024400
 80058e8:	ffff0007 	.word	0xffff0007

080058ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d067      	beq.n	80059ce <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fc fd74 	bl	8002400 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	22ca      	movs	r2, #202	; 0xca
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2253      	movs	r2, #83	; 0x53
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f879 	bl	8005a28 <RTC_EnterInitMode>
 8005936:	4603      	mov	r3, r0
 8005938:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d13b      	bne.n	80059b8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6899      	ldr	r1, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <HAL_RTC_Init+0xec>)
 800594c:	400b      	ands	r3, r1
 800594e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	0419      	lsls	r1, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f885 	bl	8005a90 <RTC_ExitInitMode>
 8005986:	4603      	mov	r3, r0
 8005988:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d113      	bne.n	80059b8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0203 	bic.w	r2, r2, #3
 800599e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	22ff      	movs	r2, #255	; 0xff
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	ff8fffbf 	.word	0xff8fffbf

080059dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059f2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80059f4:	f7fd f86c 	bl	8002ad0 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059fa:	e009      	b.n	8005a10 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059fc:	f7fd f868 	bl	8002ad0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a0a:	d901      	bls.n	8005a10 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e007      	b.n	8005a20 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0ee      	beq.n	80059fc <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d120      	bne.n	8005a84 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a4c:	f7fd f840 	bl	8002ad0 <HAL_GetTick>
 8005a50:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a52:	e00d      	b.n	8005a70 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a54:	f7fd f83c 	bl	8002ad0 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a62:	d905      	bls.n	8005a70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <RTC_EnterInitMode+0x5c>
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d1e7      	bne.n	8005a54 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8005a9c:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa6:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005aa8:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff91 	bl	80059dc <HAL_RTC_WaitForSynchro>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01e      	beq.n	8005afe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e017      	b.n	8005afe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	4a0d      	ldr	r2, [pc, #52]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005ad4:	f023 0320 	bic.w	r3, r3, #32
 8005ad8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ff7e 	bl	80059dc <HAL_RTC_WaitForSynchro>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2203      	movs	r2, #3
 8005aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <RTC_ExitInitMode+0x78>)
 8005af8:	f043 0320 	orr.w	r3, r3, #32
 8005afc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58004000 	.word	0x58004000

08005b0c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e034      	b.n	8005b8e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ca      	movs	r2, #202	; 0xca
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2253      	movs	r2, #83	; 0x53
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005b52:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b72:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e03e      	b.n	8005c30 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7fc fdfe 	bl	80027c8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f001 fa02 	bl	8006fe0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	461a      	mov	r2, r3
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	f001 fa8a 	bl	8007100 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6858      	ldr	r0, [r3, #4]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	f001 fad1 	bl	80071a0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	6892      	ldr	r2, [r2, #8]
 8005c06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	f041 0101 	orr.w	r1, r1, #1
 8005c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_SRAM_Init+0x9c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <HAL_SRAM_Init+0x9c>)
 8005c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	52004000 	.word	0x52004000

08005c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e042      	b.n	8005cd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fc fbfd 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2224      	movs	r2, #36	; 0x24
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f996 	bl	8005fb0 <UART_SetConfig>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e022      	b.n	8005cd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 feea 	bl	8006a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ff71 	bl	8006bb4 <UART_CheckIdleState>
 8005cd2:	4603      	mov	r3, r0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	f040 8083 	bne.w	8005dfe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_UART_Transmit+0x28>
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e07b      	b.n	8005e00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Transmit+0x3a>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e074      	b.n	8005e00 <HAL_UART_Transmit+0x124>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2221      	movs	r2, #33	; 0x21
 8005d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d2e:	f7fc fecf 	bl	8002ad0 <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	88fa      	ldrh	r2, [r7, #6]
 8005d38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4c:	d108      	bne.n	8005d60 <HAL_UART_Transmit+0x84>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e003      	b.n	8005d68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005d70:	e02c      	b.n	8005dcc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 ff64 	bl	8006c4a <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e039      	b.n	8005e00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3302      	adds	r3, #2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e007      	b.n	8005dba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1cc      	bne.n	8005d72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	2140      	movs	r1, #64	; 0x40
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 ff31 	bl	8006c4a <UART_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e006      	b.n	8005e00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e000      	b.n	8005e00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
  }
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	f040 80c0 	bne.w	8005fa4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_UART_Receive+0x28>
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0b8      	b.n	8005fa6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_UART_Receive+0x3a>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0b1      	b.n	8005fa6 <HAL_UART_Receive+0x19e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2222      	movs	r2, #34	; 0x22
 8005e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e60:	f7fc fe36 	bl	8002ad0 <HAL_GetTick>
 8005e64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	88fa      	ldrh	r2, [r7, #6]
 8005e72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d10e      	bne.n	8005e9e <HAL_UART_Receive+0x96>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <HAL_UART_Receive+0x8c>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e92:	e02d      	b.n	8005ef0 <HAL_UART_Receive+0xe8>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e9c:	e028      	b.n	8005ef0 <HAL_UART_Receive+0xe8>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <HAL_UART_Receive+0xba>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <HAL_UART_Receive+0xb0>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	22ff      	movs	r2, #255	; 0xff
 8005eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005eb6:	e01b      	b.n	8005ef0 <HAL_UART_Receive+0xe8>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	227f      	movs	r2, #127	; 0x7f
 8005ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ec0:	e016      	b.n	8005ef0 <HAL_UART_Receive+0xe8>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eca:	d10d      	bne.n	8005ee8 <HAL_UART_Receive+0xe0>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <HAL_UART_Receive+0xd6>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	227f      	movs	r2, #127	; 0x7f
 8005ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005edc:	e008      	b.n	8005ef0 <HAL_UART_Receive+0xe8>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	223f      	movs	r2, #63	; 0x3f
 8005ee2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ee6:	e003      	b.n	8005ef0 <HAL_UART_Receive+0xe8>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ef6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Receive+0x10c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f24:	e032      	b.n	8005f8c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2120      	movs	r1, #32
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fe8a 	bl	8006c4a <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e032      	b.n	8005fa6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	8a7b      	ldrh	r3, [r7, #18]
 8005f50:	4013      	ands	r3, r2
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	e00c      	b.n	8005f7a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	8a7b      	ldrh	r3, [r7, #18]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1c6      	bne.n	8005f26 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b5b0      	push	{r4, r5, r7, lr}
 8005fb2:	b08e      	sub	sp, #56	; 0x38
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4bbf      	ldr	r3, [pc, #764]	; (80062dc <UART_SetConfig+0x32c>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4ab5      	ldr	r2, [pc, #724]	; (80062e0 <UART_SetConfig+0x330>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006016:	4313      	orrs	r3, r2
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	4bb0      	ldr	r3, [pc, #704]	; (80062e4 <UART_SetConfig+0x334>)
 8006022:	4013      	ands	r3, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800602a:	430b      	orrs	r3, r1
 800602c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f023 010f 	bic.w	r1, r3, #15
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4aa7      	ldr	r2, [pc, #668]	; (80062e8 <UART_SetConfig+0x338>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d176      	bne.n	800613c <UART_SetConfig+0x18c>
 800604e:	4ba7      	ldr	r3, [pc, #668]	; (80062ec <UART_SetConfig+0x33c>)
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006056:	2b28      	cmp	r3, #40	; 0x28
 8006058:	d86c      	bhi.n	8006134 <UART_SetConfig+0x184>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0xb0>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006105 	.word	0x08006105
 8006064:	08006135 	.word	0x08006135
 8006068:	08006135 	.word	0x08006135
 800606c:	08006135 	.word	0x08006135
 8006070:	08006135 	.word	0x08006135
 8006074:	08006135 	.word	0x08006135
 8006078:	08006135 	.word	0x08006135
 800607c:	08006135 	.word	0x08006135
 8006080:	0800610d 	.word	0x0800610d
 8006084:	08006135 	.word	0x08006135
 8006088:	08006135 	.word	0x08006135
 800608c:	08006135 	.word	0x08006135
 8006090:	08006135 	.word	0x08006135
 8006094:	08006135 	.word	0x08006135
 8006098:	08006135 	.word	0x08006135
 800609c:	08006135 	.word	0x08006135
 80060a0:	08006115 	.word	0x08006115
 80060a4:	08006135 	.word	0x08006135
 80060a8:	08006135 	.word	0x08006135
 80060ac:	08006135 	.word	0x08006135
 80060b0:	08006135 	.word	0x08006135
 80060b4:	08006135 	.word	0x08006135
 80060b8:	08006135 	.word	0x08006135
 80060bc:	08006135 	.word	0x08006135
 80060c0:	0800611d 	.word	0x0800611d
 80060c4:	08006135 	.word	0x08006135
 80060c8:	08006135 	.word	0x08006135
 80060cc:	08006135 	.word	0x08006135
 80060d0:	08006135 	.word	0x08006135
 80060d4:	08006135 	.word	0x08006135
 80060d8:	08006135 	.word	0x08006135
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006125 	.word	0x08006125
 80060e4:	08006135 	.word	0x08006135
 80060e8:	08006135 	.word	0x08006135
 80060ec:	08006135 	.word	0x08006135
 80060f0:	08006135 	.word	0x08006135
 80060f4:	08006135 	.word	0x08006135
 80060f8:	08006135 	.word	0x08006135
 80060fc:	08006135 	.word	0x08006135
 8006100:	0800612d 	.word	0x0800612d
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610a:	e222      	b.n	8006552 <UART_SetConfig+0x5a2>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006112:	e21e      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800611a:	e21a      	b.n	8006552 <UART_SetConfig+0x5a2>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006122:	e216      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006124:	2320      	movs	r3, #32
 8006126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612a:	e212      	b.n	8006552 <UART_SetConfig+0x5a2>
 800612c:	2340      	movs	r3, #64	; 0x40
 800612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006132:	e20e      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613a:	e20a      	b.n	8006552 <UART_SetConfig+0x5a2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a6b      	ldr	r2, [pc, #428]	; (80062f0 <UART_SetConfig+0x340>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d130      	bne.n	80061a8 <UART_SetConfig+0x1f8>
 8006146:	4b69      	ldr	r3, [pc, #420]	; (80062ec <UART_SetConfig+0x33c>)
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b05      	cmp	r3, #5
 8006150:	d826      	bhi.n	80061a0 <UART_SetConfig+0x1f0>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0x1a8>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006171 	.word	0x08006171
 800615c:	08006179 	.word	0x08006179
 8006160:	08006181 	.word	0x08006181
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006176:	e1ec      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617e:	e1e8      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006186:	e1e4      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618e:	e1e0      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006190:	2320      	movs	r3, #32
 8006192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006196:	e1dc      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619e:	e1d8      	b.n	8006552 <UART_SetConfig+0x5a2>
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a6:	e1d4      	b.n	8006552 <UART_SetConfig+0x5a2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a51      	ldr	r2, [pc, #324]	; (80062f4 <UART_SetConfig+0x344>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d130      	bne.n	8006214 <UART_SetConfig+0x264>
 80061b2:	4b4e      	ldr	r3, [pc, #312]	; (80062ec <UART_SetConfig+0x33c>)
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d826      	bhi.n	800620c <UART_SetConfig+0x25c>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <UART_SetConfig+0x214>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061ed 	.word	0x080061ed
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e1b6      	b.n	8006552 <UART_SetConfig+0x5a2>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e1b2      	b.n	8006552 <UART_SetConfig+0x5a2>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	e1ae      	b.n	8006552 <UART_SetConfig+0x5a2>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fa:	e1aa      	b.n	8006552 <UART_SetConfig+0x5a2>
 80061fc:	2320      	movs	r3, #32
 80061fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006202:	e1a6      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800620a:	e1a2      	b.n	8006552 <UART_SetConfig+0x5a2>
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006212:	e19e      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a37      	ldr	r2, [pc, #220]	; (80062f8 <UART_SetConfig+0x348>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d130      	bne.n	8006280 <UART_SetConfig+0x2d0>
 800621e:	4b33      	ldr	r3, [pc, #204]	; (80062ec <UART_SetConfig+0x33c>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b05      	cmp	r3, #5
 8006228:	d826      	bhi.n	8006278 <UART_SetConfig+0x2c8>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x280>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006249 	.word	0x08006249
 8006234:	08006251 	.word	0x08006251
 8006238:	08006259 	.word	0x08006259
 800623c:	08006261 	.word	0x08006261
 8006240:	08006269 	.word	0x08006269
 8006244:	08006271 	.word	0x08006271
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624e:	e180      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006256:	e17c      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625e:	e178      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006266:	e174      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006268:	2320      	movs	r3, #32
 800626a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626e:	e170      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006270:	2340      	movs	r3, #64	; 0x40
 8006272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006276:	e16c      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e168      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <UART_SetConfig+0x34c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d142      	bne.n	8006310 <UART_SetConfig+0x360>
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <UART_SetConfig+0x33c>)
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b05      	cmp	r3, #5
 8006294:	d838      	bhi.n	8006308 <UART_SetConfig+0x358>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <UART_SetConfig+0x2ec>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062bd 	.word	0x080062bd
 80062a4:	080062c5 	.word	0x080062c5
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062d5 	.word	0x080062d5
 80062b0:	08006301 	.word	0x08006301
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ba:	e14a      	b.n	8006552 <UART_SetConfig+0x5a2>
 80062bc:	2304      	movs	r3, #4
 80062be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c2:	e146      	b.n	8006552 <UART_SetConfig+0x5a2>
 80062c4:	2308      	movs	r3, #8
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ca:	e142      	b.n	8006552 <UART_SetConfig+0x5a2>
 80062cc:	2310      	movs	r3, #16
 80062ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d2:	e13e      	b.n	8006552 <UART_SetConfig+0x5a2>
 80062d4:	2320      	movs	r3, #32
 80062d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062da:	e13a      	b.n	8006552 <UART_SetConfig+0x5a2>
 80062dc:	cfff69f3 	.word	0xcfff69f3
 80062e0:	58000c00 	.word	0x58000c00
 80062e4:	11fff4ff 	.word	0x11fff4ff
 80062e8:	40011000 	.word	0x40011000
 80062ec:	58024400 	.word	0x58024400
 80062f0:	40004400 	.word	0x40004400
 80062f4:	40004800 	.word	0x40004800
 80062f8:	40004c00 	.word	0x40004c00
 80062fc:	40005000 	.word	0x40005000
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006306:	e124      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630e:	e120      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4acc      	ldr	r2, [pc, #816]	; (8006648 <UART_SetConfig+0x698>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d176      	bne.n	8006408 <UART_SetConfig+0x458>
 800631a:	4bcc      	ldr	r3, [pc, #816]	; (800664c <UART_SetConfig+0x69c>)
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006322:	2b28      	cmp	r3, #40	; 0x28
 8006324:	d86c      	bhi.n	8006400 <UART_SetConfig+0x450>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x37c>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	080063d1 	.word	0x080063d1
 8006330:	08006401 	.word	0x08006401
 8006334:	08006401 	.word	0x08006401
 8006338:	08006401 	.word	0x08006401
 800633c:	08006401 	.word	0x08006401
 8006340:	08006401 	.word	0x08006401
 8006344:	08006401 	.word	0x08006401
 8006348:	08006401 	.word	0x08006401
 800634c:	080063d9 	.word	0x080063d9
 8006350:	08006401 	.word	0x08006401
 8006354:	08006401 	.word	0x08006401
 8006358:	08006401 	.word	0x08006401
 800635c:	08006401 	.word	0x08006401
 8006360:	08006401 	.word	0x08006401
 8006364:	08006401 	.word	0x08006401
 8006368:	08006401 	.word	0x08006401
 800636c:	080063e1 	.word	0x080063e1
 8006370:	08006401 	.word	0x08006401
 8006374:	08006401 	.word	0x08006401
 8006378:	08006401 	.word	0x08006401
 800637c:	08006401 	.word	0x08006401
 8006380:	08006401 	.word	0x08006401
 8006384:	08006401 	.word	0x08006401
 8006388:	08006401 	.word	0x08006401
 800638c:	080063e9 	.word	0x080063e9
 8006390:	08006401 	.word	0x08006401
 8006394:	08006401 	.word	0x08006401
 8006398:	08006401 	.word	0x08006401
 800639c:	08006401 	.word	0x08006401
 80063a0:	08006401 	.word	0x08006401
 80063a4:	08006401 	.word	0x08006401
 80063a8:	08006401 	.word	0x08006401
 80063ac:	080063f1 	.word	0x080063f1
 80063b0:	08006401 	.word	0x08006401
 80063b4:	08006401 	.word	0x08006401
 80063b8:	08006401 	.word	0x08006401
 80063bc:	08006401 	.word	0x08006401
 80063c0:	08006401 	.word	0x08006401
 80063c4:	08006401 	.word	0x08006401
 80063c8:	08006401 	.word	0x08006401
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063d6:	e0bc      	b.n	8006552 <UART_SetConfig+0x5a2>
 80063d8:	2304      	movs	r3, #4
 80063da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063de:	e0b8      	b.n	8006552 <UART_SetConfig+0x5a2>
 80063e0:	2308      	movs	r3, #8
 80063e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063e6:	e0b4      	b.n	8006552 <UART_SetConfig+0x5a2>
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ee:	e0b0      	b.n	8006552 <UART_SetConfig+0x5a2>
 80063f0:	2320      	movs	r3, #32
 80063f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063f6:	e0ac      	b.n	8006552 <UART_SetConfig+0x5a2>
 80063f8:	2340      	movs	r3, #64	; 0x40
 80063fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063fe:	e0a8      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006406:	e0a4      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a90      	ldr	r2, [pc, #576]	; (8006650 <UART_SetConfig+0x6a0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d130      	bne.n	8006474 <UART_SetConfig+0x4c4>
 8006412:	4b8e      	ldr	r3, [pc, #568]	; (800664c <UART_SetConfig+0x69c>)
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b05      	cmp	r3, #5
 800641c:	d826      	bhi.n	800646c <UART_SetConfig+0x4bc>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <UART_SetConfig+0x474>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	0800643d 	.word	0x0800643d
 8006428:	08006445 	.word	0x08006445
 800642c:	0800644d 	.word	0x0800644d
 8006430:	08006455 	.word	0x08006455
 8006434:	0800645d 	.word	0x0800645d
 8006438:	08006465 	.word	0x08006465
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006442:	e086      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644a:	e082      	b.n	8006552 <UART_SetConfig+0x5a2>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006452:	e07e      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645a:	e07a      	b.n	8006552 <UART_SetConfig+0x5a2>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006462:	e076      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646a:	e072      	b.n	8006552 <UART_SetConfig+0x5a2>
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006472:	e06e      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a76      	ldr	r2, [pc, #472]	; (8006654 <UART_SetConfig+0x6a4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d130      	bne.n	80064e0 <UART_SetConfig+0x530>
 800647e:	4b73      	ldr	r3, [pc, #460]	; (800664c <UART_SetConfig+0x69c>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b05      	cmp	r3, #5
 8006488:	d826      	bhi.n	80064d8 <UART_SetConfig+0x528>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0x4e0>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a9 	.word	0x080064a9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ae:	e050      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b6:	e04c      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064be:	e048      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c6:	e044      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064c8:	2320      	movs	r3, #32
 80064ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ce:	e040      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d6:	e03c      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064de:	e038      	b.n	8006552 <UART_SetConfig+0x5a2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a5c      	ldr	r2, [pc, #368]	; (8006658 <UART_SetConfig+0x6a8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d130      	bne.n	800654c <UART_SetConfig+0x59c>
 80064ea:	4b58      	ldr	r3, [pc, #352]	; (800664c <UART_SetConfig+0x69c>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d826      	bhi.n	8006544 <UART_SetConfig+0x594>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x54c>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	08006515 	.word	0x08006515
 8006500:	0800651d 	.word	0x0800651d
 8006504:	08006525 	.word	0x08006525
 8006508:	0800652d 	.word	0x0800652d
 800650c:	08006535 	.word	0x08006535
 8006510:	0800653d 	.word	0x0800653d
 8006514:	2302      	movs	r3, #2
 8006516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651a:	e01a      	b.n	8006552 <UART_SetConfig+0x5a2>
 800651c:	2304      	movs	r3, #4
 800651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006522:	e016      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006524:	2308      	movs	r3, #8
 8006526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652a:	e012      	b.n	8006552 <UART_SetConfig+0x5a2>
 800652c:	2310      	movs	r3, #16
 800652e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006532:	e00e      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006534:	2320      	movs	r3, #32
 8006536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653a:	e00a      	b.n	8006552 <UART_SetConfig+0x5a2>
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006542:	e006      	b.n	8006552 <UART_SetConfig+0x5a2>
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800654a:	e002      	b.n	8006552 <UART_SetConfig+0x5a2>
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a40      	ldr	r2, [pc, #256]	; (8006658 <UART_SetConfig+0x6a8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	f040 80ef 	bne.w	800673c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800655e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006562:	2b20      	cmp	r3, #32
 8006564:	dc46      	bgt.n	80065f4 <UART_SetConfig+0x644>
 8006566:	2b02      	cmp	r3, #2
 8006568:	f2c0 8081 	blt.w	800666e <UART_SetConfig+0x6be>
 800656c:	3b02      	subs	r3, #2
 800656e:	2b1e      	cmp	r3, #30
 8006570:	d87d      	bhi.n	800666e <UART_SetConfig+0x6be>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x5c8>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065fb 	.word	0x080065fb
 800657c:	0800666f 	.word	0x0800666f
 8006580:	08006603 	.word	0x08006603
 8006584:	0800666f 	.word	0x0800666f
 8006588:	0800666f 	.word	0x0800666f
 800658c:	0800666f 	.word	0x0800666f
 8006590:	08006613 	.word	0x08006613
 8006594:	0800666f 	.word	0x0800666f
 8006598:	0800666f 	.word	0x0800666f
 800659c:	0800666f 	.word	0x0800666f
 80065a0:	0800666f 	.word	0x0800666f
 80065a4:	0800666f 	.word	0x0800666f
 80065a8:	0800666f 	.word	0x0800666f
 80065ac:	0800666f 	.word	0x0800666f
 80065b0:	08006623 	.word	0x08006623
 80065b4:	0800666f 	.word	0x0800666f
 80065b8:	0800666f 	.word	0x0800666f
 80065bc:	0800666f 	.word	0x0800666f
 80065c0:	0800666f 	.word	0x0800666f
 80065c4:	0800666f 	.word	0x0800666f
 80065c8:	0800666f 	.word	0x0800666f
 80065cc:	0800666f 	.word	0x0800666f
 80065d0:	0800666f 	.word	0x0800666f
 80065d4:	0800666f 	.word	0x0800666f
 80065d8:	0800666f 	.word	0x0800666f
 80065dc:	0800666f 	.word	0x0800666f
 80065e0:	0800666f 	.word	0x0800666f
 80065e4:	0800666f 	.word	0x0800666f
 80065e8:	0800666f 	.word	0x0800666f
 80065ec:	0800666f 	.word	0x0800666f
 80065f0:	08006661 	.word	0x08006661
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d036      	beq.n	8006666 <UART_SetConfig+0x6b6>
 80065f8:	e039      	b.n	800666e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80065fa:	f7fe fd55 	bl	80050a8 <HAL_RCCEx_GetD3PCLK1Freq>
 80065fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006600:	e03b      	b.n	800667a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006602:	f107 0314 	add.w	r3, r7, #20
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe fd64 	bl	80050d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006610:	e033      	b.n	800667a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe feb0 	bl	800537c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006620:	e02b      	b.n	800667a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <UART_SetConfig+0x69c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800662e:	4b07      	ldr	r3, [pc, #28]	; (800664c <UART_SetConfig+0x69c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	08db      	lsrs	r3, r3, #3
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	4a08      	ldr	r2, [pc, #32]	; (800665c <UART_SetConfig+0x6ac>)
 800663a:	fa22 f303 	lsr.w	r3, r2, r3
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006640:	e01b      	b.n	800667a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <UART_SetConfig+0x6ac>)
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006646:	e018      	b.n	800667a <UART_SetConfig+0x6ca>
 8006648:	40011400 	.word	0x40011400
 800664c:	58024400 	.word	0x58024400
 8006650:	40007800 	.word	0x40007800
 8006654:	40007c00 	.word	0x40007c00
 8006658:	58000c00 	.word	0x58000c00
 800665c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006660:	4bc4      	ldr	r3, [pc, #784]	; (8006974 <UART_SetConfig+0x9c4>)
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006664:	e009      	b.n	800667a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800666c:	e005      	b.n	800667a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006678:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 81da 	beq.w	8006a36 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	4abc      	ldr	r2, [pc, #752]	; (8006978 <UART_SetConfig+0x9c8>)
 8006688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800668c:	461a      	mov	r2, r3
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	fbb3 f3f2 	udiv	r3, r3, r2
 8006694:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4413      	add	r3, r2
 80066a0:	6a3a      	ldr	r2, [r7, #32]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d305      	bcc.n	80066b2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d903      	bls.n	80066ba <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80066b8:	e1bd      	b.n	8006a36 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	4618      	mov	r0, r3
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	4aac      	ldr	r2, [pc, #688]	; (8006978 <UART_SetConfig+0x9c8>)
 80066c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	f7f9 fe09 	bl	80002e8 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4610      	mov	r0, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	020b      	lsls	r3, r1, #8
 80066e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ec:	0202      	lsls	r2, r0, #8
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	6849      	ldr	r1, [r1, #4]
 80066f2:	0849      	lsrs	r1, r1, #1
 80066f4:	4608      	mov	r0, r1
 80066f6:	f04f 0100 	mov.w	r1, #0
 80066fa:	1814      	adds	r4, r2, r0
 80066fc:	eb43 0501 	adc.w	r5, r3, r1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	461a      	mov	r2, r3
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 fdeb 	bl	80002e8 <__aeabi_uldivmod>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4613      	mov	r3, r2
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006720:	d308      	bcc.n	8006734 <UART_SetConfig+0x784>
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006728:	d204      	bcs.n	8006734 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006730:	60da      	str	r2, [r3, #12]
 8006732:	e180      	b.n	8006a36 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800673a:	e17c      	b.n	8006a36 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006744:	f040 80be 	bne.w	80068c4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800674c:	2b20      	cmp	r3, #32
 800674e:	dc49      	bgt.n	80067e4 <UART_SetConfig+0x834>
 8006750:	2b00      	cmp	r3, #0
 8006752:	db7c      	blt.n	800684e <UART_SetConfig+0x89e>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d87a      	bhi.n	800684e <UART_SetConfig+0x89e>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <UART_SetConfig+0x7b0>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	080067eb 	.word	0x080067eb
 8006764:	080067f3 	.word	0x080067f3
 8006768:	0800684f 	.word	0x0800684f
 800676c:	0800684f 	.word	0x0800684f
 8006770:	080067fb 	.word	0x080067fb
 8006774:	0800684f 	.word	0x0800684f
 8006778:	0800684f 	.word	0x0800684f
 800677c:	0800684f 	.word	0x0800684f
 8006780:	0800680b 	.word	0x0800680b
 8006784:	0800684f 	.word	0x0800684f
 8006788:	0800684f 	.word	0x0800684f
 800678c:	0800684f 	.word	0x0800684f
 8006790:	0800684f 	.word	0x0800684f
 8006794:	0800684f 	.word	0x0800684f
 8006798:	0800684f 	.word	0x0800684f
 800679c:	0800684f 	.word	0x0800684f
 80067a0:	0800681b 	.word	0x0800681b
 80067a4:	0800684f 	.word	0x0800684f
 80067a8:	0800684f 	.word	0x0800684f
 80067ac:	0800684f 	.word	0x0800684f
 80067b0:	0800684f 	.word	0x0800684f
 80067b4:	0800684f 	.word	0x0800684f
 80067b8:	0800684f 	.word	0x0800684f
 80067bc:	0800684f 	.word	0x0800684f
 80067c0:	0800684f 	.word	0x0800684f
 80067c4:	0800684f 	.word	0x0800684f
 80067c8:	0800684f 	.word	0x0800684f
 80067cc:	0800684f 	.word	0x0800684f
 80067d0:	0800684f 	.word	0x0800684f
 80067d4:	0800684f 	.word	0x0800684f
 80067d8:	0800684f 	.word	0x0800684f
 80067dc:	0800684f 	.word	0x0800684f
 80067e0:	08006841 	.word	0x08006841
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	d02e      	beq.n	8006846 <UART_SetConfig+0x896>
 80067e8:	e031      	b.n	800684e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ea:	f7fd fcf1 	bl	80041d0 <HAL_RCC_GetPCLK1Freq>
 80067ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067f0:	e033      	b.n	800685a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f2:	f7fd fd03 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 80067f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067f8:	e02f      	b.n	800685a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067fa:	f107 0314 	add.w	r3, r7, #20
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc68 	bl	80050d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006808:	e027      	b.n	800685a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fdb4 	bl	800537c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006818:	e01f      	b.n	800685a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800681a:	4b58      	ldr	r3, [pc, #352]	; (800697c <UART_SetConfig+0x9cc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006826:	4b55      	ldr	r3, [pc, #340]	; (800697c <UART_SetConfig+0x9cc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	08db      	lsrs	r3, r3, #3
 800682c:	f003 0303 	and.w	r3, r3, #3
 8006830:	4a53      	ldr	r2, [pc, #332]	; (8006980 <UART_SetConfig+0x9d0>)
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006838:	e00f      	b.n	800685a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800683a:	4b51      	ldr	r3, [pc, #324]	; (8006980 <UART_SetConfig+0x9d0>)
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800683e:	e00c      	b.n	800685a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006840:	4b4c      	ldr	r3, [pc, #304]	; (8006974 <UART_SetConfig+0x9c4>)
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006844:	e009      	b.n	800685a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800684c:	e005      	b.n	800685a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80ea 	beq.w	8006a36 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	4a44      	ldr	r2, [pc, #272]	; (8006978 <UART_SetConfig+0x9c8>)
 8006868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800686c:	461a      	mov	r2, r3
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	fbb3 f3f2 	udiv	r3, r3, r2
 8006874:	005a      	lsls	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	441a      	add	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d916      	bls.n	80068bc <UART_SetConfig+0x90c>
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006894:	d212      	bcs.n	80068bc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	b29b      	uxth	r3, r3
 800689a:	f023 030f 	bic.w	r3, r3, #15
 800689e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068ae:	4313      	orrs	r3, r2
 80068b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068b8:	60da      	str	r2, [r3, #12]
 80068ba:	e0bc      	b.n	8006a36 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80068c2:	e0b8      	b.n	8006a36 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	dc4b      	bgt.n	8006964 <UART_SetConfig+0x9b4>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f2c0 8087 	blt.w	80069e0 <UART_SetConfig+0xa30>
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	f200 8084 	bhi.w	80069e0 <UART_SetConfig+0xa30>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <UART_SetConfig+0x930>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	0800696b 	.word	0x0800696b
 80068e4:	08006985 	.word	0x08006985
 80068e8:	080069e1 	.word	0x080069e1
 80068ec:	080069e1 	.word	0x080069e1
 80068f0:	0800698d 	.word	0x0800698d
 80068f4:	080069e1 	.word	0x080069e1
 80068f8:	080069e1 	.word	0x080069e1
 80068fc:	080069e1 	.word	0x080069e1
 8006900:	0800699d 	.word	0x0800699d
 8006904:	080069e1 	.word	0x080069e1
 8006908:	080069e1 	.word	0x080069e1
 800690c:	080069e1 	.word	0x080069e1
 8006910:	080069e1 	.word	0x080069e1
 8006914:	080069e1 	.word	0x080069e1
 8006918:	080069e1 	.word	0x080069e1
 800691c:	080069e1 	.word	0x080069e1
 8006920:	080069ad 	.word	0x080069ad
 8006924:	080069e1 	.word	0x080069e1
 8006928:	080069e1 	.word	0x080069e1
 800692c:	080069e1 	.word	0x080069e1
 8006930:	080069e1 	.word	0x080069e1
 8006934:	080069e1 	.word	0x080069e1
 8006938:	080069e1 	.word	0x080069e1
 800693c:	080069e1 	.word	0x080069e1
 8006940:	080069e1 	.word	0x080069e1
 8006944:	080069e1 	.word	0x080069e1
 8006948:	080069e1 	.word	0x080069e1
 800694c:	080069e1 	.word	0x080069e1
 8006950:	080069e1 	.word	0x080069e1
 8006954:	080069e1 	.word	0x080069e1
 8006958:	080069e1 	.word	0x080069e1
 800695c:	080069e1 	.word	0x080069e1
 8006960:	080069d3 	.word	0x080069d3
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d037      	beq.n	80069d8 <UART_SetConfig+0xa28>
 8006968:	e03a      	b.n	80069e0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800696a:	f7fd fc31 	bl	80041d0 <HAL_RCC_GetPCLK1Freq>
 800696e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006970:	e03c      	b.n	80069ec <UART_SetConfig+0xa3c>
 8006972:	bf00      	nop
 8006974:	003d0900 	.word	0x003d0900
 8006978:	08007e58 	.word	0x08007e58
 800697c:	58024400 	.word	0x58024400
 8006980:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006984:	f7fd fc3a 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8006988:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800698a:	e02f      	b.n	80069ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698c:	f107 0314 	add.w	r3, r7, #20
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fb9f 	bl	80050d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800699a:	e027      	b.n	80069ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800699c:	f107 0308 	add.w	r3, r7, #8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fceb 	bl	800537c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069aa:	e01f      	b.n	80069ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ac:	4b2c      	ldr	r3, [pc, #176]	; (8006a60 <UART_SetConfig+0xab0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069b8:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <UART_SetConfig+0xab0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	08db      	lsrs	r3, r3, #3
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	4a28      	ldr	r2, [pc, #160]	; (8006a64 <UART_SetConfig+0xab4>)
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069ca:	e00f      	b.n	80069ec <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80069cc:	4b25      	ldr	r3, [pc, #148]	; (8006a64 <UART_SetConfig+0xab4>)
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069d0:	e00c      	b.n	80069ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069d2:	4b25      	ldr	r3, [pc, #148]	; (8006a68 <UART_SetConfig+0xab8>)
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069d6:	e009      	b.n	80069ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80069de:	e005      	b.n	80069ec <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80069ea:	bf00      	nop
    }

    if (pclk != 0U)
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d021      	beq.n	8006a36 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <UART_SetConfig+0xabc>)
 80069f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	441a      	add	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	2b0f      	cmp	r3, #15
 8006a1a:	d909      	bls.n	8006a30 <UART_SetConfig+0xa80>
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a22:	d205      	bcs.n	8006a30 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	e002      	b.n	8006a36 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3738      	adds	r7, #56	; 0x38
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	003d0900 	.word	0x003d0900
 8006a6c:	08007e58 	.word	0x08007e58

08006a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6e:	d10a      	bne.n	8006b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bc4:	f7fb ff84 	bl	8002ad0 <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d10e      	bne.n	8006bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f82f 	bl	8006c4a <UART_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e025      	b.n	8006c42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d10e      	bne.n	8006c22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f819 	bl	8006c4a <UART_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e00f      	b.n	8006c42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b09c      	sub	sp, #112	; 0x70
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c5a:	e0a9      	b.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	f000 80a5 	beq.w	8006db0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c66:	f7fb ff33 	bl	8002ad0 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d140      	bne.n	8006cfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c90:	667b      	str	r3, [r7, #100]	; 0x64
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e6      	bne.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cce:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e5      	bne.n	8006cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e069      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d051      	beq.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1a:	d149      	bne.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
 8006d46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	613b      	str	r3, [r7, #16]
   return(result);
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f023 0301 	bic.w	r3, r3, #1
 8006d6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d78:	623a      	str	r2, [r7, #32]
 8006d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	69f9      	ldr	r1, [r7, #28]
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e010      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69da      	ldr	r2, [r3, #28]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	f43f af46 	beq.w	8006c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3770      	adds	r7, #112	; 0x70
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e027      	b.n	8006e40 <HAL_UARTEx_DisableFifoMode+0x66>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2224      	movs	r2, #36	; 0x24
 8006dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0201 	bic.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e02d      	b.n	8006ec0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2224      	movs	r2, #36	; 0x24
 8006e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0201 	bic.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f84f 	bl	8006f44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e02d      	b.n	8006f3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2224      	movs	r2, #36	; 0x24
 8006eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f811 	bl	8006f44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d108      	bne.n	8006f66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f64:	e031      	b.n	8006fca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f66:	2310      	movs	r3, #16
 8006f68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	0e5b      	lsrs	r3, r3, #25
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	0f5b      	lsrs	r3, r3, #29
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	7b3a      	ldrb	r2, [r7, #12]
 8006f92:	4911      	ldr	r1, [pc, #68]	; (8006fd8 <UARTEx_SetNbDataToProcess+0x94>)
 8006f94:	5c8a      	ldrb	r2, [r1, r2]
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f9a:	7b3a      	ldrb	r2, [r7, #12]
 8006f9c:	490f      	ldr	r1, [pc, #60]	; (8006fdc <UARTEx_SetNbDataToProcess+0x98>)
 8006f9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	7b7a      	ldrb	r2, [r7, #13]
 8006fb0:	4909      	ldr	r1, [pc, #36]	; (8006fd8 <UARTEx_SetNbDataToProcess+0x94>)
 8006fb2:	5c8a      	ldrb	r2, [r1, r2]
 8006fb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fb8:	7b7a      	ldrb	r2, [r7, #13]
 8006fba:	4908      	ldr	r1, [pc, #32]	; (8006fdc <UARTEx_SetNbDataToProcess+0x98>)
 8006fbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	08007e70 	.word	0x08007e70
 8006fdc:	08007e78 	.word	0x08007e78

08006fe0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	6812      	ldr	r2, [r2, #0]
 8006ff8:	f023 0101 	bic.w	r1, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b08      	cmp	r3, #8
 8007008:	d102      	bne.n	8007010 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800700a:	2340      	movs	r3, #64	; 0x40
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e001      	b.n	8007014 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007020:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007026:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800702c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007032:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007038:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800703e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007044:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800704a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007050:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007078:	4b20      	ldr	r3, [pc, #128]	; (80070fc <FMC_NORSRAM_Init+0x11c>)
 800707a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007082:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800708a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007092:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	ea02 0103 	and.w	r1, r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4319      	orrs	r1, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070bc:	d10c      	bne.n	80070d8 <FMC_NORSRAM_Init+0xf8>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	0008fb7f 	.word	0x0008fb7f

08007100 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	431a      	orrs	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	431a      	orrs	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	431a      	orrs	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	3b01      	subs	r3, #1
 800713c:	051b      	lsls	r3, r3, #20
 800713e:	431a      	orrs	r2, r3
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	3b02      	subs	r3, #2
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	431a      	orrs	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	4313      	orrs	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	3201      	adds	r2, #1
 8007154:	4319      	orrs	r1, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007168:	d113      	bne.n	8007192 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007172:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	3b01      	subs	r3, #1
 800717a:	051b      	lsls	r3, r3, #20
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b4:	d11d      	bne.n	80071f2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071be:	4b13      	ldr	r3, [pc, #76]	; (800720c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	6811      	ldr	r1, [r2, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	6852      	ldr	r2, [r2, #4]
 80071ca:	0112      	lsls	r2, r2, #4
 80071cc:	4311      	orrs	r1, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	6892      	ldr	r2, [r2, #8]
 80071d2:	0212      	lsls	r2, r2, #8
 80071d4:	4311      	orrs	r1, r2
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	6992      	ldr	r2, [r2, #24]
 80071da:	4311      	orrs	r1, r2
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68d2      	ldr	r2, [r2, #12]
 80071e0:	0412      	lsls	r2, r2, #16
 80071e2:	430a      	orrs	r2, r1
 80071e4:	ea43 0102 	orr.w	r1, r3, r2
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80071f0:	e005      	b.n	80071fe <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80071fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	cff00000 	.word	0xcff00000

08007210 <__libc_init_array>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4d0d      	ldr	r5, [pc, #52]	; (8007248 <__libc_init_array+0x38>)
 8007214:	4c0d      	ldr	r4, [pc, #52]	; (800724c <__libc_init_array+0x3c>)
 8007216:	1b64      	subs	r4, r4, r5
 8007218:	10a4      	asrs	r4, r4, #2
 800721a:	2600      	movs	r6, #0
 800721c:	42a6      	cmp	r6, r4
 800721e:	d109      	bne.n	8007234 <__libc_init_array+0x24>
 8007220:	4d0b      	ldr	r5, [pc, #44]	; (8007250 <__libc_init_array+0x40>)
 8007222:	4c0c      	ldr	r4, [pc, #48]	; (8007254 <__libc_init_array+0x44>)
 8007224:	f000 f82e 	bl	8007284 <_init>
 8007228:	1b64      	subs	r4, r4, r5
 800722a:	10a4      	asrs	r4, r4, #2
 800722c:	2600      	movs	r6, #0
 800722e:	42a6      	cmp	r6, r4
 8007230:	d105      	bne.n	800723e <__libc_init_array+0x2e>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	f855 3b04 	ldr.w	r3, [r5], #4
 8007238:	4798      	blx	r3
 800723a:	3601      	adds	r6, #1
 800723c:	e7ee      	b.n	800721c <__libc_init_array+0xc>
 800723e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007242:	4798      	blx	r3
 8007244:	3601      	adds	r6, #1
 8007246:	e7f2      	b.n	800722e <__libc_init_array+0x1e>
 8007248:	08007e88 	.word	0x08007e88
 800724c:	08007e88 	.word	0x08007e88
 8007250:	08007e88 	.word	0x08007e88
 8007254:	08007e8c 	.word	0x08007e8c

08007258 <memcpy>:
 8007258:	440a      	add	r2, r1
 800725a:	4291      	cmp	r1, r2
 800725c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007260:	d100      	bne.n	8007264 <memcpy+0xc>
 8007262:	4770      	bx	lr
 8007264:	b510      	push	{r4, lr}
 8007266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800726e:	4291      	cmp	r1, r2
 8007270:	d1f9      	bne.n	8007266 <memcpy+0xe>
 8007272:	bd10      	pop	{r4, pc}

08007274 <memset>:
 8007274:	4402      	add	r2, r0
 8007276:	4603      	mov	r3, r0
 8007278:	4293      	cmp	r3, r2
 800727a:	d100      	bne.n	800727e <memset+0xa>
 800727c:	4770      	bx	lr
 800727e:	f803 1b01 	strb.w	r1, [r3], #1
 8007282:	e7f9      	b.n	8007278 <memset+0x4>

08007284 <_init>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr

08007290 <_fini>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	bf00      	nop
 8007294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007296:	bc08      	pop	{r3}
 8007298:	469e      	mov	lr, r3
 800729a:	4770      	bx	lr
